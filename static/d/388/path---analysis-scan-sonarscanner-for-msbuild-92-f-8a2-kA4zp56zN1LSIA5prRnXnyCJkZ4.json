{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>How do I get rid of issues that are False-Positives?</h2>\n<p><strong>False-Positive and Won't Fix</strong><br>\nYou can mark individual issues False Positive or Won't Fix through the issues interface. If you're using PR analysis provided by the Developer Edition, issues marked False Positive or Won't Fix will retain that status after merge. This is the preferred approach.</p>\n<p><strong>//NOSONAR</strong><br>\nMost language analyzers support the use of the generic mechanism: <code>//NOSONAR</code> at the end of the line of the issue. This will suppress the all issues - now and in the future - that might be raised on the line.</p>\n<h2>How do I find and remove projects that haven't been analyzed in a while?</h2>\n<p>In <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/projects_management\">Administration > Projects > Management</a></strong> you can search for <strong>Last analysis before</strong> to filter projects not analyzed since a specific date, and then use bulk <strong>Delete</strong> to remove the projects that match your filter.</p>\n<p>This can be automated by using the corresponding Web API: <code>api/projects/bulk_delete?analyzedBefore=YYYY-MM-DD</code>.</p>\n<h2>How do I trigger a full ElasticSearch reindex?</h2>\n<p>Currently, the only way to force a reindex is to:</p>\n<ul>\n<li>Stop your server</li>\n<li>Remove the contents of the $SQ_HOME/data/es6 directory</li>\n<li>Start your server</li>\n</ul>\n<p>Before doing this, you should be aware first that processes are in place on the SonarQube side that out-of-sync indices are detected and corrected, and second that a full re-index can be quite lengthy depending on the size of your instance.</p>\n<h2>Why can't I use my HTTP Proxy since I upgraded to Java8u111?</h2>\n<p>If you are getting this error in the logs when trying to use the Marketplace:</p>\n<pre><code>java.io.IOException: Unable to tunnel through proxy. Proxy returns \"HTTP/1.1 407 Proxy Authentication Required\n</code></pre>\n<p>... you probably upgraded your Java8 installation with an update greater than 111. To fix that, update <em>$SONARQUBE</em>HOME/conf/sonar.properties` like this:</p>\n<pre><code>sonar.web.javaOpts=-Xmx512m -Xms128m -XX:+HeapDumpOnOutOfMemoryError -Djdk.http.auth.tunneling.disabledSchemes=\"\"\n</code></pre>\n<p>Reference: <a href=\"http://www.oracle.com/technetwork/java/javase/8u111-relnotes-3124969.html\">http://www.oracle.com/technetwork/java/javase/8u111-relnotes-3124969.html</a></p>","fields":{"slug":"/faq/"}}},{"node":{"html":"<h1> Error</h1>\n<p>This page does not exist</p>","fields":{"slug":"/404/"}}},{"node":{"html":"<p>SonarQube's UI is built as a Single Page Application using <a href=\"https://reactjs.org/\">React</a>. It provides the ability to add a new pages to the UI using JavaScript. A page (or page extension) is a self-contained JavaScript application that runs in the SonarQube environment. You can find the example of page extensions in the <a href=\"https://github.com/SonarSource/sonarqube\">SonarQube</a> or <a href=\"https://github.com/SonarSource/sonar-custom-plugin-example/tree/7.x/\">sonar-custom-plugin-example</a> repositories on GitHub.</p>\n<p>Before reading this guide, make sure you know how to <a href=\"/SonarQubeChineseDoc8.1/extend/developing-plugin/\">build, deploy, and debug a plugin</a>.</p>\n<h2>Step 1. Create a Java class implementing PageDefinition</h2>\n<p>For each page, you'll need to set a key and a name. The page key should have the format <code>plugin_key/page_id</code> (e.g.: <code>governance/project_dump</code>). The <code>plugin_key</code> is computed from the <code>&#x3C;artifactId></code> in your <code>pom.xml</code>, or can be set explicitly in the pom using the <code>&#x3C;pluginKey></code> parameter in the <code>sonar-packaging-maven-plugin</code> configuration. All the pages should be declared in this class.</p>\n<p>Example:</p>\n<pre><code>import org.sonar.api.web.page.Page;\nimport org.sonar.api.web.page.PageDefinition;\nimport org.sonar.api.web.page.Context;\n\nimport static org.sonar.api.web.page.Page.Scope.COMPONENT;\nimport static org.sonar.api.web.page.Page.Qualifier.VIEW;\nimport static org.sonar.api.web.page.Page.Qualifier.SUB_VIEW;\n \npublic class MyPluginPageDefinition implements PageDefinition {\n  @Override\n  public void define(Context context) {\n    context\n      .addPage(Page.builder(\"my_plugin/global_page\")\n        .setName(\"Global Page\")\n        .build())\n      .addPage(Page.builder(\"my_plugin/project_page\")\n        .setName(\"Project Page\")\n        .setScope(COMPONENT)\n        .build())\n      .addPage(Page.builder(\"my_plugin/portfolio_page\")\n        .setName(\"Portfolio Page\")\n        .setScope(COMPONENT)\n        .setComponentQualifiers(VIEW, SUB_VIEW)\n        .build())\n      .addPage(Page.builder(\"my_plugin/admin_page\")\n        .setName(\"Admin Page\")\n        .setAdmin(true)\n        .build());\n  }\n}\n</code></pre>\n<h3>Configuring each page</h3>\n<p>There are 3 settings available when you define the page extensions using the <code>PageDefinition</code> class:</p>\n<ul>\n<li><code>setAdmin(boolean admin)</code>: flag this page as restricted to users with \"administer\" permission. Defaults to <code>false</code>.</li>\n<li><code>setScope(org.sonar.api.web.page.Page.Scope scope)</code>: set the scope of this page. Available scopes are <code>GLOBAL</code> (default), which will add this page to the main menu, and <code>COMPONENT</code>, which will add the page to a project, application, or portfolio menu (applications and portfolios only apply to Enterprise Edition and above).</li>\n<li><code>setComponentQualifiers(org.sonar.api.web.page.Qualifier... qualifiers)</code>: if <code>setScope()</code> is set to <code>COMPONENT</code>, this sets to what kind of component the page applies to. Available qualifiers are <code>PROJECT</code>, <code>APP</code>, <code>VIEW</code> (portfolio), and <code>SUB_VIEW</code> (<code>APP</code>, <code>VIEW</code>, and <code>SUB_VIEW</code> only apply to Enterprise Edition and above). You can pass multiple qualifiers. If no qualifier is set, it will apply to all types.</li>\n</ul>\n<h2>Step 2. Create a JavaScript file per page</h2>\n<p>The <code>PageDefinition</code> will register each key as an available route in SonarQube. Whenever this route is visited, SonarQube will asynchronously fetch a single JavaScript file from your plugin's <code>/static/</code> directory, and boot up your page's application. This file should have the same name as the <code>page_id</code> you defined in your <code>PageDefinition</code> class. In the example in Step 1, you would need 4 different JavaScript files:</p>\n<ul>\n<li><code>/static/global_page.js</code></li>\n<li><code>/static/project_page.js</code></li>\n<li><code>/static/portfolio_page.js</code></li>\n<li><code>/static/admin_page.js</code></li>\n</ul>\n<p>Each file <em>must</em> call the global <code>window.registerExtension()</code> function, and pass its <em>full key</em> as a first argument (<code>plugin_key/page_id</code>, e.g.: <code>governance/project_dump</code>). The second argument is the <em>start</em> callback. This function will be called once your page is started, and receive information about the current page as an argument (see below). The return value of the start callback depends on how you want to implement your page:</p>\n<ul>\n<li>\n<p>If you want to use <a href=\"https://reactjs.org/\">React</a>, you should return a React Component:</p>\n<pre><code>// static/global_page.js\nimport React from \"react\";\nimport App from \"./components/App\";\n\nwindow.registerExtension('my_plugin/global_page', function (options) {\nreturn &#x3C;App options={options} />\n});\n</code></pre>\n</li>\n<li>\n<p>If you want to use any other framework, you should perform any start logic directly inside the start function body, and <strong>return a shutdown callback</strong>:</p>\n<pre><code>// static/global_page.js\nconst init = require(\"./my-app/init\");\n\nwindow.registerExtension('my_plugin/global_page', function (options) {\n// Start up my custom application, passing the DOM element which will serve as\n// the container.\ninit.boot(options.el, options.currentUser, options.component);\n\n// Whenever the user leaves the page, cleanly shut everything down\n// (i.e., remove event listeners, stop running timers, etc).\nreturn function () {\n  init.removeEventListeners();\n  init.clearState();\n  init.shutdown();\n};\n});\n</code></pre>\n</li>\n</ul>\n<p>The <code>options</code> object will contain the following:</p>\n<ul>\n<li><code>options.el</code>: a DOM node you must use to inject your content.</li>\n<li><code>options.currentUser</code>: information about the current user.</li>\n<li>(optional) <code>options.component</code>: contains the information of the current project, application, or portfolio.</li>\n<li>(optional) <code>options.branchLike</code>: contains the information of the current branch or pull request.</li>\n</ul>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>SonarQube doesn't guarantee any JavaScript library availability at runtime (except React). If you need a library, include it in the final file.</p></div></div>\n<h2>Examples</h2>\n<p>It is highly recommended you check out <a href=\"https://github.com/SonarSource/sonar-custom-plugin-example/tree/7.x/\">sonar-custom-plugin-example</a>. It contains detailed examples using several front-end frameworks, and its code is thoroughly documented. It also describes how to run a local development server to speed up the front-end development, without requiring a full rebuild and re-deploy to test your changes.</p>","fields":{"slug":"/extend/extend-web-app/"}}},{"node":{"html":"<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p><strong>歡迎閱讀 SonarQube 繁體中文文件</strong><br>\n請注意，如果您已經架設好完整的 SonarQube ，我們已經在您運作的 SonarQube 中提供了這份文件（從版本 v7.4 開始）。只要在頂部功能表中找到「 ? 」，就能查看符合您<em>運作版本</em>的正確文件！</p></div></div>\n<p><a href=\"http://www.sonarqube.org/\">SonarQube</a>® 是一款程式碼自動審查工具，用於尋找漏洞與程式碼氣味。它可以融合進你現有的工作流程，實現在專案分支（ project branches ）與拉取請求（ pull requests ）的持續性程式碼審查。</p>\n<p>我們提供了一些您可能會需要的關鍵條目，若沒有提到您需要的內容，請在左側導覽列中查閱完整的文件目錄或善用搜索功能。</p>\n<h3>我是 SonarQube 的新手</h3>\n<ul>\n<li>安裝 <a href=\"/SonarQubeChineseDoc8.1/setup/get-started-2-minutes/\">快速演示版本（ quick demo version ）</a>.</li>\n<li>安裝 <a href=\"/SonarQubeChineseDoc8.1/setup/install-server/\">生產實例（ production instance ）</a></li>\n</ul>\n<h3>我需要進行分析</h3>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/overview/\">分析原始碼（ Analyzing Source Code ）</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/branches/overview/\">分支（ Branches ）</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/pull-request/\">拉取請求（ Pull Requests ）</a></li>\n</ul>\n<h3>我正在程式設計</h3>\n<ul>\n<li>為什麼 <a href=\"/SonarQubeChineseDoc8.1/user-guide/clean-as-you-code/\">new code</a> 很重要？</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/user-guide/concepts/\">概念（ Concepts ）</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/user-guide/quality-gates/\">品質閘門（ Quality Gates ）</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/user-guide/issues/\">問題（ Issues ）</a></li>\n</ul>\n<h3>我正管理一個專案</h3>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/project-administration/project-existence/\">現有專案（ Project Existence ）</a></li>\n<li>什麼是分析中的 <a href=\"/SonarQubeChineseDoc8.1/project-administration/narrowing-the-focus/\">included 與 excluded</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/project-administration/webhooks/\">網路鉤子（ Webhooks )</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/project-administration/project-settings/\">專案設定（ Project Settings ）</a></li>\n</ul>\n<h3>我是一名 SonarQube 的管理者</h3>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/instance-administration/security/\">安全性（ Security ）</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/instance-administration/notifications/\">提醒（ Notifications ）</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/instance-administration/housekeeping/\">資料管理（ Housekeeping )</a></li>\n</ul>\n<h3>我正進行著 DevOps 的工作</h3>\n<ul>\n<li>安裝 <a href=\"/SonarQubeChineseDoc8.1/setup/install-server/\">生產實例（ production instance ）</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/setup/upgrading/\">升級（ Upgrading ）</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/instance-administration/monitoring/\">監測（ Monitoring ）</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/setup/operate-cluster/\">運行叢集（ Running a Cluster ）</a></li>\n</ul>\n<h3>保持聯繫！</h3>\n<ul>\n<li><a href=\"https://www.sonarqube.org/community/\">在社群中獲得幫助</a></li>\n<li><a href=\"https://github.com/SonarSource\">原始碼</a></li>\n<li><a href=\"https://jira.sonarsource.com/\">追縱問題</a></li>\n</ul>","fields":{"slug":"/"}}},{"node":{"html":"<p>Please be aware that we are not actively looking for feature contributions to SonarQube itself because it's extremely difficult for someone outside SonarSource to comply with our roadmap and expectations. Therefore, we typically only accept minor cosmetic changes and typo fixes for SonarQube, but we do happily welcome contributions to the other open source projects under the SonarSource umbrella. </p>\n<h2>General guidelines</h2>\n<ul>\n<li>Choose an open ticket in <a href=\"https://jira.sonarsource.com/secure/Dashboard.jspa\">JIRA</a> or propose your change on the <a href=\"https://community.sonarsource.com\">SonarQube Community Forum</a> - the discussion there is likely to result in an open JIRA ticket. ;-)</li>\n<li>Use the SonarSource conventions, which you'll find neatly packaged here: <a href=\"https://github.com/SonarSource/sonar-developer-toolset#the-almost-unbreakable-build\">https://github.com/SonarSource/sonar-developer-toolset#the-almost-unbreakable-build</a></li>\n<li>Use pull requests to submit your work</li>\n</ul>\n<h2>New rule implementations in existing plugins</h2>\n<ul>\n<li>\n<p>Start from an existing <a href=\"https://jira.sonarsource.com/browse/RSPEC-1973?filter=10375\">RSpec</a> (Rule Specification) that lists your language of interest in the \"Targeted languages\" field. </p>\n<ul>\n<li>If the RSpec you're interested in doesn't target the language where you want to implement it, raise the question on the Community Forums .</li>\n<li>If no RSpec exists for the rule you want to implement, raise the question on the <a href=\"https://community.sonarsource.com/\">Community Forum</a>.</li>\n</ul>\n</li>\n<li>Put your rule implementation class in the [language]-checks (e.g. java-checks, javascript-checks, &#x26;etc.) module, in the checks sub-package</li>\n<li>The naming convention for implementation classes is [A-Z][a-za-z]+Check.java. (Yes, put \"Check\" in the name too.) The class name should be descriptive and not reflect the rule key. E.G. FindBadCodeCheck.java, not S007.java.</li>\n<li>A good way to get started on a rule implementation is to look at the implementations of rules that do similar things.</li>\n<li>During development there's no need to load the plugin in a server to test your implementation, use the rule's unit test for that.</li>\n<li>\n<p>For a complete implementation, make sure all of the following are done:</p>\n<ul>\n<li>create HTML description file and metadata file</li>\n<li>write test class</li>\n<li>register the rule in CheckList.java</li>\n<li>add the rule to the profile used for the integration test in <code>profile.xml</code></li>\n<li>run the integration test and add any new issues to the set of expected issues </li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/extend/contributing/"}}},{"node":{"html":"<p>SonarQube Scanner uses information from the project's SCM, if available, to:</p>\n<ul>\n<li>Assign a new issue to the person who introduced it. The last committer on the related line of code is considered to be the author of the issue. </li>\n<li>Estimate the coverage on new code, including added and changed code, on the new code period. </li>\n<li>Display the most recent commit on each line the code viewer.\n<img src=\"/images/commit-info-in-code-viewer.png\" alt=\"Commit info is available from the margin of the code viewer\"></li>\n</ul>\n<p>The only required SCM command is \"blame\", which gets the last committer of each line for a given file. This command is executed by a SonarQube plugin through the extension point  org.sonar.api.batch.scm.ScmProvider. See the multiple existing plugins, for instance <a href=\"https://docs.sonarqube.org/display/SONAR/Git+Integration\">Git</a>, for more details.</p>","fields":{"slug":"/extend/adding-scm/"}}},{"node":{"html":"<p>If you have developed a SonarQube plugin, and it meets the requirements, we can even add it in the <a href=\"/SonarQubeChineseDoc8.1/instance-administration/marketplace/\">SonarQube Marketplace</a>.</p>\n<h2>Requirements</h2>\n<p>If your plugin meets the following requirements, then you can ask SonarSource (via the <a href=\"https://community.sonarsource.com/c/plugins\">Community Forum</a>) to reference your plugin in the <a href=\"/SonarQubeChineseDoc8.1/instance-administration/marketplace/\">SonarQube Marketplace</a>:</p>\n<ol>\n<li>\n<p>Your plugin is open-source</p>\n<ol>\n<li>Source is freely accessible</li>\n<li>The license is a known FLOSS one (check <a href=\"http://opensource.org/licenses\">the list provided by the Open Source Initiative</a>)</li>\n<li>There's a public issue tracking system</li>\n<li>Documentation is available online in English</li>\n<li>Binaries of each version are accessible somewhere</li>\n</ol>\n</li>\n<li>\n<p>Releases follow open source conventions. For each release, the following must be available:</p>\n<ol>\n<li>release notes that reflect all significant changes in the version</li>\n<li>plugin jar</li>\n</ol>\n</li>\n<li>\n<p>The key of your plugin must be:</p>\n<ol>\n<li>short and unique</li>\n<li>lowercase (no camelcase)</li>\n<li>composed only of [a-z0-9]</li>\n<li>related to the name of your plugin</li>\n<li>not just the name of a language (e.g. cannot be java, rust, js/javascript, ...)<br>\nexamples of good keys: motionchart, communityphp, scmactivity</li>\n</ol>\n</li>\n<li>The description of your plugin must not be misleading in terms of content (the code needs to do pretty much what the name and description say it does). </li>\n<li>On initial entry into the Marketplace, SonarSource staff will test the plugin to verify reasonable functionality and quality. SonarSource staff must be provided with the necessary means to do this testing <em>without</em> the need to sign any agreements or fill out any forms. Ideally, the means to do this testing will be made available to the community at large, with the same lack of restrictions.</li>\n<li>Your plugin does not compete with existing or soon-to-be-released SonarSource products (sorry, but we gotta pay the bills somehow).</li>\n<li>It is analyzed on <a href=\"https://sonarcloud.io/\">SonarCloud</a> and the quality gate is green when doing a release.</li>\n<li>It is compatible with the platform requirements (e.g. it runs on the minimum listed JRE).</li>\n<li>If your plugin adds analysis of a language which is not analyzed by any SonarSource analyzer you must provide the NCLOC and NCLOC<em>DATA <a href=\"/SonarQubeChineseDoc8.1/user-guide/metric-definitions/\">metrics</a>, which are both required to make the user experience within SonarQube consistent. You can take a look at how those metrics are provided by SonarJava (<a href=\"https://github.com/SonarSource/sonar-java/blob/4cb1065f405edccbb7d229633945b3c56aeab04c/java-frontend/src/main/java/org/sonar/java/Measurer.java#L109\">NCLOC</a>, [NCLOC</em>DATA](<a href=\"https://github.com/SonarSource/sonar-java/blob/4cb1065f405edccbb7d229633945b3c56aeab04c/java-frontend/src/main/java/org/sonar/java/ast/visitors/FileLinesVisitor.java#L101\">https://github.com/SonarSource/sonar-java/blob/4cb1065f405edccbb7d229633945b3c56aeab04c/java-frontend/src/main/java/org/sonar/java/ast/visitors/FileLinesVisitor.java#L101</a>)). </li>\n<li>Last but not least: your plugin must be aligned with the goal of the SonarQube platform: management of the technical debt and the quality of the code.<br>\nTo be more precise: every feature of SonarQube is tied to the code, so if your plugin provides data that can't be attached to a source or a test file, then there are chances that your plugin won't be accepted in the Marketplace</li>\n</ol>\n<p>If your plugin meets these requirements, feel free to start a new thread on the Community Forum requesting inclusion. This thread should include:</p>\n<ul>\n<li>plugin description</li>\n<li>plugin home page url</li>\n<li>plugin project homepage on SonarCloud</li>\n<li>the link to a PR adding a file for your plugin to the sonar-update-center-properties repo, and the elements of a \"new release\" email listed below.</li>\n</ul>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>We reserve the right to exclude from the Marketplace plugins that we feel would be a dis-service to the community.</p></div></div>\n<h2>Announcing new releases</h2>\n<p>When you've got a new release that should be published in the Marketplace, please:</p>\n<ul>\n<li>create a PR on the <a href=\"https://github.com/SonarSource/sonar-update-center-properties\">sonar-update-center-properties repo</a> updating the file for your plugin with the data for your new release</li>\n<li>\n<p>start a new topic on the Community Forum with the following information:</p>\n<ul>\n<li>Subject: [NEW RELEASE] Plugin Name &#x26; version</li>\n<li>\n<p>Body contains:</p>\n<ul>\n<li>Short description: a few words about what's new in this version.</li>\n<li>SonarQube compatibility: unchanged or specific versions.</li>\n<li>Link to SonarCloud project dashboard so that we can check the quality gate status</li>\n<li>Link to your PR</li>\n</ul>\n</li>\n<li>If it is the first release of the plugin, please mention that the plugin should be added to the Plugin Library page. (Otherwise, we're likely to forget!)</li>\n</ul>\n</li>\n</ul>\n<p>Once this thread is created, someone from SonarSource will review your PR and perform the manual steps to make the version available in the Marketplace.</p>\n<h2>How to fill in the <code>sonar-update-center-properties</code> files</h2>\n<h3>Initial creation</h3>\n<h4>Create file</h4>\n<p>In <a href=\"https://github.com/SonarSource/sonar-update-center-properties\">https://github.com/SonarSource/sonar-update-center-properties</a></p>\n<p>File name should correspond to plugin's <code>pluginKey</code> and end with a <code>.properties</code> extension. Plugin key is set in the plugin module's pom (not the top-level pom):</p>\n<ul>\n<li>Explicitly in a <code>sonar.pluginKey</code> property. This is the first choice / preferred</li>\n<li>\n<p>Implicitly by the artifactId:</p>\n<ul>\n<li><code>sonar-{pluginKey}-plugin</code></li>\n<li>when the <code>sonar-x-plugin</code> pattern is not used for the artifactId, the plugin key will be the whole artifact id.</li>\n</ul>\n</li>\n</ul>\n<h4>Populate file</h4>\n<p>Provide the following meta values:</p>\n<ul>\n<li>\n<p><code>category</code> - one of: Coverage, Developer Tools, External Analyzers, Governance, Integration, Languages, Localization, Visualization/Reporting</p>\n</li>\n<li>\n<p><code>description</code></p>\n</li>\n<li>\n<p><code>homepageUrl</code></p>\n</li>\n<li>\n<p><code>archivedVersions</code>=[ leave this blank for now ]</p>\n</li>\n<li>\n<p><code>publicVersions</code>=[versionId] </p>\n</li>\n<li>\n<p><code>defaults.mavenGroupId</code>=[the Maven <code>groupId</code>]</p>\n</li>\n<li>\n<p><code>defaults.mavenArtifactId</code>=[value of the top-level <code>artifactId</code>]</p>\n</li>\n</ul>\n<p>For the initially listed version create the following block:</p>\n<ul>\n<li><code>[versionId].description</code>=[free text. Spaces allowed. No quoting required]</li>\n<li><code>[versionId].sqVersions</code>=[compatibility information. See 'Filling in sqVersions compatibility ranges' below]</li>\n<li><code>[versionId].date</code>=[release date with format: YYYY-MM-DD]</li>\n<li><code>[versionId].changelogUrl</code>=</li>\n<li><code>[versionId].downloadUrl</code>=</li>\n</ul>\n<p>The full list of meta information that can be provided (potentially overriding pom file values) can be found on <a href=\"https://github.com/SonarSource/sonar-update-center/blob/master/sonar-update-center-common/src/main/java/org/sonar/updatecenter/common/Plugin.java#L154\">GitHub</a>.</p>\n<h4>Register file</h4>\n<p>Add file name (without <code>.properties</code> extension) to <code>plugins</code> value in <a href=\"https://github.com/SonarSource/sonar-update-center-properties/blob/master/update-center-source.properties\">https://github.com/SonarSource/sonar-update-center-properties/blob/master/update-center-source.properties</a></p>\n<h3>Updating for new releases</h3>\n<p>Create a new block in the file with this format: </p>\n<ul>\n<li><code>[versionId].description</code>=[free text. Spaces allowed. No quoting required]</li>\n<li><code>[versionId].sqVersions</code>=[compatibility information. See 'Filling in sqVersions compatibility ranges' below]</li>\n<li><code>[versionId].date</code>=[release date with format: YYYY-MM-DD]</li>\n<li><code>[versionId].changelogUrl</code>=</li>\n<li><code>[versionId].downloadUrl</code>=  </li>\n</ul>\n<p>Add <code>[versionId]</code> to the <code>publicVersions</code> list. Move to <code>archivedVersions</code> any versions with identical compatibility. See also 'Filling in sqVersions, publicVersions, and archivedVersions' below</p>\n<h3>Filling in <code>sqVersions</code>, <code>publicVersions</code> and <code>archivedVersions</code></h3>\n<p>The global field <code>publicVersions</code> is a comma-delimited list of plugin versions which should be offered to the user in the Marketplace and listed in the Plugin Version Matrix.</p>\n<ul>\n<li>Compatibility of Public versions cannot overlap</li>\n<li>Multiple versions can be in publicVersions if the versions of SonarQube they are compatible with do not overlap. </li>\n</ul>\n<p>The global field <code>archivedVersions</code> is a comma-delimited list of no-longer-preferred plugin versions. If a user has an archived version of a plugin installed, the Marketplace will offer an upgrade to the relevant public version. Upgrades will not be offered for plugin versions which are not found in <code>archivedVersions</code>.</p>\n<ul>\n<li>Compatibility of Archived versions can overlap</li>\n<li>If new version and previous version are compatible with the same versions of SonarQube, move the previous version into <code>archivedVersions</code>.</li>\n</ul>\n<p>The <code>sqVersions</code> field of a release block gives the versions of SonarQube with which the plugin version is compatible. </p>\n<ul>\n<li>Compatibility can be with a range, with a single version, or with a list of versions / ranges</li>\n<li>Compatibility is generally listed as a range in the form of [start,end]</li>\n<li>The value of start should be a SonarQube version number. </li>\n<li>The value used for end may either be a version number or the special string <code>LATEST</code>.</li>\n<li>Only one version of a plugin can be compatible with <code>LATEST</code>, and it must be the most recent release</li>\n<li>Compatibility of public versions cannot overlap, so if necessary edit the range end for the older version to stop just before the newer version's compatibility starts. </li>\n<li>\n<p>You can use a wildcard at the end of a range, but not at the beginning.</p>\n<ul>\n<li><img src=\"/images/check.svg\"> <code>[6.7,6.7.*]</code></li>\n<li><img src=\"/images/cross.svg\"> <code>[6.7.*,LATEST]</code></li>\n</ul>\n</li>\n<li>Multiple entries in a compatibility list should be comma-delimited, E.G. <code>5.5,[6.7,6.7.*],[7.3,LATEST]</code></li>\n</ul>\n<h2>Suggestions to manage your plugin development</h2>\n<p>A project hosted in a GitHub repository can easily meet the requirements:</p>\n<ul>\n<li>Sources are on Git - and you can easily configure them to be built by Travis CI</li>\n<li>GitHub Issues can be used as a bug tracking system</li>\n<li>GitHub Wiki or <code>README.md</code> can be used to write the documentation</li>\n<li>GitHub Releases can be used to publish your binaries</li>\n</ul>\n<p>You can obviously use the <a href=\"https://community.sonarsource.com/c/plugins\">Community Forum</a> to ask for feedback on your plugin. You may want to post an RFF (Request for Feedback) before a release although it is not required. If you do, please close the thread before final release with a \"feedback period closed\" notice.</p>\n<h2>Plugin deprecation</h2>\n<p>Occasionally, there's a need to deprecate a plugin. Typically for one or more of the following reasons:</p>\n<ul>\n<li>the functionality is obsolete or relies on deprecated platform functionality.</li>\n<li>It's no longer maintained by its authors and is buggy.</li>\n<li>It's no longer compatible with supported versions of the SonarQube platform.</li>\n</ul>\n<p>In such case, the plugin is removed from the Marketplace.</p>\n<h2>FAQ</h2>\n<p><strong>Q.</strong> What should the release candidate announcement look like?<br>\nThis is up to you, but ideally, it will contain a:</p>\n<ul>\n<li>link to download the RC</li>\n<li>link to the version change log </li>\n<li>deadline for feedback</li>\n</ul>\n<p>Also, you should probably mention the contributors to the version if you didn't handle it solo.</p>\n<p><strong>Q.</strong> How long should the feedback period be?<br>\nAgain, that's up to you; it's your plugin. At SonarSource, when we put out a Release Candidate (we don't always &#x26; its optional for you too), we use a minimum 72 hour feedback period (with variations for holidays, weekends, and significant feedback).</p>\n<p><strong>Q.</strong>  Who can give feedback?<br>\nAnyone! In fact, the more feedback the better. That's what makes developing in a community so wonderful. We just ask that when you have feedback, you keep it polite and respectful.</p>\n<p><strong>Q.</strong>  What if I don't get any feedback on my release candidate?<br>\nYou have two choices: agitate for more attention or consider no news to be good news and proceed with your release.</p>\n<p><strong>Q.</strong>  What if I get feedback that should block the release?<br>\nThe normal course of action here is to address the feedback and put out another release candidate. Typically, you would extend the feedback period to give people time to test the new version.</p>\n<p><strong>Q.</strong>  What happens when the feedback period is over?<br>\nIf you didn't get any feedback that you feel should block the release, then send a \"period closed\" notification on the same thread, perform the release, and in a separate thread ask that the new version be added to the Marketplace.</p>\n<p><strong>Q.</strong>  Should the initial release of a plugin be handled any differently than subsequent releases?<br>\nNot necessarily, although it's probably more critical to get feedback on an initial release. So if there's no response within the initial feedback period, you should probably agitate for more attention, instead of assuming that no news is good news. It's up to you, though.</p>\n<p><strong>Q.</strong>  Who performs the release process?<br>\nYou do.</p>\n<p><strong>Q.</strong>  Where should the jars be posted for download?<br>\nUp to you. If you're using GitHub to host your source code, then the easiest thing to do is create a project release and post downloads there.</p>\n<p><strong>Q.</strong>  What should the release notes look like?<br>\nIn the best case, it will be a publicly accessible list of work tickets handled in the version, similar to what you can get from Jira or GitHub Issues. At minimum, it will be an outline of the work done. In either case, it must reflect all significant changes.</p>","fields":{"slug":"/extend/deploying-to-marketplace/"}}},{"node":{"html":"<p>There are two ways to extend coding rules:</p>\n<ul>\n<li>Writing coding rules using Java via a SonarQube plugin</li>\n<li>Adding XPath rules directly through the SonarQube web interface</li>\n</ul>\n<p>If both are available, the Java API will be more fully-featured than what's available for XPath, and is generally preferable.</p>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>Before implementing a new coding rule, you should consider whether it is specific to your own context or might benefit others. If it might benefit others, you can propose it on the <a href=\"https://community.sonarsource.com/\">Community Forum</a>. If there is shared interest, then it might be implemented for you directly in the related language plugin. It means less maintenance for you, and benefit to others.</p></div></div>\n<h2>Custom rule support by language</h2>\n<p>Languages not listed here don't support custom rules</p>\n<table>\n<thead>\n<tr>\n<th> </th>\n<th>XPath 1.0</th>\n<th>Java</th>\n<th>Other</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C#</td>\n<td>-</td>\n<td>-</td>\n<td><img src=\"/images/check.svg\"><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing Issues from Third-Party Roslyn Analyzers (C#, VB.NET)</a></td>\n</tr>\n<tr>\n<td>COBOL</td>\n<td>-</td>\n<td><img src=\"/images/check.svg\"></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Flex</td>\n<td><img src=\"/images/check.svg\"></td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>-</td>\n<td><img src=\"/images/check.svg\"></td>\n<td>-</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>-</td>\n<td><img src=\"/images/check.svg\"></td>\n<td>-</td>\n</tr>\n<tr>\n<td>PHP</td>\n<td>-</td>\n<td><img src=\"/images/check.svg\"></td>\n<td>-</td>\n</tr>\n<tr>\n<td>PL/SQL</td>\n<td><img src=\"/images/check.svg\"></td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>PL/I</td>\n<td><img src=\"/images/check.svg\"></td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>-</td>\n<td><img src=\"/images/check.svg\"></td>\n<td>-</td>\n</tr>\n<tr>\n<td>RPG</td>\n<td>-</td>\n<td><img src=\"/images/check.svg\"></td>\n<td>-</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td>-</td>\n<td>-</td>\n<td><img src=\"/images/check.svg\"><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing Issues from Third-Party Roslyn Analyzers (C#, VB.NET)</a></td>\n</tr>\n<tr>\n<td>XML</td>\n<td><img src=\"/images/check.svg\"></td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h2>Adding coding rules using Java</h2>\n<p>Writing coding rules in Java is a six-step process:</p>\n<ul>\n<li>Create a SonarQube plugin.</li>\n<li>Put a dependency on the API of the language plugin for which you are writing coding rules.</li>\n<li>Create as many custom rules as required.</li>\n<li>Generate the SonarQube plugin (jar file).</li>\n<li>Place this jar file in the SONARQUBE_HOME/extensions/plugins directory.</li>\n<li>Restart SonarQube server.</li>\n</ul>\n<p>See the following pages to see samples and details about how to create coding rules </p>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/cobol/\">for COBOL</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/java/\">for Java</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/javascript/\">for JavaScript</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/php/\">for PHP</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/python/\">for Python</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/rpg/\">for RPG</a></li>\n</ul>\n<h2>Adding coding rules using XPATH</h2>\n<p>SonarQube provides a quick and easy way to add new coding rules directly via the web interface for certain languages using XPath 1.0 expressions. For XML, which is already immediately accessible to XPath, you can simply write your rules and check them using any of the <a href=\"http://codebeautify.org/Xpath-Tester\">freely available tools</a> for examining XPath on XML. If you're writing rules for XML, skip down to the Adding your rule to the server section once you've got your rules written.</p>\n<p>For other languages how to access a variable, for example, in XPath is less obvious, so we've provided tools.</p>\n<h3>Writing an XPath Rule using SSLR Toolkit</h3>\n<p>The rules must be written in XPath (version 1.0) to navigate the language's <a href=\"http://en.wikipedia.org/wiki/Abstract_syntax_tree\">Abstract Syntax Tree</a> (AST). For most languages, an SSLR Toolkit is provided to help you navigate the AST. You need to download the <code>sslr-{language}-toolkit-{version}.jar</code> file corresponding to the version of your language plugin you have on your SonarQube instance.</p>\n<p>Each language's SSLR Toolkit is a standalone application that displays the AST for a piece of code source that you feed into it, allowing you to read the node names and attributes from your code sample and write your XPath expression. Knowing the XPath language is the only prerequisite, and there are a lot of tutorials on XPath online.</p>\n<p>The latest version of SSLR Toolkit can be downloaded from following locations:</p>\n<ul>\n<li><a href=\"https://binaries.sonarsource.com/Distribution/sonar-flex-plugin/\">Flex</a></li>\n<li><a href=\"https://binaries.sonarsource.com/CommercialDistribution/sslr-plsql-toolkit/\">PL/SQL</a></li>\n<li><a href=\"https://binaries.sonarsource.com/CommercialDistribution/sslr-pli-toolkit/\">PL/I</a></li>\n</ul>\n<p>For an SSLR preview, consider the following source code sample:</p>\n<pre><code>function HelloWorld(hour) {\n  if (hour) {\n    this.hour = hour;\n  } else {\n    var date = new Date();\n    this.hour = date.getHours();\n  }\n  this.displayGreeting = function() {\n    if (this.hour >= 22 || this.hour &#x3C;= 5)\n      document.write(\"Good night, World!\");\n    else\n      document.write(\"Hello, World!\");\n  } \n}\n</code></pre>\n<p>While parsing source code, SonarQube builds an Abstract Syntax Tree (AST) for it, and the SSLR Toolkit provided for each language will show you SonarQube's AST for a given piece of code. Here's the AST for our sample:</p>\n<p><img src=\"/images/astSample.png\" alt=\"AST example\"></p>\n<p>The <a href=\"http://en.wikipedia.org/wiki/XPath\">XPath</a> language provides a way to write coding rules by navigating this AST, and the SSLR Toolkit for the language will give you the ability to test your new rules against your sample code.</p>\n<h3>Adding your Rule to the Server</h3>\n<p>Once your new rule is written, you can add it SonarQube:</p>\n<ol>\n<li>Login as an Quality Profile Administrator</li>\n<li>Go to Rules page</li>\n<li>Select the Language for which you want to create the XPath rule</li>\n<li>Tick the Template criterion and select \"Show Templates Only\" </li>\n<li>Look for the XPath rule template</li>\n<li>Click on it to select it, then use the interface controls to create a new instance</li>\n<li>Fill in the form that pops up</li>\n<li>Once you've created your rule, you'll need to add it to a Quality Profile and run analysis to see it in action.</li>\n</ol>\n<h2>Coding rule guidelines</h2>\n<p>These are the guidelines that SonarSource uses internally to specify new rules. Rules in community plugins are not required to adhere to these guidelines. They are provided here only in case they are useful.</p>\n<p>Note that fields \"title\", \"description\" and \"message\" have a different format when the rule type is \"Hotspot\".</p>\n<h3>Guidelines for Bug, Vulnerability, and Code Smell rules</h3>\n<h4>Titles</h4>\n<ul>\n<li>The title of the rule should match the pattern \"X should [ not ] Y\" for most rules. Note that the \"should [ not ]\" pattern is too strong for Finding rules, which are about observations on the code. Finding titles should be neutral, such as \"Track x\".</li>\n<li>\n<p>All other things being equal, the positive form is preferred. E.G.</p>\n<ul>\n<li>\"X should Y\" is preferred to </li>\n<li>\"X should not Z\"</li>\n</ul>\n</li>\n<li>\n<p>Titles should be written in plural form if at all possible. E.G.</p>\n<ul>\n<li><img src=\"/images/check.svg\">Flibbers should gibbet</li>\n<li><img src=\"/images/cross.svg\">A Flibber should gibbet</li>\n</ul>\n</li>\n<li>Any piece of code in the rule title should be double-quoted (and not single-quoted).</li>\n<li>There should be no category/tag prefixed to the rule title, such as \"Accessibility - Image tags should have an alternate text attribute\"</li>\n<li>Titles should be as concise as possible. Somewhere around 70 or 80 characters is an ideal maximum, although this is not always achievable.</li>\n</ul>\n<p>Noncompliant Title Examples:</p>\n<ul>\n<li>File should not have too many lines of code  // Noncompliant; singular form used</li>\n<li>Avoid file with too many lines of code  // Noncompliant; doesn't follow \"x should [not] y\" pattern</li>\n<li>Too many lines of code  // Noncompliant</li>\n<li>Don't use \"System.(out/err)\"  // Noncompliant</li>\n<li>Parameters in an overriding virtual function should either use the same default arguments as the function they override, or not specify any default arguments  // Noncompliant; waaaay too long</li>\n</ul>\n<p>Compliant Solutions:</p>\n<ul>\n<li>Files should not have too many lines of code  </li>\n<li>\"System.(out/err)\" should not be used to log messages</li>\n<li>Overriding virtual functions should not change parameter defaults</li>\n</ul>\n<p>Starting with the subject, such as \"Files\", will ensure that all rules applying to files will be grouped together.</p>\n<h4>Descriptions</h4>\n<p>Rule descriptions should contain the following sections in the listed order:</p>\n<ul>\n<li><strong>Rationale</strong> (unlabeled) - explaining why this rule make sense.\nIf it's not absolutely clear from the rationale what circumstances will cause an issue to be raised, then this section should end with \"This rule raises an issue when [ insert circumstances here ]\".</li>\n<li>\n<p><strong>Noncompliant Code Example</strong> - providing some examples of issues</p>\n<ul>\n<li>Ideally, the examples should depend upon the default values of any parameters the rule has, and these default values should be mentioned before the code block. This is for the benefit of users whose rule parameters are tuned to something other than the default values. E.G.\nWith a parameter of: <code><em>:.</em>log4j.*</code></li>\n<li>The lines in these code samples where issues are expected should be marked with a \"Noncompliant\" comment</li>\n<li>\"Compliant\" comments may be used to help demonstrate the difference between what is and is not allowed by the rule</li>\n<li>It is acceptable to omit this section when demonstrating noncompliance would take too long, e.g. \"Classes should not have too many lines of code\"</li>\n</ul>\n</li>\n<li>\n<p><strong>Compliant Solution</strong> - demonstrating how to fix the previous issues. Good to have but not required for rules that detect bugs. </p>\n<ul>\n<li>There is no need to mark anything \"Compliant\" in the Compliant Solution; everything here is compliant by definition</li>\n<li>It is acceptable to omit this section when there are too many equally viable solutions.</li>\n</ul>\n</li>\n<li><strong>Exceptions</strong> (optional) - listing and explaining some specific use cases where no issues are logged even though some might be expected. Note that this is sometimes incorporated into the rationale, instead.</li>\n<li><strong>See</strong> (optional) - listing references and/or links to external standards like MISRA, SEI, CERT, &#x26;etc.\nDeprecated (optional): listing replacement rules with links</li>\n</ul>\n<p>Code samples for COBOL should be in upper case. </p>\n<p>When displayed in SonarQube, any code or keywords in the description should be enclosed in <code> tags. For descriptions written in JIRA, this means using double curly braces (<code>{{</code> and <code>}}</code>) to enclose such text. They will be translated in the final output.</p>\n<h4>Messages</h4>\n<p>Issue messages should contain the remediation message for bug and quality rules. For potential-bug rules, it should make it explicit that a manual review is required. It should be in the imperative mood (\"Do x\"), and therefore start with a verb.</p>\n<p>An issue message should always end with a period ('.') since it is an actual sentence, unless it ends with a regular expression, in which case the regular expression should be preceded by a colon and should end the message.</p>\n<p>Any piece of code in the the rule message should be double-quoted (and not single-quoted). Moreover, if an issue is triggered because a number was above a threshold value, then both the number and the threshold value should be mentioned in the issue message. </p>\n<p>Sample messages:</p>\n<ul>\n<li>Remove or refactor this useless \"switch\" statement. // Compliant</li>\n<li>This \"switch\" statement is useless and should be refactored or removed. // Noncompliant</li>\n<li>Every \"switch\" statement shall have at least one case-clause. // Noncompliant</li>\n<li>Rename this variable to comply with the regular expression: [a-z]+  // Compliant</li>\n</ul>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>Sample Specification</h2><h3>Generic exceptions should not be thrown</h3><p>Using generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated errors.</p><p><strong>Noncompliant Code Example</strong>  </p><pre><code>With the default regular expression [a-z][a-zA-Z0-9]+:\n\ntry { /* ... */ } catch (Exception e) { LOGGER.info(\"context\"); } // Noncompliant; exception is lost\ntry { /* ... */ } catch (Exception e) { LOGGER.info(e); } // Noncompliant; context is required\ntry { /* ... */ } catch (Exception e) { LOGGER.info(e.getMessage()); } // Noncompliant; exception is lost (only message is preserved)\ntry {\n/* ... */\n} catch (Exception e) { // Noncompliant - exception is lost\nthrow new RuntimeException(\"context\");\n}\n</code></pre><p><strong>Compliant Solution</strong>  </p><pre><code>try { /* ... */ } catch (Exception e) { LOGGER.info(\"context\", e); }\ntry {\n/* ... */\n} catch (Exception e) {\nthrow new RuntimeException(\"context\", e);\n}\n</code></pre><p><strong>Exceptions</strong><br>\nGeneric exceptions in the signatures of overriding methods are ignored.</p><pre><code>@Override\npublic void myMethod() throws Exception {...}\n</code></pre><p><strong>See</strong>  </p><ul>\n<li>MISRA C:2004, 4.5.2</li>\n<li>MITRE, <a href=\"http://cwe.mitre.org/data/definitions/580.html\">CWE-580</a> - clone() Method Without super.clone()</li>\n</ul><p><strong>See also</strong><br>\nS4567 - Rule title here</p></div></div>\n<h3>Guidelines for Hotspot rules</h3>\n<p>See <a href=\"https://jira.sonarsource.com/browse/RSPEC-4721\">RSPEC-4721</a> for an example of Hotspot rule.</p>\n<h4>Titles</h4>\n<ul>\n<li>The title should start with a verb in the present participle form (-ing)</li>\n<li>The title should end with \"is security-sensitive\"</li>\n</ul>\n<p>Noncompliant Title Examples:</p>\n<ul>\n<li>Avoid executing OS commands</li>\n</ul>\n<p>Compliant Solution:</p>\n<ul>\n<li>Executing OS commands is security-sensitive</li>\n<li>Deserializing objects from an untrusted source is security-sensitive</li>\n</ul>\n<h4>Descriptions</h4>\n<p>Rule descriptions should contain the following sections in the listed order:</p>\n<ul>\n<li>\n<p><strong>Rationale</strong> (unlabeled) - explaining why this rule make sense.</p>\n<ul>\n<li>It starts with a copy of the title. The \"is security sensitive\" part can be replaced with \"can lead to ...<DESCRIBE RISK>\" when there is one risk and it is easy to describe in a short manner.</li>\n<li>Next is added the phrase \"For example, it has led in the past to the following vulnerabilities:\".</li>\n<li>Next is a list of CVE links formatted as bullet points. Each CVE should point to their description on the (Example: CVE-2018-12465).</li>\n</ul>\n</li>\n<li>\n<p><strong>Ask Yourself Whether</strong> - listing a set of questions which the developer should ask herself/himself.</p>\n<ul>\n<li>Those questions should check if the context in which the code is makes it dangerous.\nFor example, if some code enables a user to insert custom data the database, one of the questions could be: Is the user input sanitized?</li>\n<li>Some additional questions can be added to remind the developer that there might not be a need for this code.\nFor example, if some code enables a user to send and then execute custom code, the question could be: Does the user really need to execute code dynamically?</li>\n<li>This section ends with \"You are at risk if you answered yes to any of those questions.\" with an asterisk marking the corresponding questions if it is not the case for all of them.</li>\n</ul>\n</li>\n<li>\n<p><strong>Recommended Secure Coding Practices</strong> - describing all the ways to mitigate the risk.</p>\n<ul>\n<li>It usually contains a mix of all the advices provided by OWASP rules.</li>\n<li>Add detailed solutions whenever possible.</li>\n</ul>\n</li>\n<li>\n<p>one of the following:</p>\n<ul>\n<li><strong>Noncompliant Code Example</strong> - same as for Bug, Vulnerability and Code Smell rules.\nsome code can be added to give an example of dangerous context. For example: putting a password in an insecure cookie.</li>\n<li><strong>Sensitive Code Example</strong> - use this instead of \"Noncompilant code example\" when the Hotspot highlights some code which is not dangerous but might be the source of some vulnerability. Example: an opening Socket.</li>\n</ul>\n</li>\n<li><strong>See</strong> (optional) -  same as for Bug, Vulnerability and Code Smell rules.</li>\n<li><strong>Deprecated</strong> (optional) -  listing replacement rules with links.</li>\n</ul>\n<p>Guidelines regarding COBOL, keywords and code are the same as for other rules.</p>\n<h4>Messages</h4>\n<p>Most of the time you can paraphrase the title:</p>\n<ul>\n<li>start the sentence with \"Make sure that\"</li>\n<li>replace \"is security-sensitive\" with \"is safe here\"</li>\n</ul>\n<p>However for some rules it can make sense to change the title. See the examples below: </p>\n<ul>\n<li>\n<p>Title: Executing OS commands is security-sensitive</p>\n<ul>\n<li>Message: make sure that executing this OS command is safe here.</li>\n</ul>\n</li>\n<li>\n<p>Title: Delivering code in production with debug mode activated is security-sensitive</p>\n<ul>\n<li>Message: Make sure this debug mode is deactivated before delivering the code in production.</li>\n</ul>\n</li>\n</ul>\n<h3>Guidelines applicable to all rules</h3>\n<h4>See/References</h4>\n<p>When a reference is made to a standards specification, e.g. MISRA, the following steps must also be taken:</p>\n<ul>\n<li>add any related tags, such as: security, bug, &#x26;etc.</li>\n<li>add the relevant standard-related tag/label such as cwe, misra, etc. (If you forget, the overnight automation will remember for you.) </li>\n<li>update the appropriate field on the References tab with the cited id. (If you forget, the overnight automation will remember for you.) </li>\n</ul>\n<p>If needed, references to other rules should be listed under a \"See also\" heading. If a \"See\" heading exists in the rule, then the \"See also\" title should be at the h3 level. Otherwise, use an h2 for it.</p>\n<p>Other rules should be linked to only if they are related or contradictory (such as a pair of rules about where <code>{</code> should go).</p>\n<p>Why list references to other rules under \"see also\" instead of \"see\"? The see section is used to support the current rule, and one rule cannot be used as justification for another rule. </p>\n<h4>Rule Type</h4>\n<p>Now that you've fleshed out the description, you should have a fairly clear idea of what type of rule this is, but to be explicit:</p>\n<p><strong>Bug</strong> - Something that's wrong or potentially wrong. </p>\n<p><strong>Code Smell</strong> - Something that will confuse a maintainer or cause her to stumble in her reading of the code.</p>\n<p><strong>Vulnerability</strong> - Something that has a high chance of being exploited by an attacker.</p>\n<p><strong>HotSpot</strong> - Something that could result in a vulnerability depending on the context in which this code is present. </p>\n<p>Sometimes the line between Bug and Code Smell is fuzzy. When in doubt, ask yourself: \"Is code that breaks this rule doing what the programmer probably intended?\" If the answer is \"probably not\" then it's a Bug. Everything else is a Code Smell.</p>\n<h4>Default severities</h4>\n<p>When assessing the default severity of a rule, the first thing to do is ask yourself \"what's the worst thing that could happen?\" In answering, you should factor in Murphy's Law without predicting Armageddon.</p>\n<p>Once you have your answer, it's time to assess whether the Impact and Likelihood of the Worst Thing are High or Low. To do that, ask yourself these specific questions:</p>\n<p>Vulnerability</p>\n<ul>\n<li>Impact: Could the exploitation of the vulnerability result in significant damage to your assets or your users? (Yes = High)</li>\n<li>Likelihood: What is the probability a hacker will be able to exploit the issue?</li>\n</ul>\n<p>Bug</p>\n<ul>\n<li>Impact: Could the bug cause the application to crash or corrupt stored data?\n(Languages where an error can cause program termination: COBOL, Python, PL/SQL, RPG.) </li>\n<li>Likelihood: What is the probability the worst will happen?</li>\n</ul>\n<p>Code Smell</p>\n<ul>\n<li>Impact: Could the Code Smell lead a maintainer to introduce a bug?</li>\n<li>Likelihood: What is the probability the worst will happen?</li>\n</ul>\n<p>Once you have your Impact and Likelihood assessments, the rest is easy:</p>\n<table>\n<thead>\n<tr>\n<th> </th>\n<th>impact</th>\n<th>likelihood</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Blocker</td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td>Critical</td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/cross.svg\"></td>\n</tr>\n<tr>\n<td>Major</td>\n<td><img src=\"/images/cross.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td>Minor</td>\n<td><img src=\"/images/cross.svg\"></td>\n<td><img src=\"/images/cross.svg\"></td>\n</tr>\n</tbody>\n</table>\n<h4>Tags</h4>\n<p>Rules can have 0-n tags, although most rules should have at least one. Many of the common-across-languages tags are described in <a href=\"/SonarQubeChineseDoc8.1/user-guide/issues/\">the issues docs</a>.</p>\n<h4>Evaluation of the remediation cost</h4>\n<p>For most rules, the SQALE remediation cost is constant per issue. The goal of this section is to help defining the value of this constant and to unify the way those estimations are done to prevent having some big discrepancies among language plugins. </p>\n<p>First step, classify the effort to do the remediation :</p>\n<ol>\n<li>TRIVIAL\nNo need to understand the logic and no potential impact.\nExamples: remove unused imports, replace tabulations by spaces, remove call to System.out.println() used for debugging purpose, ...</li>\n<li>EASY\nNo need to understand the logic but potential impacts.\nExamples: rename a method, rename a parameter, remove unused private method, ...</li>\n<li>MEDIUM\nUnderstanding the logic of a piece of code is required before doing a little and easy refactoring (1 or 2 lines of code). But understanding the big picture is not required.\nExamples : CURSORs should not be declared inside a loop, EXAMINE statement should not be used, IF should be closed with END-IF, ...</li>\n<li>MAJOR\nUnderstanding the logic of a piece of code is required and it's up to the developer to define the remediation action.\nExamples: Too many nested IF statements, Methods should not have too many parameters, UNION should not be used in SQL SELECT statements, Public java method should have a javadoc, Avoid using deprecated methods, ...</li>\n<li>HIGH\nThe remediation action might lead to locally impact the design of the application.\nExamples: Classes should not have too many responsibilities, Cobol programs should not have too many lines of code, Architectural constraint, ...</li>\n<li>COMPLEX\nThe remediation action might lead to impact the overall design of the application.\nExamples: Avoid cycles between packages, ...</li>\n</ol>\n<p>Then use the following table to get the remediation cost according to the required remediation effort and to the language:</p>\n<table>\n<thead>\n<tr>\n<th> </th>\n<th>Trivial</th>\n<th>Easy</th>\n<th>Medium</th>\n<th>Major</th>\n<th>High</th>\n<th>Complex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ABAP, COBOL, ...</td>\n<td>10min</td>\n<td>20min</td>\n<td>30min</td>\n<td>1h</td>\n<td>3h</td>\n<td>1d</td>\n</tr>\n<tr>\n<td>Other languages</td>\n<td>5min</td>\n<td>10min</td>\n<td>20min</td>\n<td>1h</td>\n<td>3h</td>\n<td>1d</td>\n</tr>\n</tbody>\n</table>\n<p>For rules using either the \"linear\" or \"linear with offset\" remediation functions, the \"Effort To Fix\" field must be fed on each issue and this field is used to compute the remediation cost.  </p>\n<h4>Issue location(s) and highlighting</h4>\n<p>For any given rule, highlighting behavior should be consistent across languages within the bounds of what's relevant for each language.</p>\n<p>When possible, each issue should be raised on the line of code that needs correction, with highlighting limited to the portion of the line to be corrected. For example:</p>\n<ul>\n<li>an issue for a misnamed method should be raised on the line with the method name, and the method name itself should be highlighted.</li>\n</ul>\n<p>When correcting an issue requires action across multiple lines, the issue should be raised on the the lowest block that encloses all relevant lines. For example an issue for:</p>\n<ul>\n<li>method complexity should be raised on the method signature</li>\n<li>method count in a class should be raised on the class declaration</li>\n</ul>\n<p>When an issue could be made clearer by highlighting multiple code segments, such as a method complexity issue, additional issue locations may be highlighted, and additional messages may optionally be logged for those locations. In general, these guidelines should be followed for secondary issue locations:</p>\n<ul>\n<li>highlight the minimum code to show the line's contribution to the issue. </li>\n<li>avoid using an additional message if the secondary location is likely to be on the same issue as the issue itself. For example: the rule \"Parameters should be final\" will raise an issue on the method name, and highlight each non-final parameter. Since all locations are likely to be on the same line, additional messages would only confuse the issue.</li>\n<li>don't write a novel. The message for a secondary location is meant to be a hint to push the user in the right direction. Don't take over the interface with a narrative.</li>\n</ul>","fields":{"slug":"/extend/adding-coding-rules/"}}},{"node":{"html":"<p>This page gives guidelines to I18n for:</p>\n<ul>\n<li>Plugin developers who would like to apply the i18n mechanism in their own plugins, so that these plugins can be available in several languages.</li>\n<li>People who would like to help the community by making the platform available in a new language.</li>\n</ul>\n<h2>Principles</h2>\n<p>Although the basics of the i18n mechanism are the same for every part of the ecosystem, the packaging differs depending on what you are developing:</p>\n<ul>\n<li>\n<p>Translations for SonarQube: making SonarQube available in a new language requires you to develop and publish a new Language Pack plugin. </p>\n<ul>\n<li>By default SonarQube embeds the English Pack.</li>\n<li>All other Language Pack plugins, like the French Pack plugin, are maintained by the community, and are available through Marketplace (category \"Localization\").</li>\n</ul>\n</li>\n<li>\n<p>Translations for the SonarQube Community Plugins: open-source plugins from the SonarQube Community must embed only the bundles for the default locale (en). Translations will be done in the Language Pack plugins.</p>\n</li>\n<li>\n<p>Translations for other Plugins: closed-source/commercial/independent plugins must embed the bundles for the default locale and the translations for every language they want to support.</p>\n</li>\n</ul>\n<h2>Translation Bundles</h2>\n<p>Localized messages are stored in properties files:</p>\n<ul>\n<li>\n<p>These are regular properties files with key/value pairs where you put most translations</p>\n</li>\n<li>\n<p>These files must be stored in the org.sonar.l10n package (usually in the <code>src/main/resources/org/sonar/l10n</code> directory)</p>\n</li>\n<li>\n<p>The names of these files must follow the convention <code>&#x3C;key of the plugin to translate>_&#x3C;language>.properties</code>, for example <code>widgetlabs_fr.properties</code> or <code>core_fr.properties</code> for the core bundle. See <code>sonar-packaging-maven-plugin</code> for details on plugin key derivation.</p>\n</li>\n<li>\n<p>Messages can accept arguments. Such entries would look like:</p>\n<ul>\n<li><code>myplugin.foo=This is a message with 2 params: the first \"{0}\" and the second \"{1}\".</code></li>\n</ul>\n</li>\n<li>\n<p>Messages can accept pluralization. Such entries would look like:</p>\n<ul>\n<li><code>myplugin.foo={x, number} {x, plural, one {thing} other {things}}</code></li>\n<li>We use it for example with a combination of 2 labels: <code>component_navigation.last_analysis_had_warnings=Last analysis had {warnings}</code> and <code>component_navigation.x_warnings={warningsCount, number} {warningsCount, plural, one {warning} other {warnings}}</code>. This renders <code>Last analysis had 1 warning</code> if <code>warningsCount</code> equals 1 and <code>Last analysis had 2 warnings</code> otherwise, in this case 2.</li>\n<li>Learn more about this syntax <a href=\"https://formatjs.io/guides/message-syntax/#plural-format\">here</a>.</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p><strong>UTF-8 encoding</strong><br>\nIn the Java API, properties files are supposed to be encoded in ISO-8859 charset. Without good tooling, it can be quite annoying to write translations for languages that do not fit in this charset.\nThis is why we decided to encode the properties files in UTF-8, and let Maven turn them into ASCII at build time thanks to native2ascii-maven-plugin (check the French plugin pom.xml). This makes the process of writing translations with a standard editor far easier.</p></div></div>\n<h3>How to read localized messages from a plugin extension?</h3>\n<p>The component <code>org.sonar.api.i18n.I18n</code> is available for web server extensions. Scanner extensions cannot load bundles.</p>\n<h2>Writing a Language Pack</h2>\n<p>A Language Pack defines bundles for SonarQube and/or plugins.</p>\n<h3>Creating a Language Pack</h3>\n<p>The easiest way to create a new pack is to copy the <a href=\"https://github.com/SonarQubeCommunity/sonar-l10n-zh\">Chinese Pack</a> and adapt it to your language.</p>\n<h3>Maintaining a Language Pack</h3>\n<p>In the pom file, set the versions of SonarQube and of the plugins you want to translate. When it's time to update your language pack for a new version of SonarQube or a plugin, the easiest way to see what keys are missing is to run:</p>\n<pre><code>mvn test\n</code></pre>\n<p>If the build fails, it means that some keys are missing. Go to <code>target/l10n</code> to check the reports for each bundle. Missing keys are listed under 'Missing translations are:'</p>\n<pre><code>Missing translations are:\ncode_viewer.no_info_displayed_due_to_security=Due to security settings, no information can be displayed.\ncomparison.version.latest=LATEST\n...\n</code></pre>\n<p>Each time you add a new bundle or update an existing one, please create a JIRA ticket on the corresponding L10n component in order to track changes.</p>\n<h2>Localizing a Plugin</h2>\n<p>This section applies if you are developing a closed-source plugin. If your plugin falls in this category, it must embed its own bundles. Bundle must be defined in <code>src/main/resources/org/sonar/l10n/&#x3C;plugin key>_&#x3C;language>.properties</code></p>\n<p>The default bundle is mandatory, and must be English. For example the plugin with key \"mysonarplugin\" must define the following files in order to enable the French translation:</p>\n<ul>\n<li><code>org/sonar/l10n/mysonarplugin.properties</code></li>\n<li><code>org/sonar/l10n/mysonarplugin_fr.properties</code></li>\n</ul>","fields":{"slug":"/extend/i18n/"}}},{"node":{"html":"<h2>Building your plugin</h2>\n<h3>Prerequisites</h3>\n<p>To build a plugin, you need Java 8 and Maven 3.1 (or greater). Gradle can also be used thanks to <a href=\"https://github.com/iwarapter/gradle-sonar-packaging-plugin\">https://github.com/iwarapter/gradle-sonar-packaging-plugin</a>. Note that this Gradle plugin is not officially supported by SonarSource.</p>\n<h3>Create a Maven Project</h3>\n<p>The recommended way to start is by duplicating the plugin example project: <a href=\"https://github.com/SonarSource/sonar-custom-plugin-example\">https://github.com/SonarSource/sonar-custom-plugin-example</a>.</p>\n<p>If you want to start the project from scratch, use the following Maven pom.xml template:</p>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>pom.xml</h2><pre><code>&#x3C;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&#x3C;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  &#x3C;modelVersion>4.0.0&#x3C;/modelVersion>\n  &#x3C;groupId>YOUR_GROUP_ID&#x3C;/groupId>\n  &#x3C;!-- it's recommended to follow the pattern \"sonar-{key}-plugin\", for example \"sonar-myphp-plugin\" -->\n  &#x3C;artifactId>YOUR_ARTIFACT_ID&#x3C;/artifactId>\n  &#x3C;version>YOUR_VERSION&#x3C;/version>\n  \n  &#x3C;!-- this is important for sonar-packaging-maven-plugin -->\n  &#x3C;packaging>sonar-plugin&#x3C;/packaging>\n \n  &#x3C;dependencies>\n    &#x3C;dependency>\n      &#x3C;groupId>org.sonarsource.sonarqube&#x3C;/groupId>\n      &#x3C;artifactId>sonar-plugin-api&#x3C;/artifactId>\n      &#x3C;!-- minimal version of SonarQube to support. -->\n      &#x3C;version>6.7&#x3C;/version>\n      &#x3C;!-- mandatory scope -->\n      &#x3C;scope>provided&#x3C;/scope>\n    &#x3C;/dependency>\n  &#x3C;/dependencies>\n \n  &#x3C;build>\n    &#x3C;plugins>\n      &#x3C;plugin>\n        &#x3C;groupId>org.sonarsource.sonar-packaging-maven-plugin&#x3C;/groupId>\n        &#x3C;artifactId>sonar-packaging-maven-plugin&#x3C;/artifactId>\n        &#x3C;version>1.18.0.372&#x3C;/version>\n        &#x3C;extensions>true&#x3C;/extensions>\n        &#x3C;configuration>\n          &#x3C;!-- the entry-point class that extends org.sonar.api.SonarPlugin -->\n          &#x3C;pluginClass>com.mycompany.sonar.reference.ExamplePlugin&#x3C;/pluginClass>\n           \n          &#x3C;!-- advanced properties can be set here. See paragraph \"Advanced Build Properties\". -->\n        &#x3C;/configuration>\n      &#x3C;/plugin>\n    &#x3C;/plugins>\n  &#x3C;/build>\n&#x3C;/project>\n</code></pre></div></div>\n<h3>Build</h3>\n<p>To build your plugin project, execute this command from the project root directory:<br>\n<code>mvn clean package</code><br>\nThe plugin jar file is generated in the project's <code>target/</code> directory.</p>\n<h3>Deploy</h3>\n<p><strong>\"Cold\" Deploy</strong><br>\nThe standard way to install the plugin for regular users is to copy the JAR artifact, from the <code>target/</code> directory  to the <code>extensions/plugins/</code> directory of your SonarQube installation then start the server. The file <code>logs/web.log</code> will then contain a log line similar to:<br>\n<code>Deploy plugin Example Plugin / 0.1-SNAPSHOT</code><br>\nScanner extensions such as sensors are immediately retrieved and loaded when scanning source code. </p>\n<h3>Debug</h3>\n<p><strong>Debugging web server extensions</strong>  </p>\n<ol>\n<li>Edit conf/sonar.properties and set: <code>sonar.web.javaAdditionalOpts=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000</code></li>\n<li>Install your plugin by copying its JAR file to extensions/plugins</li>\n<li>Start the server. The line <code>Listening for transport dt_socket at address: 5005</code> is logged in  <code>logs/sonar.log</code>.</li>\n<li>Attach your IDE to the debug process (listening on port 8000 in the example)</li>\n</ol>\n<p><strong>Debugging compute engine extensions</strong><br>\nSame procedure as for web server extensions (see previous paragraph), but with the property: <code>sonar.ce.javaAdditionalOpts=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000</code></p>\n<p><strong>Debugging scanner extensions</strong>  </p>\n<pre><code>export SONAR_SCANNER_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000\"\ncd /path/to/project\nsonar-scanner \n</code></pre>\n<p>When using the Scanner for Maven, then simply execute:</p>\n<pre><code>cd /path/to/project\nmvnDebug sonar:sonar\n# debug port is 8000\n</code></pre>\n<h3>Advanced Build Properties</h3>\n<p>Plugin properties are defined in the file <code>META-INF/MANIFEST.MF</code> of the plugin .jar file.</p>\n<p>Most of them are defined through the <code>&#x3C;configuration></code> section of the <a href=\"https://jira.sonarsource.com/browse/PACKMP\">sonar-packaging-maven-plugin</a>. Some are taken from standard pom nodes Effective values are listed at the end of the build log:</p>\n<pre><code>[INFO] --- sonar-packaging-maven-plugin:1.15:sonar-plugin (default-sonar-plugin) @ sonar-widget-lab-plugin ---\n[INFO] -------------------------------------------------------\n[INFO] Plugin definition in Marketplace\n[INFO]     Key: widgetlab\n[INFO]     Name: Widget Lab\n[INFO]     Description: Additional widgets\n[INFO]     Version: 1.9-SNAPSHOT\n[INFO]     Entry-point Class: org.codehaus.sonar.plugins.widgetlab.WidgetLabPlugin\n[INFO]     Required Plugins:\n[INFO]     Use Child-first ClassLoader: false\n[INFO]     Base Plugin:\n[INFO]     Homepage URL: https://redirect.sonarsource.com/plugins/widgetlab.html\n[INFO]     Minimal SonarQube Version: 4.5.1\n[INFO]     Licensing: GNU LGPL 3\n[INFO]     Organization: Shaw Industries\n[INFO]     Organization URL: http://shawfloors.com\n[INFO]     Terms and Conditions:\n[INFO]     Issue Tracker URL: http://jira.codehaus.org/browse/SONARWIDLB\n[INFO]     Build date: 2015-12-15T18:28:54+0100\n[INFO]     Sources URL: https://github.com/SonarCommunity/sonar-widget-lab\n[INFO]     Developers: G. Ann Campbell,Patroklos Papapetrou\n[INFO] -------------------------------------------------------\n[INFO] Building jar: /dev/sonar-widget-lab/target/sonar-widget-lab-plugin-1.9-SNAPSHOT.jar \n</code></pre>\n<p>Supported standard pom node properties:</p>\n<table>\n<thead>\n<tr>\n<th>Maven Property</th>\n<th>Manifest Key</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>version</code></td>\n<td>Plugin-Version</td>\n<td>(required) Plugin version as displayed in page \"Marketplace\". Default: ${project.version}</td>\n</tr>\n<tr>\n<td>-</td>\n<td>Sonar-Version</td>\n<td>(required) Minimal version of supported SonarQube at runtime. For example if value is 5.2, then deploying the plugin on versions 5.1 and lower will fail. Default value is given by the version of sonar-plugin-api dependency. It can be overridden with the Maven property sonarQubeMinVersion (since sonar-packaging-maven-plugin 1.16). That allows in some cases to use new features of recent API and to still be compatible at runtime with older versions of SonarQube. Default: version of dependency sonar-plugin-api</td>\n</tr>\n<tr>\n<td><code>license</code></td>\n<td>Plugin-License</td>\n<td>Plugin license as displayed in page \"Marketplace\". Default <code>${project.licenses}</code></td>\n</tr>\n<tr>\n<td><code>developers</code></td>\n<td>Plugin-Developers</td>\n<td>List of developers displayed in page \"Marketplace\". Default: <code>${project.developers}</code></td>\n</tr>\n</tbody>\n</table>\n<p>Supported <code>&#x3C;configuration></code> properties:</p>\n<table>\n<thead>\n<tr>\n<th>Maven Property</th>\n<th>Manifest Key</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>pluginKey</code></td>\n<td>Plugin-Key</td>\n<td>(required) Contains only letters/digits and is unique among all plugins. Examples: groovy, widgetlab. Constructed from <code>${project.artifactId}.</code> Given an artifactId of: <code>sonar-widget-lab-plugin</code>, your pluginKey will be: <code>widgetlab</code></td>\n</tr>\n<tr>\n<td><code>pluginClass</code></td>\n<td>Plugin-Class</td>\n<td>(required) Name of the entry-point class that extends <code>org.sonar.api.SonarPlugin</code>. Example: <code>org.codehaus.sonar.plugins.widgetlab.WidgetLabPlugin</code></td>\n</tr>\n<tr>\n<td><code>pluginName</code></td>\n<td>Plugin-Name</td>\n<td>(required) Displayed in the page \"Marketplace\". Default: <code>${project.name}</code></td>\n</tr>\n<tr>\n<td><code>pluginDescription</code></td>\n<td>Plugin-Description</td>\n<td>Displayed in the page \"Marketplace\". Default: <code>${project.description}</code></td>\n</tr>\n<tr>\n<td><code>pluginUrl</code></td>\n<td>Plugin-Homepage</td>\n<td>Homepage of website, for example <a href=\"https://github.com/SonarQubeCommunity/sonar-widget-lab\">https://github.com/SonarQubeCommunity/sonar-widget-lab</a> <code>${project.url}</code></td>\n</tr>\n<tr>\n<td><code>pluginIssueTrackerUrl</code></td>\n<td>Plugin-IssueTrackerUrl</td>\n<td>Example: <a href=\"https://github.com/SonarQubeCommunity/sonar-widget-lab/issues\">https://github.com/SonarQubeCommunity/sonar-widget-lab/issues</a>. Default: <code>${project.issueManagement.url}</code></td>\n</tr>\n<tr>\n<td><code>pluginTermsConditionsUrl</code></td>\n<td>Plugin-TermsConditionsUrl</td>\n<td>Users must read this document when installing the plugin from Marketplace. Default: <code>${sonar.pluginTermsConditionsUrl}</code></td>\n</tr>\n<tr>\n<td><code>useChildFirstClassLoader</code></td>\n<td>Plugin-ChildFirstClassLoader</td>\n<td>Each plugin is executed in an isolated classloader, which inherits a shared classloader that contains API and some other classes. By default the loading strategy of classes is parent-first (look up in shared classloader then in plugin classloader). If the property is true, then the strategy is child-first. This property is mainly used when building plugin against API &#x3C; 5.2, as the shared classloader contained many 3rd party libraries (guava 10, commons-lang, ...) false</td>\n</tr>\n<tr>\n<td><code>basePlugin</code></td>\n<td>Plugin-Base</td>\n<td>If specified, then the plugin is executed in the same classloader as basePlugin.</td>\n</tr>\n<tr>\n<td><code>pluginSourcesUrl</code></td>\n<td>Plugin-SourcesUrl</td>\n<td>URL of SCM repository for open-source plugins. Displayed in page \"Marketplace\". Default: <code>${project.scm.url}</code></td>\n</tr>\n<tr>\n<td><code>pluginOrganizationName</code></td>\n<td>Plugin-Organization</td>\n<td>Organization which develops the plugin, displayed in the page \"Marketplace\". Default: <code>${project.organization.name}</code></td>\n</tr>\n<tr>\n<td><code>pluginOrganizationUrl</code></td>\n<td>Plugin-OrganizationUrl</td>\n<td>URL of the organization, displayed in the page \"Marketplace\". Default: <code>${project.organization.url}</code></td>\n</tr>\n<tr>\n<td><code>sonarLintSupported</code></td>\n<td>SonarLint-Supported</td>\n<td>Whether the (language) plugin supports SonarLint or not. Only SonarSource analyzers (SonarJava, SonarJS, ...) and custom rules plugins for SonarSource analyzers should set this to true.</td>\n</tr>\n<tr>\n<td><code>pluginDisplayVersion</code></td>\n<td>Plugin-Display-Version</td>\n<td>The version as displayed in SonarQube administration console. By default it's the raw version, for example \"1.2\", but can be overridden to \"1.2 (build 12345)\" for instance. Supported in sonar-packaging-maven-plugin 1.18.0.372. Default: <code>${project.version}</code></td>\n</tr>\n</tbody>\n</table>\n<p>The Maven sonar-packaging-maven-plugin supports also these properties:</p>\n<table>\n<thead>\n<tr>\n<th>Maven Property</th>\n<th>Manifest Key</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>addMavenDescriptor</code></td>\n<td>Copy pom file inside the directory META-INF of generated JAR file?</td>\n<td>Boolean. Default: <code>${sonar.addMavenDescriptor}</code> / <code>true</code>.</td>\n</tr>\n<tr>\n<td><code>skipDependenciesPackaging</code></td>\n<td>Do not copy Maven dependencies into JAR file.</td>\n<td>Default: <code>${sonar.skipDependenciesPackaging} /</code>false`.</td>\n</tr>\n</tbody>\n</table>\n<p>Other Manifest fields:  </p>\n<ul>\n<li><code>Implementation-Build</code> - Identifier of build or commit, for example the Git sha1 \"94638028f0099de59f769cdca776e506684235d6\". It is displayed for debugging purpose in logs when SonarQube server starts.</li>\n</ul>\n<h2>API basics</h2>\n<h3>Extension points</h3>\n<p>SonarQube provides extension points for its three technical stacks:</p>\n<ul>\n<li>Scanner, which runs the source code analysis</li>\n<li>\n<p>Compute Engine, which consolidates the output of scanners, for example by </p>\n<ul>\n<li>computing 2nd-level measures such as ratings</li>\n<li>aggregating measures (for example number of lines of code of project = sum of lines of code of all files)</li>\n<li>assigning new issues to developers</li>\n<li>persisting everything in data stores</li>\n</ul>\n</li>\n<li>Web application</li>\n</ul>\n<p>Extension points are not designed to add new features but to complete existing features. Technically they are contracts defined by a Java interface or an abstract class annotated with @ExtensionPoint. The exhaustive list of extension points is available in the javadoc.</p>\n<p>The implementations of extension points (named \"extensions\") provided by a plugin must be declared in its entry point class, which implements org.sonar.api.Plugin and which is referenced in pom.xml:</p>\n<p>ExamplePlugin.java</p>\n<pre><code>package org.sonarqube.plugins.example;\nimport org.sonar.api.Plugin;\n \npublic class ExamplePlugin implements Plugin {\n  @Override\n  public void define(Context context) {\n    // implementations of extension points\n    context.addExtensions(FooLanguage.class, ExampleProperties.class);\n  }\n}\n</code></pre>\n<p>pom.xml</p>\n<pre><code>&#x3C;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&#x3C;project>\n  ...\n  &#x3C;build>\n    &#x3C;plugins>\n      &#x3C;plugin>\n        &#x3C;groupId>org.sonarsource.sonar-packaging-maven-plugin&#x3C;/groupId>\n        &#x3C;artifactId>sonar-packaging-maven-plugin&#x3C;/artifactId>\n        &#x3C;extensions>true&#x3C;/extensions>\n        &#x3C;configuration>\n          &#x3C;pluginClass>org.sonarqube.plugins.example.ExamplePlugin&#x3C;/pluginClass>\n        &#x3C;/configuration>\n      &#x3C;/plugin>\n    &#x3C;/plugins>\n  &#x3C;/build>\n&#x3C;/project>\n</code></pre>\n<h3>Lifecycle</h3>\n<p>A plugin extension exists only in its associated technical stacks. A scanner sensor is for example instantiated and executed only in a scanner runtime, but not in the web server nor in Compute Engine. The stack is defined by the annotations <a href=\"http://javadocs.sonarsource.org/latest/apidocs/org/sonar/api/batch/ScannerSide.html\">@ScannerSide</a>, <a href=\"http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/server/ServerSide.html\">@ServerSide</a> (for web server) and <a href=\"http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/ce/ComputeEngineSide.html\">@ComputeEngineSide</a>. </p>\n<p>An extension can call core components or another extension of the same stack. These dependencies are defined by constructor injection:</p>\n<pre><code>@ScannerSide\npublic class Foo {\n  public void call() {}\n}\n \n// Sensor is a scanner extension point \npublic class MySensor implements Sensor {\n  private final Foo foo;\n  private final Languages languages;\n  \n  // Languages is core component which lists all the supported programming languages.\n  public MySensor(Foo foo, Languages languages) {   \n    this.foo = foo;\n    this.languages = languages;\n  }\n  \n  @Override\n  public void execute(SensorContext context) {\n    System.out.println(this.languages.all());\n    foo.call();\n  }\n}\n \n  \npublic class ExamplePlugin implements Plugin {\n  @Override\n  public void define(Context context) {\n    // Languages is a core component. It must not be declared by plugins.\n    context.addExtensions(Foo.class, MySensor.class);\n  }\n}\n</code></pre>\n<p>It is recommended not to call other components in constructors. Indeed, they may not be initialized at that time. Constructors should only be used for dependency injection.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>Compilation does not fail if incorrect dependencies are defined, such as a scanner extension trying to call a web server extension. Still it will fail at runtime when plugin is loaded.</p></div></div>\n<h3>Third-party Libraries</h3>\n<p>Plugins are executed in their own isolated classloaders. That allows the packaging and use of 3rd-party libraries without runtime conflicts with core internal libraries or other plugins. Note that since version 5.2, the SonarQube API does not bring transitive dependencies, except SLF4J. The libraries just have to be declared in the pom.xml with default scope \"compile\":</p>\n<p>pom.xml</p>\n<pre><code>&#x3C;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&#x3C;project>\n  ...\n  &#x3C;dependencies>\n    ...\n    &#x3C;dependency>\n      &#x3C;groupId>commons-codec&#x3C;/groupId>\n      &#x3C;artifactId>commons-codec&#x3C;/artifactId>\n      &#x3C;version>1.10&#x3C;/version>\n    &#x3C;/dependency>\n &#x3C;/dependencies>\n&#x3C;/project>\n</code></pre>\n<p>Technically the libraries are packaged in the directory META-INF/lib of the generated JAR file. An alternative is to shade libraries, for example with maven-shade-plugin. That minimizes the size of the plugin .jar file by copying only the effective used classes.</p>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>The command <code>mvn dependency:tree</code> gives the list of all dependencies, including transitive ones.</p></div></div>\n<h3>Configuration</h3>\n<p>The core component <a href=\"http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/config/Configuration.html\"><code>org.sonar.api.config.Configuration</code></a> provides access to configuration. It deals with default values and decryption of values. It is available in all stacks (scanner, web server, Compute Engine). As recommended earlier, it must not be called from constructors.</p>\n<p>MyExtension.java</p>\n<pre><code>public class MyRules implements RulesDefinition {\n  private final Configuration config;\n  \n  public MyRules(Configuration config) {   \n    this.config = config; \n  }\n  \n  @Override\n  public void define(Context context) {\n    int value = config.getInt(\"sonar.property\").orElse(0);\n  }\n}\n</code></pre>\n<p>Scanner sensors can get config directly from SensorContext, without using constructor injection:</p>\n<p>MySensor.java</p>\n<pre><code>public class MySensor extends Sensor {\n  @Override\n  public void execute(SensorContext context) {\n    int value = context.config().getInt(\"sonar.property\").orElse(0);\n  }\n}\n</code></pre>\n<p>In the scanner stack, properties are checked in the following order, and the first non-blank value is the one that is used:</p>\n<ol>\n<li>System property</li>\n<li>Scanner command-line (-Dsonar.property=foo for instance)</li>\n<li>Scanner tool (<properties> of scanner for Maven for instance) </li>\n<li>Project configuration defined in the web UI </li>\n<li>Global configuration defined in the web UI </li>\n<li>Default value</li>\n</ol>\n<p>Plugins can define their own properties so that they can be configured from web administration console. The extension point org.sonar.api.config.PropertyDefinition must be used :</p>\n<pre><code>public class ExamplePlugin implements Plugin {\n  @Override\n  public void define(Context context) {\n    context.addExtension(\n      PropertyDefinition.builder(\"sonar.my.property\")\n       .name(\"My Property\")\n       .description(\"This is the description displayed in web admin console\")\n       .defaultValue(\"42\")\n       .build()\n    );\n  }\n}\n</code></pre>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>Values of the properties suffixed with <code>.secured</code> are not available to non-authorized users (anonymous and users without project or global administration rights). <code>.secured</code> is needed for passwords, for instance.</p></div></div>\n<p>The annotation <a href=\"http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/Property.html\"><code>@org.sonar.api.Property</code></a> can also be used on an extension to declare a property, but org.sonar.api.config.PropertyDefinition is preferred.</p>\n<pre><code>@Properties(\n    @Property(key=\"sonar.my.property\", name=\"My Property\", defaultValue=\"42\")\n)\npublic class MySensor implements Sensor {\n  // ...\n}\n  \npublic class ExamplePlugin implements Plugin {\n  @Override\n  public void define(Context context) {\n    context.addExtension(MySensor.class);\n  }\n}\n</code></pre>\n<h3>Logging</h3>\n<p>The class <a href=\"http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/utils/log/Logger.html\"><code>org.sonar.api.utils.log.Logger</code></a> is used to log messages to scanner output, web server logs/sonar.log, or Compute Engine logs (available from administration web console). It's convenient for unit testing (see class <a href=\"http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/utils/log/LogTester.html\"><code>LogTester</code></a>).</p>\n<pre><code>import org.sonar.api.utils.log.*;\npublic class MyClass {\n  private static final Logger LOGGER = Loggers.get(MyClass.class);\n \n  public void doSomething() {\n    LOGGER.info(\"foo\");\n  }\n}\n</code></pre>\n<p>Internally <a href=\"http://www.slf4j.org/\">SLF4J</a> is used as a facade of various logging frameworks (log4j, commons-log, logback, java.util.logging). That allows all these frameworks to work at runtime, such as when they are required for a 3rd party library. SLF4J loggers can also be used instead of org.sonar.api.utils.log.Logger. Read the <a href=\"http://www.slf4j.org/manual.html\">SLF4J manual</a> for more details.</p>\n<p>As an exception, plugins must not package logging libraries. Dependencies like SLF4J or log4j must be declared with scope \"provided\".</p>\n<h3>Exposing APIs to Other Plugins</h3>\n<p>The common use case is to write a language plugin that will allow some other plugins to contribute additional rules (see for example how it is done in SonarJava). The main plugin will expose some APIs that will be implemented/used by the \"rule\" plugins.</p>\n<p>Plugins are loaded in isolated classloaders. It means a plugin can't access another plugin's classes. There is an exception for package names following pattern <code>org.sonar.plugins.&#x3C;pluginKey>.api</code>. For example all classes in a plugin with the key myplugin that are located in <code>org.sonar.plugins.myplugin.api</code> are visible to other plugins.</p>\n<h3>Serving Static Resources</h3>\n<p>If you need to serve static resources from your plugin such as images or JavaScript files, place them in a directory under <code>resources</code> named <code>static</code> (<code>myplugin/src/main/resources/static</code>). At runtime they'll be available from <code>http://{server}/static/{pluginKey}/{file}</code>. </p>\n<h2>Versioning and API Deprecation</h2>\n<h3>Versioning Strategy</h3>\n<p>The goal of this versioning strategy is both to:</p>\n<ul>\n<li>Release often, release early in order to get quick feedback from the SonarQube community</li>\n<li>Release stable versions of the SonarQube platform for companies whose main priority is to set up a very stable environment. Even if the price for such stable environments is missing out on the latest, sexy SonarQube features</li>\n<li>Support the API deprecation strategy (see next section)</li>\n</ul>\n<p>The rules are:</p>\n<ul>\n<li>Each ~two months a new version of SonarQube is released. This version should increment the minor digit of the previous version (ex: 4.2 -> 4.3)</li>\n<li>After three (or more) releases, a bug-fix version is released, and becomes the new LTS. The major digit of the subsequent version is incremented to start a new cycle (ex: 5.6 -> 6.0)</li>\n</ul>\n<p>And here is the strategy in action:</p>\n<pre><code>4.4 -> 4.5 -> 5.0 -> 5.1 -> 5.2 -> ... -> 5.5 -> 6.0 -> ...     &#x3C;- New release every ~2 months\n        |                                  |\n      4.5.1 -> 4.5.2 -> ...              5.5.1 -> 5.5.2 -> ...  &#x3C;- New LTS\n</code></pre>\n<h3>API Deprecation Strategy</h3>\n<p>The goal of this deprecation strategy is to make sure that deprecated APIs will be dropped without side-effects at a given planned date. The expected consequence of such strategy is to ease the evolution of the SonarQube API by making such refactoring painless.</p>\n<p>The rules are:</p>\n<ul>\n<li>An API must be deprecated before being dropped</li>\n<li>A deprecated API must be fully supported until its drop (For instance the implementation of a deprecated method can't be replaced by <code>throw new UnsupportedOperationException())</code></li>\n<li>If an API is deprecated in version X.Y, this API will be dropped in version (X+2).0. Example: an API deprecated in 4.1 is supported in 4.2, 4.3, 5.0, 5.1, 5.2, 5.3 and is dropped in version 6.0.</li>\n<li>According to the versioning strategy, that means that an API can remain deprecated before being dropped during 6 to 12 months.</li>\n<li>Any release of a SonarQube plugin must at least depend on the latest LTS version of the SonarQube API</li>\n<li>For each SonarQube plugin there must at least one release on each LTS version of SonarQube, which means at least one release each 6 months.</li>\n<li>No use of deprecated APIs is accepted when releasing a plugin. It raises a critical issue in SonarQube analysis. This issue can't be postponed.</li>\n<li>No deprecated API introduced 2 major versions ago is accepted when releasing SonarQube. It raises a critical issue in SonarQube analysis. This issue can't be postponed.</li>\n<li>\n<p>An API is marked as deprecated with both:</p>\n<ul>\n<li>the annotation @Deprecated</li>\n<li>\n<p>the javadoc tag @deprecated whose message must start with \"in x.y\", for example:</p>\n<pre><code>/**\n</code></pre>\n</li>\n<li>\n<p>@deprecated in 4.2. Replaced by {@link #newMethod()}.\n*/\n@Deprecated\npublic void foo() {</p>\n<pre><code></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2>API Changes</h2>\n<h3>Release 7.9</h3>\n<p>No changes</p>\n<h3>Release 7.8</h3>\n<p><img src=\"/images/check.svg\"> Added</p>\n<ul>\n<li><code>org.sonar.api.web.WebAnalytics</code></li>\n</ul>\n<p><img src=\"/images/exclamation.svg\"> Deprecated</p>\n<ul>\n<li><code>org.sonar.api.i18n.I18</code></li>\n<li><code>org.sonar.api.SonarQubeVersion</code> use <code>org.sonar.api.SonarRuntime</code> instead</li>\n<li><code>org.sonar.api.profiles.XMLProfileParser</code></li>\n<li><code>org.sonar.api.notifications.NotificationChannel</code></li>\n</ul>\n<p><img src=\"/images/cross.svg\"> Removed</p>\n<ul>\n<li>Pico components relying on reflection to have their <code>start</code> or <code>stop</code> method called. Make your component implements <code>org.sonar.api.Startable</code> instead.</li>\n</ul>\n<h3>Release 7.7</h3>\n<p><img src=\"/images/check.svg\"> Added</p>\n<ul>\n<li><code>org.sonar.api.batch.scm.ScmProvider#ignoreCommand</code></li>\n</ul>\n<p><img src=\"/images/exclamation.svg\"> Deprecated</p>\n<ul>\n<li><code>org.sonar.api.batch.fs.InputFile::status</code></li>\n<li><code>org.sonar.api.resources.Qualifiers#BRC</code></li>\n</ul>\n<p><img src=\"/images/cross.svg\"> Removed</p>\n<ul>\n<li>The preview/issues mode of scanner has been removed</li>\n</ul>\n<h3>Release 7.6</h3>\n<p><img src=\"/images/info.svg\"> Changed</p>\n<ul>\n<li><code>PostJob</code> moved to project level IoC container</li>\n<li><code>InputFileFilter</code> moved to project level IoC container</li>\n</ul>\n<p><img src=\"/images/check.svg\"> Added</p>\n<ul>\n<li>New annotation <code>org.sonar.api.scanner.ScannerSide</code> to mark (project level) scanner components</li>\n<li><code>org.sonar.api.batch.fs.InputProject</code> to create issues on project</li>\n<li><code>org.sonar.api.scanner.ProjectSensor</code> to declare Sensors that only run at project level</li>\n</ul>\n<p><img src=\"/images/exclamation.svg\"> Deprecated</p>\n<ul>\n<li><code>org.sonar.scanner.issue.IssueFilter</code> deprecated</li>\n<li><code>org.sonar.api.batch.InstantiationStrategy</code> deprecated</li>\n<li><code>org.sonar.api.batch.ScannerSide</code> deprecated</li>\n<li><code>org.sonar.api.batch.fs.InputModule</code> deprecated</li>\n<li>Concept of global Sensor is deprecated (use <code>ProjectSensor</code> instead)</li>\n</ul>\n<p><img src=\"/images/cross.svg\"> Removed</p>\n<ul>\n<li>Support of scanner tasks was removed</li>\n<li><code>RulesProfile</code> is no longer available for scanner side components (use <code>ActiveRules</code> instead)</li>\n</ul>\n<h3>Release 7.5</h3>\n<p>No changes</p>\n<h3>Release 7.4</h3>\n<p><img src=\"/images/info.svg\"> Changed</p>\n<ul>\n<li>Allow identity provider to not provide login</li>\n</ul>\n<p><img src=\"/images/check.svg\"> Added</p>\n<ul>\n<li>Allow sensors to report adhoc rules metadata</li>\n</ul>\n<p><img src=\"/images/cross.svg\"> Removed</p>\n<ul>\n<li><code>org.sonar.api.rules.RuleFinder</code> removed from scanner side</li>\n<li><code>sonar-channel</code> removed from plugin classloader</li>\n<li>stop support of plugins compiled with API &#x3C; 5.2</li>\n</ul>\n<h3>Release 7.3</h3>\n<p><img src=\"/images/check.svg\"> Added</p>\n<ul>\n<li><code>RulesDefinitions</code> supports HotSpots and security standards</li>\n</ul>\n<p><img src=\"/images/exclamation.svg\"> Deprecated</p>\n<ul>\n<li><code>org.sonar.api.batch.AnalysisMode</code> and <code>org.sonar.api.issue.ProjectIssues</code> since preview mode is already deprecated for a while</li>\n</ul>\n<h3>Release 7.2</h3>\n<p><img src=\"/images/check.svg\"> Added</p>\n<ul>\n<li><code>org.sonar.api.batch.sensor.SensorContext#newExternalIssue</code> to report external issues</li>\n<li><code>org.sonar.api.batch.sensor.SensorContext#newSignificantCode</code> to report part of the source file that should be used for issue tracking</li>\n<li><code>org.sonar.api.scan.issue.filter.FilterableIssue#textRange</code></li>\n</ul>\n<p><img src=\"/images/exclamation.svg\"> Deprecated</p>\n<ul>\n<li>org.sonar.api.scan.issue.filter.FilterableIssue#line</li>\n</ul>\n<h3>Release 7.1</h3>\n<p><img src=\"/images/check.svg\"> Added</p>\n<ul>\n<li><code>org.sonar.api.Plugin.Context#getBootConfiguration</code></li>\n<li><code>org.sonar.api.server.rule.RulesDefinition.NewRule#addDeprecatedRuleKey</code> to support deprecated rule keys</li>\n</ul>\n<h3>Release 7.0</h3>\n<p><img src=\"/images/check.svg\"> Added</p>\n<ul>\n<li><code>org.sonar.api.batch.scm.ScmProvider#relativePathFromScmRoot</code>, <code>org.sonar.api.batch.scm.ScmProvider#branchChangedFiles</code> and <code>org.sonar.api.batch.scm.ScmProvider#revisionId</code> to improve branch and PR support</li>\n</ul>\n<h3>Release 6.7</h3>\n<p>No changes</p>","fields":{"slug":"/extend/developing-plugin/"}}},{"node":{"html":"<h2>概覽</h2>\n<p>The SonarQube Platform is made of 4 components:<br>\n<img src=\"/images/architecture-scanning.png\" alt=\"SonarQube Platform.\"></p>\n<ol>\n<li>\n<p>One SonarQube Server starting 3 main processes:</p>\n<ul>\n<li>Web Server for developers, managers to browse quality snapshots and configure the SonarQube instance</li>\n<li>Search Server based on Elasticsearch to back searches from the UI</li>\n<li>Compute Engine Server in charge of processing code analysis reports and saving them in the SonarQube Database</li>\n</ul>\n</li>\n<li>\n<p>One SonarQube Database to store:</p>\n<ul>\n<li>the configuration of the SonarQube instance (security, plugins settings, etc.)</li>\n<li>the quality snapshots of projects, views, etc.</li>\n</ul>\n</li>\n<li>Multiple SonarQube Plugins installed on the server, possibly including language, SCM, integration, authentication, and governance plugins</li>\n<li>One or more SonarScanners running on your Build / Continuous Integration Servers to analyze projects</li>\n</ol>\n<h2>Integration</h2>\n<p>The following schema shows how SonarQube integrates with other ALM tools and where the various components of SonarQube are used.<br>\n<img src=\"/images/architecture-integrate.png\" alt=\"SonarQube Integration.\"></p>\n<ol>\n<li>Developers code in their IDEs and use <a href=\"https://sonarlint.org\">SonarLint</a> to run local analysis.</li>\n<li>Developers push their code into their favourite SCM : git, SVN, TFVC, ...</li>\n<li>The Continuous Integration Server triggers an automatic build, and the execution of the SonarScanner required to run the SonarQube analysis.</li>\n<li>The analysis report is sent to the SonarQube Server for processing.</li>\n<li>SonarQube Server processes and stores the analysis report results in the SonarQube Database, and displays the results in the UI.</li>\n<li>Developers review, comment, challenge their Issues to manage and reduce their Technical Debt through the SonarQube UI.</li>\n<li>Managers receive Reports from the analysis.\nOps use APIs to automate configuration and extract data from SonarQube.\nOps use JMX to monitor SonarQube Server.</li>\n</ol>\n<h2>About Machines and Locations</h2>\n<ul>\n<li>The SonarQube Platform cannot have more than one SonarQube Server (although the Server can be installed <a href=\"/SonarQubeChineseDoc8.1/setup/install-cluster/\">as a cluster</a>) and one SonarQube Database.</li>\n<li>For optimal performance, each component (server, database, scanners) should be installed on a separate machine, and the server machine(s) should be dedicated.</li>\n<li>SonarScanners scale by adding machines.</li>\n<li>All machines must be time synchronized.</li>\n<li>The SonarQube Server and the SonarQube Database must be located in the same network</li>\n<li>SonarScanners don't need to be on the same network as the SonarQube Server.</li>\n<li>There is <strong>no communication</strong> between <strong>SonarScanners</strong> and the <strong>SonarQube Database</strong>.</li>\n</ul>","fields":{"slug":"/architecture/architecture-integration/"}}},{"node":{"html":"<p>\nThese are the guidelines that SonarSource uses internally when defining executable lines for a language. Community plugins are not required to adhere to these guidelines. They are provided here only in case they are useful.</p>\n<h2>Things that are executable</h2>\n<p>Executable lines data is used to calculate missing test coverage for files that are not included in coverage reports. Ideally, executable line counts will be at or just under what coverage engines would calculate.</p>\n<p>Generally, each line containing a statement should count as an executable line, with the exception that compound statements ({}) are ignored, although their contents are not</p>\n<p>So:</p>\n<pre><code>void doTheThing ()        // +0\n{                         // +0\n  String fname=\"Finn\";    // +1\n  etc();                  // +1\n}                         // +0\n</code></pre>\n<h2>Things that are ignored</h2>\n<h3>!Statement: +0</h3>\n<p>Since some coverage engines mark these things as executable, it's worth stating explicitly that we will ignore them:</p>\n<ul>\n<li>lines containing only punctuation: }, });, ;</li>\n<li>the method signature of a method definition</li>\n</ul>\n<h3>Imports, Declarations: +0</h3>\n<p>Imports, package and namespace statements, declarations, and a few other things demonstrated below are ignored, </p>\n<pre><code>package foo;     // +0\nnamespace bar {  // +0\n  ...\n}\n  \nimport java.util.ArrayList;  // +0\n#include &#x3C;stdio>             // +0\n  \npublic interface FooFace {  // +0\n  void doFoo();             // +0\n}\npublic class Foo1 implements FooFace {  // +0\n  private String name;                  // +0\n}\nstruct PairWithOperator { // +0\n  int x;                  // +0\n  int y;                  // +0\n  \n  bool operator==(PairWithOperator rhs) const {  // +0\n    return x == rhs.x &#x26;&#x26; y == rhs.y;             // +1\n  }\n}\n  \nclass C {\n  C(const C&#x26;) =default;  // +0 (explicit inheritance of parent method)\n}\n \nusing Vec = std::vector&#x3C;T,MyAllocator&#x3C;T>>;       // +0\n  \nstatic {                 // +0\n  ...\n}\n \n01  ERROR-MESSAGE.                                      *> +0\n        02  ERROR-TEXT  PIC X(132) OCCURS 10 TIMES      *> +0\n                                   INDEXED BY ERROR-INDEX.\n77  ERROR-TEXT-LEN      PIC S9(9)  COMP VALUE +132.     *> +0\n</code></pre>\n<h3>Location</h3>\n<p>The presence of executable code on a line makes the entire line executable.</p>\n<p>If a statement is split over multiple lines, the line to be marked executable is the first one with executable code.\nGiven that a for loop is considered executable:</p>\n<pre><code>for         // +1\n  (         // +0\n   int i=0; // +0\n   i &#x3C; 10;  // +0\n   i++      // +0\n  )         // +0\n{           // +0\n}\n</code></pre>\n<p>Regardless of the number of lines across which nested statements are spread, the executable line count should only be incremented by one, since typically the execution of one naturally follows from the other. </p>\n<pre><code>foo(1, bar());  // +1\n  \nfoo(1,          // +1\n    bar());     // +0\n</code></pre>\n<p>We ignore here the possibility that <code>bar()</code> could throw an exception, preventing <code>foo</code> from being executed.</p>\n<h2>Exceptions</h2>\n<h3>Python</h3>\n<p>Based on observations from code on SonarCloud, <code># pragma: no cover</code> exempts a block from coverage</p>\n<p><img src=\"/images/executable-lines-python-exception.png\" alt=\"# pragma: no cover example\"></p>\n<h3>JavaScript</h3>\n<p>It seems to be accepted practice in JavaScript to mark variable declarations executable, so we will too. E.G.</p>\n<pre><code>var a;  // +1\n</code></pre>","fields":{"slug":"/extend/executable-lines/"}}},{"node":{"html":"<p>The steps to cover a new programming language are:</p>\n<ol>\n<li>\n<p>Write the grammar. This is the hardest part.</p>\n</li>\n<li>\n<p>Write a parser (a parser simply parses an input based on your grammar to yield a parse tree).</p>\n</li>\n<li>\n<p>Test your grammar, to ensure it is able to parse real-life language files.</p>\n</li>\n<li>\n<p>Write a few parse tree visitors. Some visitors will compute metrics such as <a href=\"/SonarQubeChineseDoc8.1/extend/executable-lines/\">executable lines</a>, while others will enforce <a href=\"/SonarQubeChineseDoc8.1/extend/adding-coding-rules/\">coding rules</a>. A dozen or so visitors is sufficient for an initial release.</p>\n</li>\n<li>\n<p>Write a scanner Sensor, in a SonarQube plugin, to launch the visitors. </p>\n</li>\n<li>\n<p>Compute</p>\n<ol>\n<li>issues</li>\n<li>raw measures</li>\n<li>code duplications</li>\n<li>syntax highlighting</li>\n<li>symbol table</li>\n<li>coverage information (lines/branches to cover, line/branch hits)</li>\n</ol>\n</li>\n</ol>\n<p>In fulfilling these steps, the <a href=\"https://github.com/SonarSource/sslr\">SonarSource Language Recognizer (SSLR)</a> can be an important resource.</p>","fields":{"slug":"/extend/new-languages/"}}},{"node":{"html":"<p>SonarQube provides web API to access its functionalities from applications. The web services composing the web API are documented within SonarQube, through the URL <a href=\"/SonarQubeChineseDoc8.1/#sonarqube#/web_api\">/web_api</a>, which can also be reached from a link in the page footer. </p>\n<p>Administrative web services are secured and require the user to have specific permissions. In order to be authenticated, the user must provide credentials as described below.</p>\n<h2>User Token</h2>\n<p>This is the recommended way. Benefits are described in the page <a href=\"/SonarQubeChineseDoc8.1/user-guide/user-token/\">User Token</a>. The token is sent via the login field of HTTP basic authentication, without any password.</p>\n<pre><code># note that the colon after the token is required in curl to set an empty password \ncurl -u THIS_IS_MY_TOKEN: https://sonarqube.com/api/user_tokens/search\n</code></pre>\n<h2>HTTP Basic Access</h2>\n<p>Login and password are sent via the standard HTTP Basic fields:</p>\n<pre><code>curl -u MY_LOGIN:MY_PASSWORD https://sonarqube.com/api/user_tokens/search\n</code></pre>\n<p>Users who authenticate in web application through an OAuth provider, for instance GitHub or Bitbucket, don't have credentials and can't use HTTP Basic mode. They must generate and use tokens.</p>","fields":{"slug":"/extend/web-api/"}}},{"node":{"html":"<p><em>Branch analysis is available as part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em></p>\n<h2>How long are branches retained?</h2>\n<p>Branches will be deleted automatically when they are inactive according to your settings at <a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=housekeeping\">Administration > Configuration > General Settings > Housekeeping > Number of days before deleting inactive branches</a> except for branches you have set to be kept when inactive. These branches are kept until you delete them manually at the project level at <strong>Administration > Branches &#x26; Pull Requests</strong>. See the <a href=\"/SonarQubeChineseDoc8.1/branches/overview/\">Branches Analysis</a> for more information on keeping inactive branches.</p>\n<h2>Does my project need to be stored in an SCM like Git or SVN?</h2>\n<p>No, you don't need to be connected to a SCM. However, SCM data still enhances the SonarQube exprerience (including issue auto-assignment and issue backdating), and you will be well prepared to take advantage of <a href=\"/SonarQubeChineseDoc8.1/analysis/pull-request/\">Pull Request Analysis</a>!</p>\n<h2>What if I mark an Issue \"Won't Fix\" or \"False-Positive\" in a branch?</h2>\n<p>It will be replicated as such when creating a Pull Request and merging the Pull Request into the master branch.</p>\n<h2>Can I manually delete a branch?</h2>\n<p>You can delete a branch in the <strong>Branches</strong> tab at <strong>Project Settings > Branches and Pull Requests</strong>.</p>\n<h2>Does the payload of the Webhook include branch information?</h2>\n<p>Yes, an extra node called \"branch\" is added to the payload.</p>\n<h2>When are Webhooks called?</h2>\n<p>When the computation of the background task is done for a given branch.</p>\n<h2>What is the impact on my LOCs consumption vs my license?</h2>\n<p>The LOC of your largest branch are counted toward your license limit. All other branches are ignored.  </p>","fields":{"slug":"/branches/branches-faq/"}}},{"node":{"html":"<p><em>Branch analysis is available as part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em></p>\n<h2>Overview</h2>\n<p>With Branch Analysis, you can ensure that you're maintaining consistent code quality all the way down to the branch level of your projects. </p>\n<h3>Master / Main Branch</h3>\n<p>This is the default branch and typically corresponds to what's being developed for your next release. This is usually known within a development team as \"master\" or \"head\" and is analyzed when no specific branch parameters are provided. It is labeled \"Main Branch\" and defaults to the name \"master\" but can be renamed from the project settings at <strong>Administration > Branches and Pull Requests</strong>. When you are using Community Edition, this is the only branch you see.</p>\n<h3>Settings and Quality Profiles on Branches</h3>\n<p>Branch settings and quality profiles are the same as those set for the master branch, and by design, it's not possible to configure other values. The New Code Period is the only exception to this as it can be set on a branch-by-branch basis. </p>\n<h3>New Code Period</h3>\n<p>You can set a New Code Period for each branch. This is especially helpful if you are likely to develop and release multiple versions from the branch. See the <a href=\"/SonarQubeChineseDoc8.1/project-administration/new-code-period/\">New Code Period</a> documentation for more information on setting a New Code Period.</p>\n<h3>Quality Gate</h3>\n<p>The branch Quality Gate lets you know if your branch is ready to be merged. Each branch has a quality gate that:</p>\n<ul>\n<li>Applies on conditions on New Code and overall code.</li>\n<li>Assigns a status (Passed or Failed).</li>\n</ul>\n<h2>Setting up Branch analysis</h2>\n<p>A branch is created when the <code>sonar.branch.name</code> parameter is passed during analysis.</p>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.branch.name</code></td>\n<td>Name of the branch (visible in the UI)</td>\n</tr>\n</tbody>\n</table>\n<h3>Limiting analysis to relevant branches</h3>\n<p>You need to add a condition to your pipeline script to ensure only relevant branches are analyzed. For example, you wouldn't want to run analysis on feature branches that won't need analysis until they have pull requests . </p>\n<p>In the following example, analysis would be limited to branches named <code>master</code> or <code>release/*</code>.</p>\n<pre><code>if [[ \"$CI_BRANCH_NAME\" == master ]] || [[ \"$CI_BRANCH_NAME\" == release/* ]]; then\n  ./gradlew sonarqube\nfi\n</code></pre>\n<h3>Issue Creation and Synchronization</h3>\n<p>During the first analysis, issues (type, severity, status, assignee, change log, comments) are synchronized with the Main Branch. In each synchronized issue, a comment is added to the change log of the issue on the branch: \"The issue has been copied from branch 'master' to branch yyy\".</p>\n<p>At each subsequent analysis of the branch, any new issue that comes from a pull request automatically inherits the attributes (type, severity, ...) the issue had in the pull request. A comment is added to the change log of the issue on the branch: \"The issue has been merged from 'xxx' into 'yyy'\"</p>\n<h3>Fetching full Git history</h3>\n<p>By default, some CIs don't fetch your full Git history. For example, TravisCI only fetches the last 50 git commits. You must use <code>git fetch --unshallow</code> to get the full history. If you don't, new issues may not be assigned to the correct developer.</p>\n<h2>Managing inactive branches</h2>\n<p>Inactive branches are branches that are no longer being analyzed. You can use Housekeeping to automatically delete branches that are inactive (i.e. old feature branches) or to keep inactive branches that you want to continue maintaining (i.e. release branches). </p>\n<h3>Deleting inactive branches</h3>\n<p>You can set the number of days a branch can be inactive before it's deleted in the global settings at <strong>Administration > General Settings > Housekeeping > Number of days before deleting inactive branches</strong>. Branches that are inactive for the number of days that you set will be automatically deleted.</p>\n<h3>Using patterns to keep inactive branches</h3>\n<p>You can use naming patterns to protect specific branches, such as release branches, from automatic deletion. To do this, add a pattern using Java regular expressions under <strong>Administration > General Settings > Housekeeping > Branches > Branches to keep when inactive</strong> at either the global or project level. When a branch is created with a name that follows one of these patterns, it will be kept indefinitely. </p>\n<p>For example, adding the pattern <code>release/.*</code> would keep any branches named release/6.0, release/7, and so on.</p>\n<p><strong>Note:</strong> Patterns aren't retroactive and won't apply to branches that have already been created. They only apply to branches created after the pattern is set. You can protect an existing branch at the project level. See the following section.</p>\n<h3>Managing inactive branches at a project level</h3>\n<p>You can set a branch to <strong>Keep when inactive</strong> at the project level from from the <strong>Branches</strong> tab at <strong>Administration > Branches and Pull Requests</strong>. Here, you can also turn off protection for a branch so it will be deleted when it's inactive for the number of days that has been specified in the global settings at <strong>Administration > General Settings > Housekeeping > Number of days before deleting inactive branches</strong>. </p>\n<p><strong>Note:</strong> The main branch is always protected from automatic deletion, even if it's inactive. This can't be changed.</p>","fields":{"slug":"/branches/overview/"}}},{"node":{"html":"<p>A Background Task can be:</p>\n<ul>\n<li>the import of an Analysis Report</li>\n<li>the computation of a Portfolio</li>\n<li>the import or export of a project</li>\n</ul>\n<h2>What happens after the scanner is done analyzing?</h2>\n<p>Analysis is not complete until the relevant Background Task has been completed. Even though the SonarScanner's log shows <code>EXECUTION SUCCESS</code>, the analysis results will not be visible in the SonarQube project until the Background Task has been completed. After a SonarScanner has finished analyzing your code, the result of the analysis (Sources, Issues, Metrics) -  the Analysis Report - is sent to SonarQube Server for final processing by the Compute Engine. Analysis Reports are queued and processed serially.</p>\n<p>At the Project level, when there is a pending Analysis Report waiting to be consumed, you have a \"Pending\" notification in the header, next to the date of the most recent completed analysis.</p>\n<p>Global Administrators can view the current queue at <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/background_tasks\">Administration > Projects > Background Tasks</a></strong>. Project administrators can see the tasks for a project at <strong>Administration > Background Tasks</strong>.</p>\n<h2>How do I know when analysis report processing fails?</h2>\n<p>Background tasks usually succeed, but sometimes unusual circumstances cause processing to fail. Examples include:</p>\n<ul>\n<li>running out of memory while processing a report from a very large project</li>\n<li>hitting a clash between the key of an existing module or project and one in the report</li>\n<li>...</li>\n</ul>\n<p>When that happens, the failed status is reflected on the project homepage, but that requires someone to notice it. You can also choose to be notified by email when background tasks fail - either on a project by project basis, or globally on all projects where you have administration rights, in the <strong>Notifications</strong> section of your profile.</p>\n<h2>How do I diagnose a failing background task?</h2>\n<p>For each Analysis Report there is a dropdown menu allowing you to access to the \"Scanner Context\" showing you the configuration of the Scanner at the moment when the code scan has been run.</p>\n<p>If processing failed for the task, an additional option will be available: \"Show Error Details\", to get the technical details why the processing of the Background Task failed.</p>\n<h2>How do I cancel a pending analysis report?</h2>\n<p>Administrators can cancel the processing of a pending task by clicking:</p>\n<ul>\n<li>on the red 'x' available on each line of a <code>Pending</code> task</li>\n<li>on the red \"bulk cancel\" option next to the pending jobs count. This button cancels all pending tasks.</li>\n</ul>\n<p>Once processing has begun on a report, it's too late to cancel it.</p>","fields":{"slug":"/analysis/background-tasks/"}}},{"node":{"html":"<p>Project analysis settings can be configured in multiple places. Here is the hierarchy:</p>\n<ul>\n<li>\n<p>Global properties, defined in the UI, apply to all projects (From the top bar, go to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings\">Administration > Configuration > General Settings</a></strong>)</p>\n</li>\n<li>\n<p>Project properties, defined in the UI, override global property values (At a project level, go to <strong>Administration > General Settings</strong>)</p>\n</li>\n<li>\n<p>Project analysis parameters, defined in a project analysis configuration file or an analyzer configuration file, override the ones defined in the UI</p>\n</li>\n<li>\n<p>Analysis / Command line parameters, defined when launching an analysis (with <code>-D</code> on the command line), override project analysis parameters</p>\n</li>\n</ul>\n<p>Note that only parameters set through the UI are stored in the database.\nFor example, if you override the <code>sonar.exclusions</code> parameter via command line for a specific project, it will not be stored in the database. Subsequent analyses, or analyses in SonarLint with connected mode, would still be executed with the exclusions defined in the UI and therefore stored in the DB.</p>\n<p>Most of the property keys shown in the interface at both global and project levels can also be set as analysis parameters, but the parameters listed below can <em>only</em> be set at analysis time. </p>\n<p>For language-specific parameters related to test coverage and execution, see <a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a>.<br>\nFor language-specific parameters related to external issue reports, see <a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">External Issues</a>.</p>\n<h2>Mandatory Parameters</h2>\n<h3>Server</h3>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.host.url</code></td>\n<td>the server URL</td>\n<td><a href=\"http://localhost:9000\">http://localhost:9000</a></td>\n</tr>\n</tbody>\n</table>\n<h3>Project Configuration</h3>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.projectKey</code></td>\n<td>The project's unique key. Allowed characters are: letters, numbers, <code>-</code>, <code>_</code>, <code>.</code> and <code>:</code>, with at least one non-digit.</td>\n<td>For Maven projects, this defaults to <code>&#x3C;groupId>:&#x3C;artifactId></code></td>\n</tr>\n</tbody>\n</table>\n<h2>Optional Parameters</h2>\n<h3>Project Identity</h3>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.projectName</code></td>\n<td>Name of the project that will be displayed on the web interface.</td>\n<td><code>&#x3C;name></code> for Maven projects, otherwise project key. If not provided and there is already a name in the DB, it won't be overwritten</td>\n</tr>\n<tr>\n<td><code>sonar.projectVersion</code></td>\n<td>The project version.</td>\n<td><code>&#x3C;version></code> for Maven projects, otherwise \"not provided\"</td>\n</tr>\n</tbody>\n</table>\n<h3>Authentication</h3>\n<p>If the \"Anyone\" pseudo-group does not have permission to perform analyses, you'll need to supply the credentials of a user with Execute Analysis permission for the analysis to run under.</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.login</code></td>\n<td>The login or authentication token of a SonarQube user with Execute Analysis permission on the project.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.password</code></td>\n<td>The password that goes with the <code>sonar.login</code> username. This should be left blank if an authentication token is being used.</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Web Services</h3>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.ws.timeout</code></td>\n<td>Maximum time to wait for the response of a Web Service call (in seconds). Modifying this value from the default is useful only when you're experiencing timeouts during analysis while waiting for the server to respond to Web Service calls.</td>\n<td>60</td>\n</tr>\n</tbody>\n</table>\n<h3>Project Configuration</h3>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.projectDescription</code></td>\n<td>The project description.</td>\n<td><code>&#x3C;description></code> for Maven projects</td>\n</tr>\n<tr>\n<td><code>sonar.links.homepage</code></td>\n<td>Project home page.</td>\n<td><code>&#x3C;url></code> for Maven projects</td>\n</tr>\n<tr>\n<td><code>sonar.links.ci</code></td>\n<td>Continuous integration.</td>\n<td><code>&#x3C;ciManagement>&#x3C;url></code> for Maven projects</td>\n</tr>\n<tr>\n<td><code>sonar.links.issue</code></td>\n<td>Issue tracker.</td>\n<td><code>&#x3C;issueManagement>&#x3C;url></code> for Maven projects</td>\n</tr>\n<tr>\n<td><code>sonar.links.scm</code></td>\n<td>Project source repository.</td>\n<td><code>&#x3C;scm>&#x3C;url></code> for Maven projects</td>\n</tr>\n<tr>\n<td><code>sonar.sources</code></td>\n<td>Comma-separated paths to directories containing main source files.</td>\n<td>Read from build system for Maven, Gradle, MSBuild projects. Defaults to project base directory when neither <code>sonar.sources</code> nor <code>sonar.tests</code> is provided.</td>\n</tr>\n<tr>\n<td><code>sonar.tests</code></td>\n<td>Comma-separated paths to directories containing test source files.</td>\n<td>Read from build system for Maven, Gradle, MSBuild projects. Else default to empty.</td>\n</tr>\n<tr>\n<td><code>sonar.sourceEncoding</code></td>\n<td>Encoding of the source files. Ex: <code>UTF-8</code>, <code>MacRoman</code>, <code>Shift_JIS</code>. This property can be replaced by the standard property <code>project.build.sourceEncoding</code> in Maven projects. The list of available encodings depends on your JVM.</td>\n<td>System encoding</td>\n</tr>\n<tr>\n<td><code>sonar.externalIssuesReportPaths</code></td>\n<td>Comma-delimited list of paths to Generic Issue reports.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.projectDate</code></td>\n<td>Assign a date to the analysis. This parameter is only useful when you need to retroactively create the history of a not-analyzed-before project. The format is <code>yyyy-MM-dd</code>, for example: 2010-12-01. Since you cannot perform an analysis dated prior to the most recent one in the database, you must analyze recreate your project history in chronological order, oldest first. <img src=\"/images/exclamation.svg\"> Note: You may need to adjust your housekeeping settings if you wish to create a long-running history.</td>\n<td>Current date</td>\n</tr>\n<tr>\n<td><code>sonar.projectBaseDir</code></td>\n<td>Use this property when you need analysis to take place in a directory other than the one from which it was launched. E.G. analysis begins from <code>jenkins/jobs/myjob/workspace</code> but the files to be analyzed are in <code>ftpdrop/cobol/project1</code>. The path may be relative or absolute. Specify not the the source directory, but some parent of the source directory. The value specified here becomes the new \"analysis directory\", and other paths are then specified as though the analysis were starting from the specified value of <code>sonar.projectBaseDir</code>. Note that the analysis process will need write permissions in this directory; it is where the <code>sonar.working.directory</code> will be created.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.working.directory</code></td>\n<td>Set the working directory for an analysis triggered with the SonarScanner or the SonarScanner for Ant (versions greater than 2.0). This property is not compatible with the SonarScanner for MSBuild. Path must be relative, and unique for each project. <img src=\"/images/exclamation.svg\"> Beware: the specified folder is deleted before each analysis.</td>\n<td><code>.scannerwork</code></td>\n</tr>\n<tr>\n<td><code>sonar.scm.provider</code></td>\n<td>This property can be used to explicitly tell SonarQube which SCM plugin should be used to grab SCM data on the project (in case auto-detection does not work). The value of this property is always lowercase and depends on the plugin (ex. \"tfvc\" for the TFVC plugin). Check the documentation page of each plugin for more.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.scm.forceReloadAll</code></td>\n<td>By default, blame information is only retrieved for changed files. Set this property to <code>true</code> to load blame information for all files. This can be useful is you feel that some SCM data is outdated but SonarQube does not get the latest information from the SCM engine.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.scm.exclusions.disabled</code></td>\n<td>For supported engines, files ignored by the SCM, i.e. files listed in <code>.gitignore</code>, will automatically be ignored by analysis too. Set this property to <code>true</code> to disable that feature.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.scm.revision</code></td>\n<td>Overrides the revision, for instance the Git sha1, displayed in analysis results. By default value is provided by the CI environment or guessed by the checked-out sources.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.buildString</code></td>\n<td>The string passed with this property will be stored with the analysis and available in the results of <code>api/project_analyses/search</code>, thus allowing you to later identify a specific analysis and obtain its ID for use with <code>api/project_analyses/set_baseline</code>.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.analysis.[yourKey]</code></td>\n<td>This property stub allows you to insert custom key/value pairs into the analysis context, which will also be passed forward to <a href=\"/SonarQubeChineseDoc8.1/project-administration/webhooks/\">webhooks</a>.</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Duplications</h3>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.cpd.${language}.minimumtokens</code></td>\n<td>A piece of code is considered duplicated as soon as there are at least 100 duplicated tokens in a row (override with <code>sonar.cpd.${language}.minimumTokens</code>) spread across at least 10 lines of code (override with <code>sonar.cpd.${language}.minimumLines</code>). For Java projects, a piece of code is considered duplicated when there is a series of at least 10 statements in a row, regardless of the number of tokens and lines. This threshold cannot be overridden.</td>\n<td>100</td>\n</tr>\n<tr>\n<td><code>sonar.cpd.${language}.minimumLines</code></td>\n<td>(see above)</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3>Analysis Logging</h3>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.log.level</code></td>\n<td>Control the quantity / level of logs produced during an analysis. <code>DEBUG</code>: Display <code>INFO</code> logs + more details at <code>DEBUG</code> level. Similar to <code>sonar.verbose=true</code>. <code>TRACE</code>: Display <code>DEBUG</code> logs + the timings of all ElasticSearch queries and Web API calls executed by the SonarScanner.</td>\n<td><code>INFO</code></td>\n</tr>\n<tr>\n<td><code>sonar.verbose</code></td>\n<td>Add more detail to both client and server-side analysis logs. Activates <code>DEBUG</code> mode for the scanner, and adds client-side environment variables and system properties to server-side log of analysis report processing. <img src=\"/images/exclamation.svg\">NOTE: There is the potential for this setting to expose sensitive information such as passwords if they are stored as server-side environment variables.</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>sonar.showProfiling</code></td>\n<td>Display logs to see where the analyzer spends time. This parameter generates a file containing these timing infos in <code>&#x3C;workingDir>/profiling/&#x3C;moduleKey>-profiler.xml</code> where <code>&#x3C;workingDir></code> is: <code>.sonar/profiling/</code> when analysis is run with SonarScanner, and <code>target/sonar/profiling/</code> when SonarScanner for Maven is used.</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>sonar.scanner.dumpToFile</code></td>\n<td>Outputs to the specified file the full list of properties passed to the scanner API as a means to debug analysis.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.scanner.metadataFilePath</code></td>\n<td>Set the location where the scanner writes the <code>report-task.txt</code> file containing among other things the <code>ceTaskId</code>.</td>\n<td>value of <code>sonar.working.directory</code></td>\n</tr>\n</tbody>\n</table>\n<h3>Deprecated</h3>\n<div class=\"custom-block alert alert-danger\"><div class=\"custom-block-body\"><p>These parameters are listed for completeness, but are deprecated and should not be used in new analyses.</p></div></div>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.links.scm_dev</code> <strong><img src=\"/images/cross.svg\">Deprecated since SQ 7.1</strong></td>\n<td>Developer connection.</td>\n<td><code>&#x3C;scm>&#x3C;developerConnection></code> for Maven projects</td>\n</tr>\n</tbody>\n</table>","fields":{"slug":"/analysis/analysis-parameters/"}}},{"node":{"html":"<p>This page lists analysis parameters related to test coverage and execution reports. For more other parameters, see <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">Analysis Parameters</a>.</p>\n<p>SonarSource analyzers do not run your tests or generate reports. They only import pre-generated reports. Below you'll find language- and tool-specific analysis parameters for importing coverage and execution reports.</p>\n<p>In the <a href=\"https://community.sonarsource.com/c/announce/guides\">Guides</a> category of the <a href=\"https://community.sonarsource.com/\">SonarSource Community forum</a> you might find instructions on generating these reports.</p>\n<p>Some properties support the following wildcards in paths. The remarks for properties that support wildcards will mention that fact. If the remarks do not say wildcards are supported, then they are not.:</p>\n<table>\n<thead>\n<tr>\n<th>Symbol</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>?</code></td>\n<td>a single character</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>any number of characters</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>any number of directories</td>\n</tr>\n</tbody>\n</table>\n<h2>Test Coverage</h2>\n<p>Unless otherwise specified, these properties require values that are relative to project root.</p>\n<table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Property</th>\n<th>Remarks</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Any</strong></td>\n<td><code>sonar.coverageReportPaths</code></td>\n<td>Path to coverage report in the <a href=\"/SonarQubeChineseDoc8.1/analysis/generic-test/\">Generic Test Data</a> format.</td>\n</tr>\n<tr>\n<td>Apex</td>\n<td><code>sonar.apex.coverage.reportPath</code></td>\n<td>Path to the <code>test-result-codecoverage.json</code> report file generated by the <a href=\"https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_force_apex.htm?search_text=apex%20test#cli_reference_test_run\"><code>apex:test:run</code></a> command of the <a href=\"https://developer.salesforce.com/tools/sfdxcli\">Salesforce CLI</a>. Note, you must have a <a href=\"https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_workspace_setup.htm\">Salesforce DX project</a> set up and linked to your Org</td>\n</tr>\n<tr>\n<td>C / C++ / Objective-C</td>\n<td><code>sonar.cfamily.gcov.reportsPath</code></td>\n<td>Path to the directory containing native <code>*.gcov</code> reports (not the XML reports generated by gcovr)</td>\n</tr>\n<tr>\n<td>C / C++ / Objective-C</td>\n<td><code>sonar.cfamily.llvm-cov.reportPath</code></td>\n<td>Path to a llvm-cov report</td>\n</tr>\n<tr>\n<td>C / C++ / Objective-C</td>\n<td><code>sonar.cfamily.vscoveragexml.reportsPath</code></td>\n<td>Path may be absolute or relative to the solution directory. Path wildcards (see above) are supported. Note that the <code>.coveragexml</code> report format offered by Visual Studio is not supported.</td>\n</tr>\n<tr>\n<td>C / C++ / Objective-C</td>\n<td><code>sonar.cfamily.bullseye.reportPath</code></td>\n<td>Path to the report from Bullseye, version >= 8.9.63 (use <a href=\"http://www.bullseye.com/help/ref-covxml.html\">covxml</a> tool)</td>\n</tr>\n<tr>\n<td>C#</td>\n<td><code>sonar.cs.vscoveragexml.reportsPaths</code></td>\n<td>Path to Visual Studio Code Coverage report. Multiple paths may be comma-delimited, or included via wildcards. See <em>Notes on importing .NET reports</em> below.</td>\n</tr>\n<tr>\n<td>C#</td>\n<td><code>sonar.cs.dotcover.reportsPaths</code></td>\n<td>Path to dotCover coverage report. See <em>Notes on importing .NET reports</em> below.</td>\n</tr>\n<tr>\n<td>C#</td>\n<td><code>sonar.cs.opencover.reportsPaths</code></td>\n<td>Path to OpenCover coverage report. See <em>Notes on importing .NET reports</em> below.</td>\n</tr>\n<tr>\n<td>Flex</td>\n<td><code>sonar.flex.cobertura.reportPaths</code></td>\n<td>Path to the Cobertura XML reports. Multiple paths may be comma-delimited. May be absolute or relative to the project base directory.</td>\n</tr>\n<tr>\n<td>Go</td>\n<td><code>sonar.go.coverage.reportPaths</code></td>\n<td>Comma-delimited list of paths to coverage report files. Path wildcards are supported (see above) since SonarGo 1.1.</td>\n</tr>\n<tr>\n<td>Java / Kotlin / Scala / JVM</td>\n<td><code>sonar.coverage.jacoco.xmlReportPaths</code></td>\n<td>Path to JaCoCo XML coverage reports.</td>\n</tr>\n<tr>\n<td>Java</td>\n<td><code>sonar.jacoco.reportPaths</code><img src=\"/images/cross.svg\"></td>\n<td><strong>Deprecated. Use <code>sonar.coverage.jacoco.xmlReportPaths</code>.</strong> Path to JaCoCo reports in binary format. <strong>Supported only for Java</strong>.</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td><code>sonar.javascript.lcov.reportPaths</code></td>\n<td>Comma-delimited list of paths to LCOV coverage report files. Paths may be absolute or relative to project root.</td>\n</tr>\n<tr>\n<td>PHP</td>\n<td><code>sonar.php.coverage.reportPaths</code></td>\n<td>Comma-delimited list of paths to Clover XML-format coverage report files. Paths may be absolute or relative to project root.</td>\n</tr>\n<tr>\n<td>Python</td>\n<td><code>sonar.python.coverage.reportPaths</code></td>\n<td>Comma-delimited list of paths to coverage reports in the Cobertura XML format. Path wildcards are supported (see above). Leave unset to use the default (<code>coverage-reports/*coverage-*.xml</code>).</td>\n</tr>\n<tr>\n<td>Ruby</td>\n<td><code>sonar.ruby.coverage.reportPaths</code></td>\n<td>Comma-delimited list of paths to SimpleCov <code>.resultset.json</code> report files. Paths may be absolute or relative to project-root.</td>\n</tr>\n<tr>\n<td>Scala</td>\n<td><code>sonar.scala.coverage.reportPaths</code></td>\n<td>Comma-separated list of paths to <code>scoverage.xml</code> report files generaged by Scoverage.</td>\n</tr>\n<tr>\n<td>Swift, Xcode 9.3+</td>\n<td> </td>\n<td>You can use the <a href=\"https://github.com/SonarSource/sonar-scanning-examples/blob/master/swift-coverage/swift-coverage-example/xccov-to-sonarqube-generic.sh\">xccov-to-sonarqube-generic.sh</a> script from the <a href=\"https://github.com/SonarSource/sonar-scanning-examples/tree/master/swift-coverage\">sonar-scanning-examples/swift-coverage</a> project convert output from Xcode 9.3's xccov tool to the <a href=\"/SonarQubeChineseDoc8.1/analysis/generic-test/\">Generic Test Data</a> format.</td>\n</tr>\n<tr>\n<td>Swift, Xcode 7-9.2</td>\n<td><code>sonar.swift.coverage.reportPath</code></td>\n<td>Path to the report generated by <code>llvm-cov show</code>. Path may be absolute or relative to project root.</td>\n</tr>\n<tr>\n<td>TypeScript</td>\n<td><code>sonar.typescript.lcov.reportPaths</code></td>\n<td>Comma-delimited list of paths to LCOV coverage reports. Paths may be absolute or relative to project root.</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td><code>sonar.vbnet.vscoveragexml.reportsPaths</code></td>\n<td>Path to Visual Studio Code Coverage report. Multiple paths may be comma-delimited, or included via wildcards. See <em>Notes on importing .NET reports</em> below.</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td><code>sonar.vbnet.dotcover.reportsPaths</code></td>\n<td>Path to dotCover coverage report. See <em>Notes on importing .NET reports</em> below.</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td><code>sonar.vbnet.opencover.reportsPaths</code></td>\n<td>Path to OpenCover coverage report. See <em>Notes on importing .NET reports</em> below.</td>\n</tr>\n</tbody>\n</table>\n<h2>Test Execution</h2>\n<p>Unless otherwise specified, these properties require values that are relative to project root.</p>\n<table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Property</th>\n<th>Remarks</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>All</strong></td>\n<td><code>sonar.testExecutionReportPaths</code></td>\n<td>Comma-delimited list of paths to execution reports in the <a href=\"/SonarQubeChineseDoc8.1/analysis/generic-test/\">Generic Execution Data</a> format.</td>\n</tr>\n<tr>\n<td>C / C++ / Objective-C</td>\n<td><code>sonar.cfamily.cppunit.reportsPath</code></td>\n<td>Path to the directory holding the <a href=\"http://sourceforge.net/projects/cppunit/\">CPPUnit</a> reports. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.</td>\n</tr>\n<tr>\n<td>C#</td>\n<td><code>sonar.cs.vstest.reportsPaths</code></td>\n<td>Paths to VSTest reports. Multiple paths may be comma-delimited, or included via wildcards. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.</td>\n</tr>\n<tr>\n<td>C#</td>\n<td><code>sonar.cs.nunit.reportsPaths</code></td>\n<td>Paths to NUnit execution reports. Multiple paths may be comma-delimited, or included via wildcards. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.</td>\n</tr>\n<tr>\n<td>C#</td>\n<td><code>sonar.cs.xunit.reportsPaths</code></td>\n<td>Paths to xUnit execution reports. Multiple paths may be comma-delimited, or included via wildcards. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.</td>\n</tr>\n<tr>\n<td>Go</td>\n<td><code>sonar.go.tests.reportPaths</code></td>\n<td>Comma-delimited list of paths to unit test report files. Paths may be absolute or relative to project root.</td>\n</tr>\n<tr>\n<td>Java</td>\n<td><code>sonar.junit.reportPaths</code></td>\n<td>Comma-delimited list of paths to Surefire XML-format reports.</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td> </td>\n<td>You can use <a href=\"https://www.npmjs.com/package/jest-sonar-reporter\">jest-sonar-reporter</a> or<a href=\"https://github.com/tornaia/karma-sonarqube-unit-reporter\">karma-sonarqube-unit-reporter</a> to create reports in the <a href=\"/SonarQubeChineseDoc8.1/analysis/generic-test/\">Generic Execution Data</a> format. Both packages are available on npm.</td>\n</tr>\n<tr>\n<td>PHP</td>\n<td><code>sonar.php.tests.reportPath</code></td>\n<td>Path to the PHPUnit unit test execution report file. Path may be absolute or relative to project root.</td>\n</tr>\n<tr>\n<td>Python</td>\n<td><code>sonar.python.xunit.reportPath</code></td>\n<td>Path to unit test execution report. Leave unset to use the default (<code>xunit-reports/xunit-result-*.xml</code>). Path wildcards (see above) are supported. If any paths in the report are invalid, set <code>sonar.python.xunit.skipDetails=true</code> to collect only project-level details.</td>\n</tr>\n<tr>\n<td>TypeScript</td>\n<td> </td>\n<td>You can use <a href=\"https://www.npmjs.com/package/jest-sonar-reporter\">jest-sonar-reporter</a> or<a href=\"https://github.com/tornaia/karma-sonarqube-unit-reporter\">karma-sonarqube-unit-reporter</a> to create reports in the <a href=\"/SonarQubeChineseDoc8.1/analysis/generic-test/\">Generic Execution Data</a> format. Both packages are available on npm.</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td><code>sonar.vbnet.vstest.reportsPaths</code></td>\n<td>Paths to VSTest execution reports. Multiple paths may be comma-delimited, or included via wildcards. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td><code>sonar.vbnet.nunit.reportsPaths</code></td>\n<td>Paths to NUnit execution reports. Multiple paths may be comma-delimited, or included via wildcards. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td><code>sonar.vbnet.xunit.reportsPaths</code></td>\n<td>Paths to xUnit execution reports. Multiple paths may be comma-delimited, or included via wildcards. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Notes on importing .NET reports</strong><br>\n.NET reports are imported into SonarQube in 4 steps:</p>\n<ol>\n<li>Run the SonarScanner.MSBuild.exe <code>begin</code> command, specifying the absolute path where the reports <em>will be</em> available using the <code>/d:propertyKey=\"path\"</code> syntax (\"propertyKey\" depends on the tool)</li>\n<li>Build your project using MSBuild</li>\n<li>Run your test tool, instructing it to produce a report at the same location specified earlier to the MSBuild SonarQube Runner</li>\n<li>Run the SonarScanner.MSBuild.exe <code>end</code> command</li>\n</ol>","fields":{"slug":"/analysis/coverage/"}}},{"node":{"html":"<p>SonarQube supports a generic import format for raising \"external\" issues in code. It is intended to allow you to import the issues from your favorite linter even if no plugin exists for it.</p>\n<p>External issues suffer from two important limitations:</p>\n<ul>\n<li>they cannot be managed within SonarQube; for instance, there is no ability to mark them False Positive.</li>\n<li>the activation of the rules that raise these issues cannot be managed within SonarQube. In fact, external rules are not visible in the Rules page or reflected in any Quality Profile.</li>\n</ul>\n<p>External issues and the rules that raise them must be managed in the configuration of your linter. </p>\n<h2>Import</h2>\n<p>The analysis parameter <code>sonar.externalIssuesReportPaths</code> accepts a comma-delimited list of paths to reports.</p>\n<p>Each report must contain, at top-level, an array of <code>Issue</code> objects named <code>issues</code>.</p>\n<h4>Issue fields:</h4>\n<ul>\n<li><code>engineId</code> - string</li>\n<li><code>ruleId</code> - string</li>\n<li><code>primaryLocation</code> - Location object </li>\n<li><code>type</code> - string. One of BUG, VULNERABILITY, CODE_SMELL</li>\n<li><code>severity</code> - string. One of BLOCKER, CRITICAL, MAJOR, MINOR, INFO</li>\n<li><code>effortMinutes</code> - integer, optional. Defaults to 0</li>\n<li><code>secondaryLocations</code> - array of Location objects, optional</li>\n</ul>\n<h4>Location fields:</h4>\n<ul>\n<li><code>message</code> - string</li>\n<li><code>filePath</code> - string</li>\n<li><code>textRange</code> - TextRange object, optional for secondary locations only</li>\n</ul>\n<h4>TextRange fields:</h4>\n<ul>\n<li><code>startLine</code> - integer. 1-indexed</li>\n<li><code>endLine</code> - integer, optional. 1-indexed</li>\n<li><code>startColumn</code> - integer, optional. 0-indexed</li>\n<li><code>endColumn</code> - integer, optional. 0-indexed</li>\n</ul>\n<h2>Example</h2>\n<p>Here is an example of the expected format:</p>\n<pre><code>{ \"issues\": [\n    {\n      \"engineId\": \"test\",\n      \"ruleId\": \"rule1\",\n      \"severity\":\"BLOCKER\",\n      \"type\":\"CODE_SMELL\",\n      \"primaryLocation\": {\n        \"message\": \"fully-fleshed issue\",\n        \"filePath\": \"sources/A.java\",\n        \"textRange\": {\n          \"startLine\": 30,\n          \"endLine\": 30,\n          \"startColumn\": 9,\n          \"endColumn\": 14\n        }\n      },\n      \"effortMinutes\": 90,\n      \"secondaryLocations\": [\n        {\n          \"message\": \"cross-file 2ndary location\",\n          \"filePath\": \"sources/B.java\",\n          \"textRange\": {\n            \"startLine\": 10,\n            \"endLine\": 10,\n            \"startColumn\": 6,\n            \"endColumn\": 38\n          }\n        }\n      ]\n    },\n    {\n      \"engineId\": \"test\",\n      \"ruleId\": \"rule2\",\n      \"severity\": \"INFO\",\n      \"type\": \"BUG\",\n      \"primaryLocation\": {\n        \"message\": \"minimal issue raised at file level\",\n        \"filePath\": \"sources/Measure.java\"\n      }\n    }\n]}\n</code></pre>","fields":{"slug":"/analysis/generic-issue/"}}},{"node":{"html":"<p>This page lists analysis parameters related to the import of issues raised by external, third-party analyzers. For more other parameters, see <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">Analysis Parameters</a>.</p>\n<p>SonarSource analyzers do not run your external analyzers or generate reports. They only import pre-generated reports. Below you'll find language- and tool-specific analysis parameters for importing reports generated by external analyzers.</p>\n<p>In the <a href=\"https://community.sonarsource.com/c/announce/guides\">Guides</a> category of the <a href=\"https://community.sonarsource.com/\">SonarSource Community forum</a> you might find instructions on generating these reports.</p>\n<p>Some properties support the following wildcards in paths. The remarks for properties that support wildcards will mention that fact. If the remarks do not say wildcards are supported, then they are not.:</p>\n<table>\n<thead>\n<tr>\n<th>Symbol</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>?</code></td>\n<td>a single character</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>any number of characters</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>any number of directories</td>\n</tr>\n</tbody>\n</table>\n<p>Unless otherwise specified, the following properties accept both absolute paths and paths relative to project root.</p>\n<table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Property</th>\n<th>Remarks</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Apex</td>\n<td><code>sonar.apex.pmd.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"https://pmd.github.io/pmd-5.5.7/pmd-apex/rules/index.html\">PMD Apex</a> <a href=\"https://pmd.github.io/latest/pmd_userdocs_installation.html#running-pmd-via-command-line\">XML reports</a></td>\n</tr>\n<tr>\n<td>CSS</td>\n<td><code>sonar.css.stylelint.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"https://stylelint.io/\">StyleLint.io</a> reports</td>\n</tr>\n<tr>\n<td>Go</td>\n<td><code>sonar.go.govet.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"https://golang.org/cmd/vet/\">GoVet</a> reports</td>\n</tr>\n<tr>\n<td>Go</td>\n<td><code>sonar.go.golint.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"https://github.com/golang/lint\">GoLint</a> reports</td>\n</tr>\n<tr>\n<td>Go</td>\n<td><code>sonar.go.gometalinter.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"https://github.com/alecthomas/gometalinter\">GoMetaLinter</a> reports</td>\n</tr>\n<tr>\n<td>Go</td>\n<td><code>sonar.go.golangci-lint.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"https://github.com/golangci/golangci-lint\">golangci-lint</a> reports in checkstyle format (use <code>--out-format checkstyle</code> golangci-lint option)</td>\n</tr>\n<tr>\n<td>Java</td>\n<td><code>sonar.java.spotbugs.reportPaths</code></td>\n<td>Comma-delimited list of paths to reports from <a href=\"https://spotbugs.github.io/\">SpotBugs</a>, FindSecBugs, or FindBugs</td>\n</tr>\n<tr>\n<td>Java</td>\n<td><code>sonar.java.pmd.reportPaths</code></td>\n<td>Comma-delimited list of paths to reports from <a href=\"http://maven.apache.org/plugins/maven-pmd-plugin/usage.html\">PMD</a></td>\n</tr>\n<tr>\n<td>Java</td>\n<td><code>sonar.java.checkstyle.reportPaths</code></td>\n<td>Comma-delimited list of paths to reports from <a href=\"http://maven.apache.org/plugins/maven-checkstyle-plugin/checkstyle-mojo\">Checkstyle</a></td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td><code>sonar.eslint.reportPaths</code></td>\n<td>Comma-delimited list of paths to JSON <a href=\"https://eslint.org/\">ESLint</a> reports (use <code>-f json</code> ESLint option)</td>\n</tr>\n<tr>\n<td>Kotlin</td>\n<td><code>sonar.androidLint.reportPaths</code></td>\n<td>Comma-delimited list of paths to AndroidLint reports</td>\n</tr>\n<tr>\n<td>Kotlin</td>\n<td><code>sonar.kotlin.detekt.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"https://github.com/arturbosch/detekt\">Detekt</a> reports</td>\n</tr>\n<tr>\n<td>Python</td>\n<td><code>sonar.python.pylint.reportPath</code></td>\n<td>Path to a <a href=\"http://www.pylint.org/\">Pylint</a> report. Wildcards are supported</td>\n</tr>\n<tr>\n<td>Python</td>\n<td><img src=\"/images/cross.svg\"> <strong>Deprecated</strong> <code>sonar.python.pylint_config</code> <code>sonar.python.pylint</code></td>\n<td>By default SonarPython will execute the pylint command for you if you haven't specified the path to a PyLint report. Use <code>sonar.python.pylint</code> to use a pylint executable in a non-default location. The property <strong>must</strong> be set on windows (even for the default location), using either escaped backslashes, or single forward slashes (e.g. <code>C:\\\\Python26\\\\Scripts\\\\pylint.bat</code>, <code>C:/Python26/Scripts/pylint.bat</code>). Use <code>sonar.python.pylint_config</code> to specify the relative or absolute path to a non-default pylint configuration file.</td>\n</tr>\n<tr>\n<td>Python</td>\n<td><code>sonar.python.bandit.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"https://github.com/PyCQA/bandit/blob/master/README.rst\">Bandit</a> reports</td>\n</tr>\n<tr>\n<td>Ruby</td>\n<td><code>sonar.ruby.rubocop.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"https://github.com/rubocop-hq/rubocop\">Rubocop</a> reports</td>\n</tr>\n<tr>\n<td>Scala</td>\n<td><code>sonar.scala.scalastyle.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"http://www.scalastyle.org/\">Scalastyle</a> reports</td>\n</tr>\n<tr>\n<td>Scala</td>\n<td><code>sonar.scala.scapegoat.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"https://github.com/sksamuel/scapegoat\">Scapegoat</a> reports in the <strong>Scalastyle format</strong></td>\n</tr>\n<tr>\n<td>Swift</td>\n<td><code>sonar.swift.swiftLint.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"https://github.com/realm/SwiftLint\">SwiftLint</a> reports in JSON format</td>\n</tr>\n<tr>\n<td>TypeScript</td>\n<td><code>sonar.typescript.tslint.reportPaths</code></td>\n<td>Comma-delimited list of paths to <a href=\"https://palantir.github.io/tslint/\">TSLint</a> reports in JSON format (use <code>-t json</code> TSLint option)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Notes on external .NET issues</strong><br>\nIssues from third-party Roslyn analyzers (including Roslyn analyzers provided by Microsoft) are included in the MSBuild output and imported by default into SonarQube so no properties exist to enable that behavior. Instead, properties are available to adjust the import and to <em>stop</em> importing those issues.</p>\n<p>Note that Roslyn issues with an <em>error</em> severity automatically fail the build, and it is not recommended to run the Scanner for MSBuild's end step if the MSBuild step fails for any reason because it will result in an essentially empty analysis, which will close all outstanding issues in the project.</p>\n<table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Property</th>\n<th>Remarks</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C#</td>\n<td><code>sonar.cs.roslyn.ignoreIssues</code></td>\n<td>Set to <code>true</code> to disable import of external issues. Defaults to <code>false</code>.</td>\n</tr>\n<tr>\n<td>C#</td>\n<td><code>sonar.cs.roslyn.bugCategories</code> <code>sonar.cs.roslyn.vulnerabilityCategories</code> <code>sonar.cs.roslyn.codeSmellCategories</code></td>\n<td>Comma-delimited list of categories whose issues should be classified as Bugs, Vulnerabilities, or Code Smells.</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td><code>sonar.vbnet.roslyn.ignoreIssues</code></td>\n<td>Set to <code>true</code> to disable import of external issues. Defaults to <code>false</code>.</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td><code>sonar.vbnet.roslyn.bugCategories</code> <code>sonar.vbnet.roslyn.vulnerabilityCategories</code> <code>sonar.vbnet.roslyn.codeSmellCategories</code></td>\n<td>Comma-delimited list of categories whose issues should be classified as Bugs, Vulnerabilities, or Code Smells.</td>\n</tr>\n</tbody>\n</table>","fields":{"slug":"/analysis/external-issues/"}}},{"node":{"html":"<p>Once the SonarQube platform has been installed, you're ready to install a scanner and begin creating projects. To do that, you must install and configure the scanner that is most appropriate for your needs. Do you build with:</p>\n<ul>\n<li>Gradle - <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-gradle/\">SonarScanner for Gradle</a></li>\n<li>MSBuild - <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-msbuild/\">SonarScanner for MSBuild</a></li>\n<li>Maven - use the <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-maven/\">SonarScanner for Maven</a></li>\n<li>Jenkins - <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-jenkins/\">SonarScanner for Jenkins</a></li>\n<li>Azure DevOps - <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-azure-devops/\">SonarQube Extension for Azure DevOps</a></li>\n<li>Ant - <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-ant/\">SonarScanner for Ant</a></li>\n<li>anything else (CLI) - <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner/\">SonarScanner</a></li>\n</ul>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>SonarQube integrations are supported for popular ALMs: GitHub Enterprise and GitHub.com, BitBucket Server, and Azure Devops Server. </p></div></div>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>We do not recommend running an antivirus scanner on the machine where a SonarQube analysis runs, it could result in unpredictable behavior.</p></div></div>\n<p>A project is created in SonarQube automatically on its first analysis. However, if you need to set some configuration on your project before its first analysis, you have the option of provisioning it via Administration options or the <strong>+</strong> menu item, which is visible to users with project creation rights.</p>\n<h2>What does analysis produce?</h2>\n<p>SonarQube can perform analysis on 20+ different languages. The outcome of this analysis will be quality measures and issues (instances where coding rules were broken). However, what gets analyzed will vary depending on the language:</p>\n<ul>\n<li>On all languages, \"blame\" data will automatically be imported from supported SCM providers. <a href=\"/SonarQubeChineseDoc8.1/analysis/scm-integration/\">Git and SVN are supported automatically</a>. Other providers require additional plugins.</li>\n<li>On all languages, a static analysis of source code is performed (Java files, COBOL programs, etc.)</li>\n<li>A static analysis of compiled code can be performed for certain languages (.class files in Java, .dll files in C#, etc.)</li>\n</ul>\n<h2>Will all files be analyzed?</h2>\n<p>By default, only files that are recognized by a language analyzer are loaded into the project during analysis. </p>\n<p>For example if your SonarQube instance had only SonarJava SonarJS on board, all .java and .js files would be loaded, but .xml files would be ignored.</p>\n<h2>What about branches and pull requests?</h2>\n<p><em>Developer Edition</em> adds the ability to analyze your project's <a href=\"/SonarQubeChineseDoc8.1/branches/overview/\">branches</a> and <a href=\"/SonarQubeChineseDoc8.1/analysis/pull-request/\">pull requests</a> as well as the ability to automatically decorate pull requests in some ALM interfaces. </p>\n<h2>What happens during analysis?</h2>\n<p>During analysis, data is requested from the server, the files provided to the analysis are analyzed, and the resulting data is sent back to the server at the end in the form of a report, which is then analyzed asynchronously server-side.</p>\n<p>Analysis reports are queued, and processed sequentially, so it is quite possible that for a brief period after your analysis log shows completion, the updated values are not visible in your SonarQube project. However, you will be able to tell what's going on because an icon will be added on the project homepage to the right of the project name. Mouse over it for more detail (and links if you're logged in with the proper permissions).</p>\n<p><img src=\"/images/backgroundTaskProcessingInProgress.jpeg\" alt=\"background task processing in progress.\"></p>\n<p>The icon goes away once processing is complete, but if analysis report processing fails for some reason, the icon changes:</p>\n<p><img src=\"/images/backgroundTaskProcessingFailedIcon.jpeg\" alt=\"background task processing failed.\"></p>\n<h2>FAQ</h2>\n<p><strong>Q.</strong> Analysis errors out with <code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code>. What do I do?<br>\n<strong>A.</strong> This means your project is too large or too intricate for the scanner to analyze with the default memory allocation. To fix this you'll want to allocate a larger heap (using <code>-Xmx[numeric value here]</code>) to the process running the analysis. Some CI engines may give you an input to specify the necessary values, for instance if you're using a Maven Build Step in a Jenkins job to run analysis. Otherwise, use Java Options to set a higher value. Note that details of setting Java Options are omitted here because they vary depending on the environment.</p>","fields":{"slug":"/analysis/overview/"}}},{"node":{"html":"<p>Out of the box, SonarQube supports generic formats for test coverage and test execution import. If your coverage engines' native output formats aren't supported by your language plugins, simply covert them to these formats.</p>\n<h2>Generic Coverage</h2>\n<p>Report paths should be passed in a comma-delimited list to:</p>\n<ul>\n<li><code>sonar.coverageReportPaths</code></li>\n</ul>\n<p>The supported format is described by the <code>sonar-generic-coverage.xsd</code>:</p>\n<pre><code>&#x3C;xs:schema>\n  &#x3C;xs:element name=\"coverage\">\n    &#x3C;xs:complexType>\n      &#x3C;xs:sequence>\n        &#x3C;xs:element name=\"file\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n          &#x3C;xs:complexType>\n            &#x3C;xs:sequence>\n              &#x3C;xs:element name=\"lineToCover\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n                &#x3C;xs:complexType>\n                  &#x3C;xs:attribute name=\"lineNumber\" type=\"xs:positiveInteger\" use=\"required\"/>\n                  &#x3C;xs:attribute name=\"covered\" type=\"xs:boolean\" use=\"required\"/>\n                  &#x3C;xs:attribute name=\"branchesToCover\" type=\"xs:nonNegativeInteger\"/>\n                  &#x3C;xs:attribute name=\"coveredBranches\" type=\"xs:nonNegativeInteger\"/>\n                &#x3C;/xs:complexType>\n              &#x3C;/xs:element>\n            &#x3C;/xs:sequence>\n          &#x3C;xs:attribute name=\"path\" type=\"xs:string\" use=\"required\"/>\n          &#x3C;/xs:complexType>\n        &#x3C;/xs:element>\n      &#x3C;/xs:sequence>\n      &#x3C;xs:attribute name=\"version\" type=\"xs:positiveInteger\" use=\"required\"/>\n    &#x3C;/xs:complexType>\n  &#x3C;/xs:element>\n&#x3C;/xs:schema>\n</code></pre>\n<p>and looks like this:</p>\n<pre><code>&#x3C;coverage version=\"1\">\n  &#x3C;file path=\"xources/hello/NoConditions.xoo\">\n    &#x3C;lineToCover lineNumber=\"6\" covered=\"true\"/>\n    &#x3C;lineToCover lineNumber=\"7\" covered=\"false\"/>\n  &#x3C;/file>\n  &#x3C;file path=\"xources/hello/WithConditions.xoo\">\n    &#x3C;lineToCover lineNumber=\"3\" covered=\"true\" branchesToCover=\"2\" coveredBranches=\"1\"/>\n  &#x3C;/file>\n&#x3C;/coverage>\n</code></pre>\n<p>The root node should be named <code>coverage</code>. Its version attribute should be set to <code>1</code>.</p>\n<p>Insert a <code>file</code> element for each file which can be covered by tests. Its <code>path</code> attribute can be either absolute or relative to the root of the module.\nInside a <code>file</code> element, insert a <code>lineToCover</code> for each line which can be covered by unit tests. It can have the following attributes:</p>\n<ul>\n<li><code>lineNumber</code> (mandatory)</li>\n<li><code>covered</code> (mandatory): boolean value indicating whether tests actually hit that line</li>\n<li><code>branchesToCover</code> (optional): number of branches which can be covered</li>\n<li><code>coveredBranches</code> (optional): number of branches which are actually covered by tests</li>\n</ul>\n<h2>Generic Execution</h2>\n<p>Report paths should be passed in a comma-delimited list to:</p>\n<ul>\n<li><code>sonar.testExecutionReportPaths</code></li>\n</ul>\n<p>The supported format looks like this:</p>\n<pre><code>&#x3C;testExecutions version=\"1\">\n  &#x3C;file path=\"testx/ClassOneTest.xoo\">\n    &#x3C;testCase name=\"test1\" duration=\"5\"/>\n    &#x3C;testCase name=\"test2\" duration=\"500\">\n      &#x3C;skipped message=\"short message\">other&#x3C;/skipped>\n    &#x3C;/testCase>\n    &#x3C;testCase name=\"test3\" duration=\"100\">\n      &#x3C;failure message=\"short\">stacktrace&#x3C;/failure>\n    &#x3C;/testCase>\n    &#x3C;testCase name=\"test4\" duration=\"500\">\n      &#x3C;error message=\"short\">stacktrace&#x3C;/error>\n    &#x3C;/testCase>\n  &#x3C;/file>\n&#x3C;/testExecutions>\n</code></pre>\n<p>The root node should be named <code>testExecutions</code>. Its version attribute should be set to <code>1</code>.</p>\n<p>Insert a <code>file</code> element for each test file. Its <code>path</code> attribute can be either absolute or relative to the root of the module.</p>\n<p><strong>Note</strong> unlike for coverage reports, the files present in the report must be test file names, not source code files covered by tests.</p>\n<p>Inside a <code>file</code> element, insert a <code>testCase</code> for each test run by unit tests. It can have the following attributes/children:</p>\n<ul>\n<li>\n<p><code>testCase</code> (mandatory)</p>\n<ul>\n<li>\n<p><code>name</code> (mandatory): name of the test case</p>\n</li>\n<li>\n<p><code>duration</code> (mandatory): long value in milliseconds</p>\n</li>\n<li>\n<p><code>failure|error|skipped</code> (optional): if the test is not OK, report the cause with a message and a long description</p>\n</li>\n<li>\n<p><code>message</code> (mandatory): short message describing the cause</p>\n</li>\n<li>\n<p><code>stacktrace</code> (optional): long message containing details about <code>failure|error|skipped</code> status</p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/analysis/generic-test/"}}},{"node":{"html":"<p><em>Pull Request decoration is available as part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em></p>\n<p>You can add SonarQube analysis and a Quality Gate to your Pull Requests (PR) in your ALM provider's interface.</p>\n<h2>Pull Request Decoration by provider</h2>\n<p>Click your ALM provider below to expand the instructions on decorating your Pull Requests.</p>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>GitHub Enterprise and GitHub.com</h2><p><em>For GitHub Enterprise, the minimum version is 2.14</em></p><h3>Creating a GitHub App</h3><p>To add Pull Request decoration in GitHub checks, an instance administrator needs to create a GitHub App:</p><ol>\n<li>\n<p>Follow Steps 1–4 <a href=\"https://developer.github.com/apps/building-github-apps/creating-a-github-app/\">here</a> to start creating your GitHub App.</p>\n</li>\n<li>\n<p>Under <strong>GitHub App name</strong>, give your app a name (such as SonarQubePRChecks).</p>\n</li>\n<li>\n<p>GitHub requires a <strong>Homepage URL</strong> and a <strong>Webhook URL</strong>. These values aren't important for Pull Request decoration, so you can use any URL (such as <code>https://www.sonarqube.org/</code>).</p>\n</li>\n<li>\n<p>Grant access for the following <strong>Permissions</strong></p>\n<table>\n<thead>\n<tr>\n<th>Permission</th>\n<th>Access</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Checks</td>\n<td>Read &#x26; write</td>\n</tr>\n<tr>\n<td><strong>GitHub Enterprise:</strong> Repository metadata <br/> <strong>GitHub.com:</strong> Metadata</td>\n<td>Read-only</td>\n</tr>\n<tr>\n<td>Pull Requests</td>\n<td>Read-only</td>\n</tr>\n<tr>\n<td>Commit statuses</td>\n<td>Read-only</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>Under \"Where can this GitHub App be installed?,\" select <strong>Any account</strong>.  </p>\n</li>\n<li>\n<p>Click <strong>Create GitHub App</strong>. This will take you to your new GitHub App's page.  </p>\n</li>\n<li>\n<p>Scroll down to the bottom of your app page and click <strong>Generate Private Key</strong>. This downloads a <code>.pem</code> file that you'll use in the <strong>Setting your global settings</strong> section.  </p>\n</li>\n</ol><h3>Installing your app</h3><p>Install your GitHub App from the app's settings page. See the <a href=\"https://developer.github.com/apps/installing-github-apps/\">GitHub instructions</a> for more information.</p><h3>Setting your global settings</h3><p>To set your global settings in SonarQube, navigate to <strong>Administration > Configuration > General Settings > Pull Request Decoration</strong> and select the <strong>GitHub</strong> tab.</p><p>From here, set your <strong>Configuration Name</strong>, <strong>GitHub Instance URL</strong>, <strong>GitHub App ID</strong>, and your GitHub App's <strong>Private Key</strong> (that was generated above in the <strong>Creating a GitHub App</strong> section).</p><p><strong>Note:</strong> Make sure the Configuration name is succinct and easily recognizable as it will be used at the project level to identify the correct ALM configuration.</p><h3>Setting your project settings</h3><p>Go to <strong>Administration > General Settings > Pull Request Decoration</strong>, select your <strong>Configuration Name</strong>, and set your <strong>Repository identifier</strong>.</p></div></div>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>Bitbucket Server</h2><p><em>Minimum BitBucket Server version 5.15</em></p><p>A Bitbucket Server user account is used to decorate Pull Requests. We recommend creating a dedicated Bitbucket Server account with Administrator permissions to decorate Pull Requests. You need a <a href=\"https://confluence.atlassian.com/bitbucketserver0515/personal-access-tokens-961275199.html\">Personal Access Token</a> from this account with <strong>Write</strong> permission for the repositories that will be analyzed.</p><p>To add Pull Request decoration on Bitbucket Server, you also need to update your global and project settings. </p><h3>Setting your global settings</h3><p>To set your global settings in SonarQube, navigate to <strong>Administration > Configuration > General Settings > Pull Request Decoration</strong> and select the <strong>Bitbucket Server</strong> tab.</p><p>From here, set your  <strong>Configuration name</strong>, <strong>Bitbucket Server URL</strong>, and the <strong>Personal Access Token</strong> of the account you're using to decorate your Pull Requests.</p><p><strong>Note:</strong> Make sure the Configuration name is succinct and easily recognizable as it will be used at the project level to identify the correct ALM configuration.</p><h3>Setting your project settings</h3><p>Go to <strong>Administration > General Settings > Pull Request Decoration</strong>, select your <strong>Configuration name</strong>, and set your <strong>Project Key</strong> and <strong>Repo Slug</strong>.</p></div></div>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>Azure DevOps Server</h2><p>An Azure DevOps Server user account is used to decorate Pull Requests. We recommend creating a dedicated Azure DevOps Server account with Administrator permissions to decorate Pull Requests. You need a <a href=\"https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=tfs-2017&#x26;tabs=preview-page\">Personal Access Token</a> from this account with the scope authorized for <strong>Code > Read &#x26; Write</strong> for the repositories that will be analyzed.</p><p>To add Pull Request decoration on Azure DevOps Server, you also need to update your global and project settings. </p><h3>Setting your global settings</h3><p>To set your global settings in SonarQube, navigate to <strong>Administration > Configuration > General Settings > Pull Request Decoration</strong> and select the <strong>Azure DevOps Server</strong> tab.</p><p>From here, set your <strong>Configuration name</strong> and the <strong>Personal Access Token</strong> of the account you're using to decorate your Pull Requests.</p><p><strong>Note:</strong> Make sure the Configuration name is succinct and easily recognizable as it will be used at the project level to identify the correct ALM configuration.</p><h3>Setting your project settings</h3><p>Go to <strong>Administration > General Settings > Pull Request Decoration</strong> and select your <strong>Configuration name</strong>.</p></div></div>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>GitLab Self-Managed and GitLab.com</h2><p><em>For GitLab Self-Managed, the minimum version is 11.7</em></p><p>A GitLab user account is used to decorate Merge Requests. We recommend creating a dedicated GitLab account with at least <strong>Reporter</strong> <a href=\"https://docs.gitlab.com/ee/user/permissions.html\">permissions</a> (the account needs permission to leave comments) to decorate Merge Requests. You need a Personal Access Token from this account with the scope authorized for <strong>api</strong> for the repositories that will be analyzed.</p><p>To add Merge Request decoration to GitLab, you also need to update your global and project settings.</p><h3>Setting your global settings</h3><p>To set your global settings in SonarQube, navigate to <strong>Administration > Configuration > General Settings > Pull Request Decoration</strong> and select the <strong>GitLab</strong> tab.  </p><p>From here, set your <strong>Configuration name</strong> and the <strong>Personal Access Token</strong> of the account you're using to decorate your Merge Requests.</p><p><strong>Note:</strong> Make sure the Configuration name is succinct and easily recognizable as it will be used at the project level to identify the correct ALM configuration.</p><h3>Setting your project settings</h3><p>Go to <strong>Administration > General Settings > Pull Request Decoration</strong> and select your <strong>Configuration name</strong>.</p></div></div>\n<h2>Multiple ALM instances</h2>\n<p>It's possible to decorate Pull Requests from multiple ALM instances. To do this, you can create a configuration (as shown in the previous section) for each of your ALM instances. That instance configuration can then be assigned to the appropriate projects.</p>\n<p>As part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a>, you can create one configuration for each ALM. </p>\n<p>As part of <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">Enterprise Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>, you can create multiple configurations for each ALM.</p>\n<h2>Issue links</h2>\n<p>During pull request decoration, individual issues will be linked to their SonarQube counterparts automatically. However, for this to work correctly, the instance's <strong>Server base URL</strong> (<strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings/\">Administration > Configuration > General Settings > General > General</a></strong>) must be set correctly. Otherwise the links will default to <code>localhost</code>.</p>","fields":{"slug":"/analysis/pr-decoration/"}}},{"node":{"html":"<p><em>Pull Request analysis is available as part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em></p>\n<p>You can see your Pull Requests in SonarQube from the branches and pull requests dropdown menu of your project.</p>\n<p>Pull Request analysis allows you to see your Pull Request's Quality Gate and analysis in the SonarQube interface:</p>\n<p><img src=\"/images/pranalysis.png\" alt=\"Pull Request Analysis.\"></p>\n<h2>Pull Request Decoration</h2>\n<p>You can also add Pull Request decoration that shows the Pull Request analysis and Quality Gate directly in your ALM's interface. See <a href=\"/SonarQubeChineseDoc8.1/analysis/pr-decoration/\">Decorating Pull Requests</a> for more information on setting it up.</p>\n<h2>Pull Request Quality Gate</h2>\n<p>A <a href=\"/SonarQubeChineseDoc8.1/user-guide/quality-gates/\">Quality Gate</a> lets you ensure you are meeting your organization's quality policy and that you can merge your Pull Request. The Pull Request Quality Gate:</p>\n<ul>\n<li><strong>Focuses on new code</strong> – The PR quality gate only uses your project's quality gate conditions that apply to \"on New Code\" metrics.</li>\n<li><strong>Assigns a status</strong> – Each PR shows a quality gate status reflecting whether it Passed or Failed.</li>\n</ul>\n<p>PR analyses on SonarQube are deleted automatically after 30 days with no analysis. This can be updated in <strong>Administration > Configuration > General Settings > Housekeeping > Number of days before purging inactive branches</strong>. </p>\n<h2>Analysis Parameters</h2>\n<p>These parameters enable PR analysis:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.pullrequest.key</code></td>\n<td>Unique identifier of your PR. Must correspond to the key of the PR in GitHub or Azure DevOps.<br/> e.g.: <code>sonar.pullrequest.key=5</code></td>\n</tr>\n<tr>\n<td><code>sonar.pullrequest.branch</code></td>\n<td>The name of the branch that contains the changes to be merged.<br/> e.g.: <code>sonar.pullrequest.branch=feature/my-new-feature</code></td>\n</tr>\n<tr>\n<td><code>sonar.pullrequest.base</code></td>\n<td>The branch into which the PR will be merged. <br/> Default: master <br/> e.g.: <code>sonar.pullrequest.base=master</code></td>\n</tr>\n</tbody>\n</table>","fields":{"slug":"/analysis/pull-request/"}}},{"node":{"html":"<p><em>Merge Request analysis is available as part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em></p>\n<p>SonarScanners running in GitLab CI/CD Jobs will automatically detect branches or Merge Requests being built so you don't need to specifically pass them as parameters to the scanner.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>You need to disable shallow clone to make sure the scanner has access to all of the branches when running analysis with GitLab CI/CD. See <a href=\"https://docs.gitlab.com/ee/user/project/pipelines/settings.html#git-shallow-clone\">Git shallow clone</a> for more on disabling shallow clone.</p></div></div>\n<h2>Activating builds</h2>\n<p>Set up your build according to the section below that corresponds to your SonarQube edition.</p>\n<h3>Developer Edition and above</h3>\n<p>By default, GitLab will build all branches but not Merge Requests. To build Merge Requests, you need to update the <code>.gitlab-ci.yml</code> file by adding <code>merge_requests</code> to the <code>only</code> parameter. See the <strong>Example configurations</strong> below for more information.</p>\n<h3>Community Edition</h3>\n<p>Because Community Edition doesn't support branches, you should only analyze your main branch. You can restrict analysis to your main branch by adding the branch name to the <code>only</code> parameter.</p>\n<h2>Failing the pipeline job when the SonarQube Quality Gate fails</h2>\n<p>In order for the Quality Gate to fail on the GitLab side when the Quality Gate fails on the SonarQube side, the scanner needs to wait for the SonarQube Quality Gate status. To enable this, set the <code>sonar.qualitygate.wait=true</code> parameter in the <code>.gitlab-ci.yml</code> file. </p>\n<p>You can set the <code>sonar.qualitygate.timeout</code> property to an amount of time (in seconds) that the scanner should wait for a report to be processed. The default is 300 seconds. </p>\n<p>See the <strong>Example configurations</strong> below for more information.</p>\n<h2>Example configurations</h2>\n<p>The following example configurations show you how to configure the execution of SonarScanner for Gradle, SonarScanner for Maven, and SonarScanner CLI with GitLab CI/CD.</p>\n<p>In the example configurations:</p>\n<p>The <code>allow_failure</code> parameter allows a job to fail without impacting the rest of the CI suite.</p>\n<p>The <code>SONAR_TOKEN</code> and <code>SONAR_HOST_URL</code> variables are included. If you don't have environment variables set for all builds in GitLab's settings (as shown in <strong>Setting environment variables for all builds</strong> below), you need to set the variables to pass a <a href=\"/SonarQubeChineseDoc8.1/user-guide/user-token/\">token</a> and the URL of your SonarQube server.</p>\n<h3>SonarScanner for Gradle:</h3>\n<pre><code>image: gradle:alpine\nvariables:\n  SONAR_TOKEN: \"your-sonarqube-token\"\n  SONAR_HOST_URL: \"http://your-sonarqube-instance.org\"\n  GIT_DEPTH: 0\nsonarqube-check:\n  stage: test\n  script: gradle sonarqube -Dsonar.qualitygate.wait=true\n  allow_failure: true\n  only:\n    - merge_requests\n    - master\n</code></pre>\n<h3>SonarScanner for Maven:</h3>\n<pre><code>image: maven:latest\nvariables:\n  SONAR_TOKEN: \"your-sonarqube-token\"\n  SONAR_HOST_URL: \"http://your-sonarqube-url\"\n  GIT_DEPTH: 0\nsonarqube-check:\n  script:\n    - mvn verify sonar:sonar -Dsonar.qualitygate.wait=true\n  allow_failure: true\n  only:\n    - merge_requests\n    - master\n</code></pre>\n<h3>SonarScanner CLI:</h3>\n<pre><code>image:\n  name: sonarsource/sonar-scanner-cli:latest\n  entrypoint: [\"\"]\nvariables:\n  SONAR_TOKEN: \"your-sonarqube-token\"\n  SONAR_HOST_URL: \"http://your-sonarqube-instance.org\"\n  GIT_DEPTH: 0\nsonarqube-check:\n  stage: test\n  script:\n    - sonar-scanner -Dsonar.qualitygate.wait=true\n  allow_failure: true\n  only:\n    - merge_requests\n    - master\n</code></pre>\n<p><strong>Note:</strong> A project key has to be provided through <code>sonar-project.properties</code> or through the command line parameter. For more information, see the <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner/\">SonarScanner</a> documentation.</p>\n<h2>Setting environment variables for all builds</h2>\n<p>Instead of specifying environment variables in your <code>.gitlab-ci.yml</code> file (such as <code>SONAR_TOKEN</code> and <code>SONAR_HOST_URL</code>), you can set them securely for all pipelines in GitLab's settings. See <a href=\"https://docs.gitlab.com/ee/ci/variables/#creating-a-custom-environment-variable\">Creating a Custom Environment Variable</a> for more information.</p>\n<h2>For more information</h2>\n<p>For more information on configuring your build with GitLab CI/CD, see the <a href=\"https://gitlab.com/help/ci/yaml/README.md\">GitLab CI/CD Pipeline Configuration Reference</a>.</p>","fields":{"slug":"/analysis/gitlab-cicd/"}}},{"node":{"html":"<p><em>Security Engine Custom Configuration is available as part of the <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">Enterprise Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em></p>\n<p>The security engine tracks the path that data follows through your code. It detects when data that's potentially manipulated by a malicious user reaches a sensitive piece of code where an attack can occur.</p>\n<p>Those potentially malicious data are also called <strong>tainted data</strong>, because they are tainted by user inputs. </p>\n<p>SonarQube's security engine already knows a lot of APIs that are potential sources of attack and APIs that are potential targets of attack. While we do our best to identify publicly available APIs, we can't know everything about your homemade frameworks particularly when it comes to sanitizing your data. Because of this, SonarQube allows you to customize the security engine to add your own \"sources\", \"sanitizers\", \"passthroughs\", and \"sinks\" (see the <strong>Elements</strong> section below for more on these elements).</p>\n<p>For example, you may want to:</p>\n<ul>\n<li>add a source to add support for a framework that SonarQube doesn't cover out of the box</li>\n<li>use a custom sanitizer to tell to the security engine that all data going through sanitizers should be considered as safe. This allows you to remove false positives and tailor the security engine to your company.</li>\n</ul>\n<h2>Elements</h2>\n<p>You can add the following elements to your custom configuration:</p>\n<ul>\n<li><strong>Source</strong> – Where you get user data. You should always consider user data tainted and vulnerable to injection attacks.\nExample: Calling <code>HttpServletRequest#getParam(\"foo\")</code> will return tainted content</li>\n<li><strong>Sanitizer</strong> – Finds and removes malicious content from tainted data.</li>\n<li><strong>Passthrough</strong> – Allows you to keep track of tainted data sent to a library outside of the current function. When you pass a tainted value to a library functions outside of the current function, SonarQube automatically assumes it's being passed to a sanitizer. If the tainted data isn't being passed to a sanitizer, you can set up a passthrough to keep track of the data.</li>\n<li><strong>Sink</strong> – A piece of code that can perform a security sensitive task. Data should not contain any malicious content once it reaches a sink.\nExample: Running an SQL query with <code>java.sql.Statement#execute</code></li>\n</ul>\n<h2>Analysis Parameters</h2>\n<p>To customize the SonarQube security engine, you need to feed security configuration data through parameters given to the SonarScanners. To do this, you should provide JSON files with the value of the new analysis parameters. The parameters should use the following syntax:</p>\n<pre><code>sonar.security.[ConfigType].[RuleRepository].[RuleKey]=[FileName]\n</code></pre>\n<p>The <code>ConfigType</code> value can be one of the following:</p>\n<ul>\n<li><code>sources</code></li>\n<li><code>sanitizers</code></li>\n<li><code>passthroughs</code></li>\n<li><code>sinks</code></li>\n</ul>\n<p>The <code>RuleRepository</code> value can be one of the following:</p>\n<ul>\n<li><code>javasecurity</code>: if you want to customize the Java Security Engine</li>\n<li><code>phpsecurity</code>: if you want to customize the PHP Security Engine</li>\n<li><code>roslyn.sonaranalyzer.security.cs</code>: if you want to customize the C# Security Engine</li>\n</ul>\n<p>The <code>RuleKey</code> value can be one of the following:</p>\n<ul>\n<li>\n<p>For Java</p>\n<ul>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-3649\">S3649</a>: SQL Injection</li>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-5131\">S5131</a>: XSS</li>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-5146\">S5146</a>: Open Redirect</li>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-5167\">S5167</a>: HTTP Response Splitting</li>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-2083\">S2083</a>: Path Traversal Injection</li>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-2078\">S2078</a>: LDAP Injection</li>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-5145\">S5145</a>: Log Injection</li>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-2076\">S2076</a>: OS Command Injection</li>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-2631\">S2631</a>: RegExp Injection</li>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-5144\">S5144</a>: Server-Side Request Forgery (SSRF)</li>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-2091\">S2091</a>: XPath Injection</li>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-5135\">S5135</a>: Deserialization Injection</li>\n<li><a href=\"https://rules.sonarsource.com/java/RSPEC-5334\">S5334</a>: Code Injection</li>\n</ul>\n</li>\n<li>\n<p>For PHP</p>\n<ul>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-3649\">S3649</a>: SQL Injection</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-5131\">S5131</a>: XSS</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-5146\">S5146</a>: Open Redirect</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-5167\">S5167</a>: HTTP Response Splitting</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-2083\">S2083</a>: Path Traversal Injection</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-2078\">S2078</a>: LDAP Injection</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-5145\">S5145</a>: Log Injection</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-2076\">S2076</a>: OS Command Injection</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-2631\">S2631</a>: RegExp Injection</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-5144\">S5144</a>: Server-Side Request Forgery (SSRF)</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-2091\">S2091</a>: XPath Injection</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-5135\">S5135</a>: Deserialization Injection</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-5334\">S5334</a>: Code Injection</li>\n<li><a href=\"https://rules.sonarsource.com/php/RSPEC-5335\">S5335</a>: Include Injection</li>\n</ul>\n</li>\n<li>\n<p>For C#</p>\n<ul>\n<li><a href=\"https://rules.sonarsource.com/csharp/RSPEC-3649\">S3649</a>: SQL Injection</li>\n<li><a href=\"https://rules.sonarsource.com/csharp/RSPEC-5131\">S5131</a>: XSS</li>\n<li><a href=\"https://rules.sonarsource.com/csharp/RSPEC-5146\">S5146</a>: Open Redirect</li>\n<li><a href=\"https://rules.sonarsource.com/csharp/RSPEC-5167\">S5167</a>: HTTP Response Splitting</li>\n<li><a href=\"https://rules.sonarsource.com/csharp/RSPEC-2083\">S2083</a>: Path Traversal Injection</li>\n<li><a href=\"https://rules.sonarsource.com/csharp/RSPEC-2078\">S2078</a>: LDAP Injection</li>\n<li><a href=\"https://rules.sonarsource.com/csharp/RSPEC-5145\">S5145</a>: Log Injection</li>\n<li><a href=\"https://rules.sonarsource.com/csharp/RSPEC-2076\">S2076</a>: OS Command Injection</li>\n<li><a href=\"https://rules.sonarsource.com/csharp/RSPEC-2631\">S2631</a>: RegExp Injection</li>\n<li><a href=\"https://rules.sonarsource.com/csharp/RSPEC-5144\">S5144</a>: Server-Side Request Forgery (SSRF)</li>\n<li><a href=\"https://rules.sonarsource.com/csharp/RSPEC-2091\">S2091</a>: XPath Injection</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>The configuration works per rule. There is no way to share configuration between rules. </p></div></div>\n<h2>File Format</h2>\n<p>The configuration is provided through JSON files. Here is a sample JSON file that help to understand the expected JSON format.</p>\n<p><strong>JSON File Format Example for PHP</strong></p>\n<pre><code>{\n  \"sources\": [\n    {\n      \"methodId\": \"My\\\\Namespace\\\\ClassName\\\\ServerRequest::getQuery\"\n    }\n  ],\n  \"sanitizers\": [\n    {\n      \"methodId\": \"str_replace\"\n    }\n  ],\n  \"passthroughs\": [\n    {\n      \"methodId\": \"rawurldecode\",\n      \"args\": [\n        1\n      ]\n    }\n  ],\n  \"sinks\": [\n    {\n      \"methodId\": \"mysql_query\",\n      \"args\": [\n        1\n      ]\n    },\n    {\n      \"methodId\": \"My\\\\Namespace\\\\SqlStatement::execute\",\n      \"isMethodPrefix\": true, // this is to say that all the methods starting with execute on the SqlStatement object will be considered\n      \"args\": [\n        0,\n        1\n      ]\n    },\n    {\n      \"methodId\": \"My\\\\Namespace\\\\SqlStatement::run\",\n      \"interval\": {\n        \"fromIndex\": 1 // every parameter from the number 1 will be considered\n      }\n    }\n  ]  \n}\n</code></pre>\n<p>The <code>args</code> is the index of the parameter that can receive a tainted variable. Index starts:</p>\n<ul>\n<li><code>1</code> for a fonction call. </li>\n<li><code>0</code> for a method call, index <code>0</code> beeing the current instance (<code>this</code>) </li>\n</ul>\n<h2>MethodId</h2>\n<p>All the custom configurations rely on the accuracy of the <code>methodIds</code> provided. For each language, the format of the <code>methodId</code> is different.</p>\n<h3>MethodId for Java</h3>\n<p>The <code>methodId</code> format is inspired by the bytecode. The easiest way to get a <code>methodId</code> is to write a simple piece of Java code, compile it and then look at the bytecode generated using the <code>javap -c path_to.class</code> file, and transform it a little. Looking at the following real-life example will help you understand the format.</p>\n<p>Let's imagine you want to declare <code>org.rapidoid.jdbc.JdbcClient.execute(String sql, Object... args)</code> as a new sink (you don't need to do this because Rapidoid is part of what is covered out of the box).</p>\n<p>Write a simple piece of code calling the JdbcClient.execute(...) method. The code doesn't need to actually do anything.</p>\n<pre><code>import org.rapidoid.http.Req;\nimport org.rapidoid.jdbc.JdbcClient;\n\npublic static void callJDBCMethods(Req req) {\n  String tainted = req.param(\"TAINTED\");\n  JdbcClient jdbc = JDBC.api();\n  dbc.execute(tainted, req); // Noncompliant\n}      \n</code></pre>\n<p>Run the <code>javap -c</code> and locate the piece of bytecode corresponding to the call to <code>JdbcClient.execute</code></p>\n<pre><code>[...]\norg/rapidoid/jdbc/JdbcClient.execute:(Ljava/lang/String;[Ljava/lang/Object;)I\n[...]\n</code></pre>\n<ul>\n<li>Replace the <code>/</code> in the package name with  <code>.</code></li>\n<li>Remove the <code>:</code></li>\n<li>Replace the <code>.</code> separating the Class name and the Method name with a <code>#</code></li>\n</ul>\n<p>The resulting <code>methodId</code> is:</p>\n<pre><code>org.rapidoid.jdbc.JdbcClient#execute(Ljava/lang/String;[Ljava/lang/Object;)I\n</code></pre>\n<h3>MethodId for PHP</h3>\n<p>The <code>methodId</code> can be:</p>\n<ul>\n<li>the name of a PHP function </li>\n<li>the fully qualified name of a method following this format: <code>namespace\\\\ClassName::methodName</code></li>\n</ul>\n<p>Example: <code>Symfony\\\\Component\\\\HttpFoundation\\\\Request::getUser</code> for the <code>getUser()</code> method of the <code>Request</code> object provided by <code>Symfony</code></p>\n<p>Note: the <code>methodId</code> should be related to methods or functions that are part of the analysis scope. Because we recommended to not analyze code of frameworks at the same time that you scan your own source code, defining methods or functions from frameworks will have no effect.\nThis is linked to the fact that the SonarQube security engine needs to know the runtime type of each variable. The type can't be guessed when objects are created by frameworks' factories. Out of the box, the SonarQube security engine supports the main Symfony and Laravel types.</p>\n<h3>MethodId for C#</h3>\n<p>If you want to declare the constructor <code>SqlCommand</code> belonging to the namespace <code>System.Data.SqlClient</code> as a sink, the <code>methodId</code> should be:</p>\n<pre><code>System.Data.SqlClient.SqlCommand.SqlCommand(string, System.Data.SqlClient.SqlConnection)\n</code></pre>\n<p>You simply need to provide the fully qualified name of the method or constructor plus the types of the arguments.</p>\n<h2>Deactivate Core Configuration</h2>\n<p>You can disable the core configuration per language or per rule using the following:</p>\n<pre><code>sonar.security.[ConfigType].[RuleRepository].noDefaultConfig=[true|false]\nsonar.security.[ConfigType].[RuleRepository].[RuleKey].noDefaultConfig=[true|false]\n</code></pre>","fields":{"slug":"/analysis/security_configuration/"}}},{"node":{"html":"<p>Collecting SCM data during code analysis can unlock a number of SonarQube features:</p>\n<ul>\n<li>Automatic Issue Assignment</li>\n<li>code annotation (blame data) in the Code Viewer</li>\n<li>SCM-driven detection of new code (to help with <a href=\"/SonarQubeChineseDoc8.1/user-guide/clean-as-you-code/\">Clean as You Code</a>). Without SCM data, SonarQube determines new code using analysis dates (to timestamp modification of lines).</li>\n</ul>\n<p>SCM integration requires support for your individual SCM provider. Git and SVN are supported by default. For other SCM providers, see the Marketplace.</p>\n<p>If need be, you can toggle it off at global/project level via administration settings.</p>\n<h2>Git</h2>\n<p><a href=\"http://www.git-scm.com/\">Git</a> integration is supported out of the box with a pure Java implementation so there's no need to have Git command line tool installed on the machine where analysis is performed.</p>\n<p>Auto-detection of Git during analysis will happen if there is a .git folder in the project root directory or in one of its parent folders. Otherwise you can force the provider using <code>-Dsonar.scm.provider=git</code>. A full clone is required for this integration to be able to collect the required blame information (see Known Issues). If a shallow clone is detected, a warning will be logged and no attempt will be made to retrieve blame information..</p>\n<h3>Known Issues</h3>\n<ul>\n<li>Git doesn't consider old \"Mac\" line ends (CR) as new lines. As a result the blame operation will contain fewer lines than expected by SonarQube and analysis will fail. The solution is to fix line ends to use either Windows (CR/LF) or Unix (LF) line ends.</li>\n<li>JGit doesn't support .mailmap file to \"clean\" email adress during the blame</li>\n<li>\"Missing blame information...\" can be caused by checking out with a partial / shallow clone, or using Git submodules.</li>\n</ul>\n<h3>Advanced information</h3>\n<p>The plugin uses <a href=\"https://www.eclipse.org/jgit/\">JGit</a> 4.9.0. JGit is a pure Java implementation of Git client.</p>\n<h3>How to investigate error during blame (only possible on Unix/Linux)?</h3>\n<p>If you get an error when blame is executed on a file, it may be a limitation or a bug in JGit. To confirm please follow these steps:</p>\n<ol>\n<li>\n<p>Download the standalone JGit command line distribution</p>\n</li>\n<li>\n<p>Try to execute the blame command on the offending file:<br>\n<code>chmod +x /path/to/org.eclipse.jgit.pgm-4.9.0.201710071750-r.sh /path/to/org.eclipse.jgit.pgm-4.9.0.201710071750-r.sh blame -w /path/to/offending/file</code></p>\n</li>\n<li>\n<p>If you get the same error as during analysis, then this really looks like a bug in JGit (especially if you don't have an issue with the native git command line tool). Please try to do the previous steps with latest version of JGit and report all information to the <a href=\"https://community.sonarsource.com/\">SonarQube Community Forum</a>.</p>\n</li>\n</ol>\n<h2>Subversion</h2>\n<p><a href=\"https://subversion.apache.org/\">Subversion</a> integration is supported out of the box for Subversion 1.6 to 1.9.x.</p>\n<p>Auto-detection of SVN during analysis will happen if there is a <code>.svn</code> folder somewhere in the parent hierarchy of the project root. Otherwise you can force the provider using <code>-Dsonar.scm.provider=svn</code> on the analysis command line.</p>\n<h3>Known issues</h3>\n<p>If you get errors like:</p>\n<p><code>Caused by: org.tmatesoft.svn.core.SVNException: svn: E200007: Retrieval of mergeinfo unsupported by 'https://pmd.svn.sourceforge.net/svnroot/pmd/trunk/pmd/src/main/java/net/sourceforge/pmd/AbstractConfiguration.java';</code>\nIt means the SVN server is not advertising the 'mergeinfo' capability. You can check the advertised capabilities by simply connecting to it:</p>\n<p><code>telnet &#x3C;svn_server> 3690</code>\nOften this is because your SVN server is not >= 1.5 or your project was not properly migrated after a server upgrade. It could also be a misconfiguration of the server.</p>\n<p>You should try to run svnadmin upgrade <strong>on the server</strong>. For more information, please read <a href=\"https://subversion.apache.org/docs/release-notes/1.5.html#repos-upgrades\">https://subversion.apache.org/docs/release-notes/1.5.html#repos-upgrades</a>.</p>","fields":{"slug":"/analysis/scm-integration/"}}},{"node":{"html":"<p>SonarQube collects a maximum of measures in an automated manner but there are some measures for which this is not possible, such as when: the information is not available for collection, the measure is computed by a human, and so on. Whatever the reason, SonarQube provides a service to inject those measures manually and allow you to benefit from other services: the Manual Measures service. The manual measures entered will be picked during the next analysis of the project and thereafter treated as \"normal\" measures.</p>\n<h2>Managing Custom Metrics</h2>\n<p>As with measures that are collected automatically, manual measures are the values collected in each analsis for manual metrics. Therefore, the first thing to do is create the metric you want to save your measure against. In order to do so, log in as a system administrator and go to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/custom_metrics\">Administration > Configuration > Custom Metrics</a></strong>, where the interface will guide you in creating the Metric you need. </p>\n<h2>Managing Custom Measures</h2>\n<p>Custom measures can be entered at project level. To add a measure, sign in as a project administrator, navigate to the desired project and choose <strong>Administration > Custom Measures</strong>, where you will find a table with the latest measure value entered for each metric. </p>\n<p>Values entered in this interface are \"Pending\", and will not be visible outside this administrative interface until the next analysis. </p>","fields":{"slug":"/instance-administration/custom-measures/"}}},{"node":{"html":"<p><em>The SonarQube DB Copy Tool is available to customers with <a href=\"https://www.sonarsource.com/support/\">SonarSource support</a>.</em></p>\n<p>This tool is provided to help you migrate your SonarQube database from one DB vendor to another. If, for instance, you've been using your SonarQube instance with Oracle and you want to migrate to PostgreSQL without loosing your analysis history, the SonarQube DB Copy Tool is what you need. </p>\n<p>In the following lines we will talk about \"source\" and \"target\" SonarQube database instances. The source instance is the database you want to discard and the target is the one you want to move to.</p>\n<p>The procedure is basically as follows:</p>\n<ul>\n<li>connect to both the source and target databases</li>\n<li>read the data from the source database table by table</li>\n<li>save the data into the target database table by table</li>\n<li>recreate the sequences, index, ... on the target database</li>\n</ul>\n<h2>Installation</h2>\n<p>The SonarQube DB Copy Tool is provided as a standalone JAR file. <strong>It must not be installed in your source or target SonarQube instances</strong>. Put the JAR wherever your want on your machine, the only prerequisite is that this machine must be authorized to access your source and target SonarQube databases.</p>\n<p>The version of the JAR to use must be at least <strong>1.3.3.627</strong></p>\n<h2>DB Copy Preparation Phase</h2>\n<p>In the preparation phase, you ready the target database by setting up SonarQube schema and populating it with the necessary tables so that you end up with the same  database schema in the source and the target.</p>\n<ol>\n<li>Make sure your target database is up and running</li>\n<li>On your target database, create the <code>sonar</code> schema. </li>\n<li>Download and expand a copy of SonarQube that exactly matches the version you're running. </li>\n<li>Configure your SonarQube copy to connect to the target database. (If you've placed your SonarQube copy on the same server that runs your primary SonarQube instance, you'll also need to configure non-default ports for your copy SonarQube instance.)</li>\n<li>Start your copy SonarQube instance. It will connect to your empty target and populate the schema.</li>\n<li>Once your copy instance is up and running (this indicates that the schema is fully populated), you can stop and delete it.</li>\n<li>Refresh the Database Statistics on the target database before restarting SonarQube</li>\n</ol>\n<p>At this point, you have in your source and target databases the exact same lists of tables.</p>\n<h2>DB Copy Run Phase</h2>\n<p>There are only four steps in this phase:</p>\n<ol>\n<li><strong>Stop your primary SonarQube instance.</strong></li>\n<li>Execute the base command jar with the correct parameters. </li>\n<li>Update your primary SonarQube instance's configuration to point to the target DB</li>\n<li>Restart your primary SonarQube instance.</li>\n</ol>\n<h3>Base command</h3>\n<pre><code>java -jar sonar-db-copy-1.3.3.627-jar-with-dependencies.jar\n</code></pre>\n<h3>Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Required</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-help</code></td>\n<td>Print this parameters help</td>\n<td>no</td>\n<td></td>\n</tr>\n<tr>\n<td><code>-urlSrc</code></td>\n<td>JDBC URL of the source database</td>\n<td>yes</td>\n<td></td>\n</tr>\n<tr>\n<td><code>-userSrc</code></td>\n<td>Username of the source database</td>\n<td>yes</td>\n<td></td>\n</tr>\n<tr>\n<td><code>-pwdSrc</code></td>\n<td>Password of the source database</td>\n<td>yes</td>\n<td></td>\n</tr>\n<tr>\n<td><code>-urlDest</code></td>\n<td>JDBC URL of the target database</td>\n<td>yes</td>\n<td></td>\n</tr>\n<tr>\n<td><code>-userDest</code></td>\n<td>Username of the target database</td>\n<td>yes</td>\n<td></td>\n</tr>\n<tr>\n<td><code>-pwdDest</code></td>\n<td>Password of the target database</td>\n<td>yes</td>\n<td></td>\n</tr>\n<tr>\n<td><code>-driverDest</code></td>\n<td>JDBC Driver of the target database</td>\n<td>no</td>\n<td></td>\n</tr>\n<tr>\n<td><code>-driverSrc</code></td>\n<td>JDBC Driver of the source database</td>\n<td>no</td>\n<td></td>\n</tr>\n<tr>\n<td><code>-T</code></td>\n<td>Comma separated list of tables to migrate</td>\n<td>no</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Execution Examples</h2>\n<p>First sonar-db-copy verifies if URLs can be reached and the database versions:<br>\n<img src=\"/images/db-copy/verify-urls.png\" alt=\"verify urls\"></p>\n<p>When the versions are different, the application stops.<br>\n<img src=\"/images/db-copy/verify-versions.png\" alt=\"stop for different versions\"></p>\n<p>Sometime when you have restarted the copy, the destination database version is 0. This is not a problem, the copy will continue.<br>\n<img src=\"/images/db-copy/version0-ok.png\" alt=\"version 0 in target is okay\"></p>\n<p>Then it searches tables in source and destination database:<br>\n<img src=\"/images/db-copy/search-tables.png\" alt=\"search tables\"></p>\n<p>If there are missing tables, you will read this log:<br>\n<img src=\"/images/db-copy/missing-table-warning.png\" alt=\"missing table warning\"></p>\n<p>Second sonar-db-copy truncates tables in target database and indicates the number of tables purged:<br>\n<img src=\"/images/db-copy/truncate-tables.png\" alt=\"truncate tables in target\"></p>\n<p>Of course, the tables missing can not be purged:<br>\n<img src=\"/images/db-copy/missing-table-not-purged.png\" alt=\"missing tables aren&#x27;t purged\"></p>\n<p>Third, sonar-db-copy reproduces data from source to destination and adjusts the sequence of destination database after the copy:<br>\n<img src=\"/images/db-copy/copy-data.png\" alt=\"copy data\"></p>\n<p>If there are some missing tables:<br>\n<img src=\"/images/db-copy/missing-table-not-copied.png\" alt=\"missing tables not copied\"></p>\n<p>If errors appear during the copy, the process does NOT stop but the errors are displayed:<br>\n<img src=\"/images/db-copy/copy-errors-shown.png\" alt=\"copy errors displayed\"></p>\n<p>At the end sonar-db-copy reiterates the difference between source and destination database. An error message is displayed if the databases are different.\n<img src=\"/images/db-copy/summary-of-differences.png\" alt=\"final warning of remaining differences\"></p>","fields":{"slug":"/instance-administration/db-copy/"}}},{"node":{"html":"<p>SonarQube comes with an onboard user database, as well as the ability to delegate authentication via HTTP Headers, GitHub Authentication, GitLab Authentication, SAML, or LDAP. Each method offers user identity management, group synchronization/mapping, and authentication.</p>\n<h2>Group Mapping</h2>\n<p>When using group mapping, the following caveats apply regardless of which delegated authentication method is used:</p>\n<ul>\n<li>membership in synchronized groups will override any membership locally configured in SonarQube <em>at each login</em></li>\n<li>membership in a group is synched only if a group with the same name exists in SonarQube</li>\n<li>membership in the default group <code>sonar-users</code> remains (this is a built-in group) even if the group does not exist in the identity provider</li>\n</ul>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>When group mapping is configured, the delegated authentication source becomes the one and only place to manage group membership, and the user's groups are re-fetched with each log in.</p></div></div>\n<h2>HTTP Header Authentication</h2>\n<p>You can delegate user authentication to third-party systems (proxies/servers) using HTTP Header Authentication.</p>\n<p>When this feature is activated, SonarQube expects that the authentication is handled prior any query reaching the server.\nThe tool that handles the authentication should:</p>\n<ul>\n<li>intercept calls to the SonarQube server</li>\n<li>take care of the authentication</li>\n<li>update the HTTP request header with the relevant SonarQube user information</li>\n<li>re-route the request to SonarQube with the appropriate header information</li>\n</ul>\n<p><img src=\"/images/http-header-authentication.png\" alt=\"HTTP Header Authentication flow\"></p>\n<p>All the parameters required to activate and configure this feature are available in SonarQube server configuration file (in <em>$SONARQUBE-HOME/conf/sonar.properties</em>).</p>\n<p>Using Http header authentication is an easy way integrate your SonarQube deployment with an in-house SSO implementation.</p>\n<h2>GitHub Authentication</h2>\n<p>You can delegate authentication to GitHub Enterprise and GitHub.com using a dedicated GitHub OAuth application. Alternately, if you're using the pull request decoration provided as part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a> you can harness the <a href=\"/SonarQubeChineseDoc8.1/analysis/pr-decoration/\">GitHub application needed for PR decoration</a> to also provide authentication.</p>\n<h3>Dedicated GitHub OAuth application</h3>\n<ol>\n<li>\n<p>You'll need to first create a GitHub OAuth application. Click <a href=\"https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/\">here</a> for general instructions:</p>\n<ol>\n<li>\"Homepage URL\" is the public URL to your SonarQube server, for example \"<a href=\"https://sonarqube.mycompany.com%22\">https://sonarqube.mycompany.com\"</a>. For security reasons HTTP is not supported. HTTPS must be used. The public URL is configured in SonarQube at <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings\">Administration -> General -> Server base URL</a></strong></li>\n<li>For <strong>GitHub Enterprise</strong> \"Authorization callback URL\" and for <strong>GitHub.com</strong> \"User authorization callback URL\" is <Homepage URL>/oauth2/callback, for example \"<a href=\"https://sonarqube.mycompany.com/oauth2/callback\">https://sonarqube.mycompany.com/oauth2/callback</a>\"</li>\n</ol>\n</li>\n<li>\n<p>In SonarQube, navigate to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=security\">Administration > Configuration > General Settings > Security > GitHub</a></strong>:</p>\n<ol>\n<li>Set <strong>Enabled</strong> to <code>true</code></li>\n<li>Set the <strong>Client ID</strong> to the value provided by the GitHub developer application</li>\n<li>Set the <strong>Client Secret</strong> to the value provided by the GitHub developer application</li>\n</ol>\n</li>\n</ol>\n<p>On the login form, the new \"Log in with GitHub\" button allows users to connect with their GitHub Enterprise accounts. </p>\n<h3>Re-use GitHub PR decoration application</h3>\n<ol>\n<li>In the GitHub app, in <strong>Permission &#x26; events > User permissions</strong>: Add <strong>Read-only</strong> access in <strong>Emails</strong>.</li>\n<li>In SonarQube settings, update the <strong>Client ID</strong> and <strong>Client Secret</strong> and use values defined in the GitHub app.</li>\n</ol>\n<p>If you previously used a dedicated GitHub OAuth application for authentication, it can be removed.</p>\n<h2>GitLab Authentication</h2>\n<p>You can delegate authentication to GitLab using a dedicated GitLab OAuth application.</p>\n<p>Create a GitLab OAuth application from your GitLab account. Click <a href=\"https://docs.gitlab.com/ee/integration/oauth_provider.html\">here</a> for general instructions.</p>\n<ol>\n<li>In the <strong>Name</strong> text box, name your app SonarQube.</li>\n<li>In the <strong>Redirect URI</strong> text box, enter your SonarQube URL with the path <code>/oauth2/callback/gitlab</code>. For example, <code>https://sonarqube.mycompany.com/oauth2/callback/gitlab</code>.</li>\n<li>Under <strong>Scopes</strong>, select <strong>api</strong> if you plan to enable group synchronization. You can instead select <strong>read_user</strong> if you only plan to delegate authentication.</li>\n</ol>\n<p>After saving your application, GitLab gives you your <strong>Application ID</strong> and <strong>Secret</strong>. Keep these at hand, open your SonarQube instance, and navigate to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=security/\">Administration > Configuration > General Settings > Security</a></strong> to finish setting up GitLab authentication:</p>\n<ol>\n<li>Set <strong>Enabled</strong> to <code>true</code>.</li>\n<li>Enter the Application ID provided by GitLab in the <strong>Application ID</strong> text box.</li>\n<li>Enter the Secret provided by GitLab in the <strong>Secret</strong> text box.</li>\n</ol>\n<p>On the login form, the new \"Log in with GitLab\" button allows users to connect with their GitLab accounts.</p>\n<h3>GitLab group synchronization</h3>\n<p>Setting <strong>Synchronize groups</strong> to <code>true</code> at <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=security/\">Administration > Configuration > General Settings > Security</a></strong> associates GitLab groups with SonarQube groups of the same name (if they exist). GitLab users inherit membership to subgroups from parent groups so a user that is a member of a group will also be a member of the group's subgroups. </p>\n<p>To synchronize a GitLab group or subgroup with a SonarQube group, name the SonarQube group with the full path of the of the GitLab group or subgroup URL. For example, say you have a GitLab group named \"My Group\" with a subgroup named \"My Subgroup\" and the subgroup URL is <code>https://YourGitLabURL.com/my-group/my-subgroup</code>. You would name your SonarQube group <code>my-group/my-subgroup</code> to synchronize it with your GitLab subgroup.</p>\n<h2>SAML Authentication</h2>\n<p>You can delegate authentication to a SAML 2.0 Identity Provider using SAML Authentication.</p>\n<h3>Limitations</h3>\n<ul>\n<li>SAML requests are not signed. Client signature validation should be disabled in the Identity Provider.</li>\n<li>SAML encrypted responses are not supported. SAML encryption should be disabled in the Identity Provider.</li>\n</ul>\n<h3>Example: Using Keycloak as a SAML Identity Provider</h3>\n<p>The following example may be useful if you're using Keycloak as a SAML Identity Provider. If you're not using Keycloak, your settings are likely to be different.</p>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>In the Keycloak server, create a new SAML client</h2><p>Create a new client</p><ol>\n<li>\"Client ID\" is something like \"sonarqube\" </li>\n<li>\"Client Protocol\" must be set to \"saml\"</li>\n<li>\"Client SAML Endpoint\" can be left empty</li>\n</ol><p>Configure the new client</p><ol>\n<li>\n<p>in Settings</p>\n<ol>\n<li>Set\"Client Signature Required\" to OFF</li>\n<li>Set \"Valid Redirect URIs\" to \"<Your SonarQube URL>/oauth2/callback/*, E.G <a href=\"https://sonarqube.mycompany.com/oauth2/callback/saml\">https://sonarqube.mycompany.com/oauth2/callback/saml</a></li>\n</ol>\n</li>\n<li>in Client Scopes > Default Client Scopes , remove \"role_list\" from \"Assigned Default Client Scopes\" (to prevent the error <code>com.onelogin.saml2.exception.ValidationError: Found an Attribute element with duplicated Name</code> during authentication)</li>\n<li>\n<p>In Mappers create a mapper for each user attribute (Note that values provided below for Name, SAML Attribute Name, Role Attribute Name are only example values): </p>\n<ol>\n<li>Create a mapper for the login: </li>\n<li>Name: Login</li>\n<li>Mapper Type: User Property</li>\n<li>Property: Username (Note that the login should not contain any special characters other than <code>.-_@</code> to meet SonarQube restrictions.)</li>\n<li>SAML Attribute Name: login</li>\n<li>Create a mapper for the name: </li>\n<li>Name: Name</li>\n<li>Mapper Type: User Property</li>\n<li>User Attribute: Username (It can also be another attribute you would previously have specified for the users)</li>\n<li>SAML Attribute Name: name</li>\n<li>(Optional) Create a mapper for the email: </li>\n<li>Name: Email</li>\n<li>Mapper Type: User Property</li>\n<li>Property: Email</li>\n<li>SAML Attribute Name: email</li>\n<li>(Optional) Create a mapper for the groups (If you rely on a list of roles defined in \"Roles\" of the Realm (not in \"Roles\" of the client)):</li>\n<li>Name: Groups</li>\n<li>Mapper Type: Role list</li>\n<li>Role Attribute Name: groups</li>\n<li>Single Role Attribute: ON</li>\n<li>If you rely on a list of groups defined in \"Groups\":</li>\n<li>Name: Groups</li>\n<li>Mapper Type: Group list</li>\n<li>Role Attribute Name: groups</li>\n<li>Single Role Attribute: ON</li>\n<li>Full Group Path: OFF</li>\n</ol>\n</li>\n</ol><p>Download the XML configuration file from Keycloak.</p></div></div>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>In SonarQube, Configure SAML authentication</h2><p>Go to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=security\">Administration > Configuration > General Settings > Security > SAML</a></strong></p><ul>\n<li><strong>Enabled</strong> should be set to true</li>\n<li><strong>Application ID</strong> is the value of the \"Client ID\" you set in Keycloak (for example \"sonarqube\")</li>\n<li><strong>Provider ID</strong> is the value of the \"EntityDescriptor\" > \"entityID\" attribute in the XML configuration file (for example \"<a href=\"http://keycloak:8080/auth/realms/sonarqube\">http://keycloak:8080/auth/realms/sonarqube</a>\" where sonarqube is the name of the realm)</li>\n<li><strong>SAML login url</strong> is the value of \"SingleSignOnService\" > \"Location\" attribute in the XML configuration file (for example \"<a href=\"http://keycloak:8080/auth/realms/sonarqube/protocol/saml%22\">http://keycloak:8080/auth/realms/sonarqube/protocol/saml\"</a>)</li>\n<li><strong>Provider certificate</strong> is the value you get from <em>Reaml Settings</em> -> <em>Keys</em> -> click on the <em>Certificate</em> button</li>\n<li><strong>SAML user login attribute</strong> is the value set in the login mapper in \"SAML Attribute Name\"</li>\n<li><strong>SAML user name attribute</strong> is the value set in the name mapper in \"SAML Attribute Name\"</li>\n<li>(Optional) <strong>SAML user email attribute</strong> is the value set in the email mapper in \"SAML Attribute Name\"</li>\n<li>(Optional) <strong>SAML group attribute</strong> is the value set in the groups mapper in \"Role/Group Attribute Name\"</li>\n</ul><p>In the login form, the new button \"Log in with SAML\" allows users to connect with their SAML account.</p></div></div>\n<h2>LDAP Authentication</h2>\n<p>You can configure SonarQube authentication and authorization to an LDAP server (including LDAP Service of Active Directory) by configuring the correct values in <em>$SONARQUBE-HOME/conf/sonar.properties</em>.</p>\n<p>The main features are:</p>\n<ul>\n<li>Password checking against the external authentication engine.</li>\n<li>Automatic synchronization of usernames and emails.</li>\n<li>Automatic synchronization of relationships between users and groups (authorization).</li>\n<li>Ability to authenticate against both the external and the internal authentication systems. There is an automatic fallback on SonarQube internal system if the LDAP server is down.</li>\n<li>During the first authentication trial, if the user's password is correct, the SonarQube database is automatically populated with the new user. Each time a user logs into SonarQube, the username, the email and the groups this user belongs to that are refreshed in the SonarQube database. You can choose to have group membership synchronized as well, but this is not the default.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th> </th>\n<th>Apache DS</th>\n<th>OpenLDAP</th>\n<th>Open DS</th>\n<th>Active Directory</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Anonymous</td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td> </td>\n</tr>\n<tr>\n<td>Simple</td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td>LDAPS</td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td>DIGEST-MD5</td>\n<td><img src=\"/images/check.svg\"></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td>CRAM-MD5</td>\n<td><img src=\"/images/check.svg\"></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td>GSSAPI</td>\n<td><img src=\"/images/check.svg\"></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/images/check.svg\"> = successfully tested</p>\n<h3>Setup</h3>\n<ol>\n<li>Configure LDAP by editing <em>$SONARQUBE-HOME/conf/sonar.properties</em> (see table below)</li>\n<li>\n<p>Restart the SonarQube server and check the log file for:</p>\n<pre><code>INFO org.sonar.INFO Security realm: LDAP ...\nINFO o.s.p.l.LdapContextFactory Test LDAP connection: OK\n</code></pre>\n</li>\n<li>Log into SonarQube</li>\n<li>On logout users will be presented a login page (<em>/sessions/login</em>), where they can choose to login as technical user or a domain user by passing appropriate credentials</li>\n</ol>\n<p>From SonarScanners, we recommend using <a href=\"/SonarQubeChineseDoc8.1/instance-administration/security/\">local technical users</a> for authentication against SonarQube Server.</p>\n<p><strong>General Configuration</strong></p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default value</th>\n<th>Required</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.security.realm</code></td>\n<td>Set this to <code>LDAP</code> authenticate first against the external sytem. If the external system is not reachable or if the user is not defined in the external system, authentication will be performed against SonarQube's internal database.</td>\n<td>none</td>\n<td>Yes</td>\n<td><code>LDAP</code> (only possible value)</td>\n</tr>\n<tr>\n<td><code>sonar.authenticator.downcase</code></td>\n<td>Set to true when connecting to a LDAP server using a case-insensitive setup.</td>\n<td><code>false</code></td>\n<td>No</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ldap.url</code></td>\n<td>URL of the LDAP server. If you are using ldaps, you should install the server certificate into the Java truststore.</td>\n<td>none</td>\n<td>Yes</td>\n<td><code>ldap://localhost:10389</code></td>\n</tr>\n<tr>\n<td><code>ldap.bindDn</code></td>\n<td>The username of an LDAP user to connect (or bind) with. Leave this blank for anonymous access to the LDAP directory.</td>\n<td>none</td>\n<td>No</td>\n<td><code>cn=sonar,ou=users,o=mycompany</code></td>\n</tr>\n<tr>\n<td><code>ldap.bindPassword</code></td>\n<td>The password of the user to connect with. Leave this blank for anonymous access to the LDAP directory.</td>\n<td>none</td>\n<td>No</td>\n<td><code>secret</code></td>\n</tr>\n<tr>\n<td><code>ldap.authentication</code></td>\n<td>Possible values: <code>simple</code>, <code>CRAM-MD5</code>, <code>DIGEST-MD5</code>, <code>GSSAPI</code>. See <a href=\"http://java.sun.com/products/jndi/tutorial/ldap/security/auth.html\">the tutorial on authentication mechanisms</a></td>\n<td><code>simple</code></td>\n<td>No</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ldap.realm</code></td>\n<td>See <a href=\"http://java.sun.com/products/jndi/tutorial/ldap/security/digest.html\">Digest-MD5 Authentication</a>, <a href=\"http://java.sun.com/products/jndi/tutorial/ldap/security/crammd5.html\">CRAM-MD5 Authentication</a></td>\n<td>none</td>\n<td>No</td>\n<td>example.org</td>\n</tr>\n<tr>\n<td><code>ldap.contextFactoryClass</code></td>\n<td>Context factory class.</td>\n<td><code>com.sun.jndi.ldap.LdapCtxFactory</code></td>\n<td>No</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ldap.StartTLS</code></td>\n<td>Enable use of <code>StartTLS</code></td>\n<td><code>false</code></td>\n<td>No</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ldap.followReferrals</code></td>\n<td>Follow referrals or not. See <a href=\"http://docs.oracle.com/javase/jndi/tutorial/ldap/referral/jndi.html\">Referrals in the JNDI</a></td>\n<td><code>true</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><strong>User Mapping</strong></p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default value</th>\n<th>Required</th>\n<th>Example for Active Directory</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ldap.user.baseDn</code></td>\n<td>Distinguished Name (DN) of the root node in LDAP from which to search for users.</td>\n<td>None</td>\n<td>Yes</td>\n<td><code>cn=users,dc=example,dc=org</code></td>\n</tr>\n<tr>\n<td><code>ldap.user.request</code></td>\n<td>LDAP user request.</td>\n<td><code>(&#x26;(objectClass=inetOrgPerson)(uid={login}))</code></td>\n<td>No</td>\n<td><code>(&#x26;(objectClass=user)(sAMAccountName={login}))</code></td>\n</tr>\n<tr>\n<td><code>ldap.user.realNameAttribute</code></td>\n<td>Attribute in LDAP defining the user’s real name.</td>\n<td><code>cn</code></td>\n<td>No</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ldap.user.emailAttribute</code></td>\n<td>Attribute in LDAP defining the user’s email.</td>\n<td><code>mail</code></td>\n<td>No</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><strong>Group Mapping</strong>\nOnly groups (not roles) and static groups (not dynamic groups) are supported. Click <a href=\"http://identitycontrol.blogspot.fr/2007/07/static-vs-dynamic-ldap-groups.html\">here</a> for more information.</p>\n<p>For the delegation of authorization, <a href=\"/SonarQubeChineseDoc8.1/instance-administration/security/\">groups must be first defined in SonarQube</a>. Then, the following properties must be defined to allow SonarQube to automatically synchronize the relationships between users and groups.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default value</th>\n<th>Required</th>\n<th>Example for Active Directory</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ldap.group.baseDn</code></td>\n<td>Distinguished Name (DN) of the root node in LDAP from which to search for groups.</td>\n<td>none</td>\n<td>No</td>\n<td><code>cn=groups,dc=example,dc=org</code></td>\n</tr>\n<tr>\n<td><code>ldap.group.request</code></td>\n<td>LDAP group request.</td>\n<td><code>(&#x26;(objectClass=groupOfUniqueNames)(uniqueMember={dn}))</code></td>\n<td>No</td>\n<td><code>(&#x26;(objectClass=group)(member={dn}))</code></td>\n</tr>\n<tr>\n<td><code>ldap.group.idAttribute</code></td>\n<td>Property used to specifiy the attribute to be used for returning the list of user groups in the compatibility mode.</td>\n<td><code>cn</code></td>\n<td>No</td>\n<td><code>sAMAccountName</code></td>\n</tr>\n</tbody>\n</table>\n<h3>Sample Configuration</h3>\n<pre><code># LDAP configuration\n# General Configuration\nsonar.security.realm=LDAP\nldap.url=ldap://myserver.mycompany.com\nldap.bindDn=my_bind_dn\nldap.bindPassword=my_bind_password\n  \n# User Configuration\nldap.user.baseDn=ou=Users,dc=mycompany,dc=com\nldap.user.request=(&#x26;(objectClass=inetOrgPerson)(uid={login}))\nldap.user.realNameAttribute=cn\nldap.user.emailAttribute=mail\n \n# Group Configuration\nldap.group.baseDn=ou=Groups,dc=sonarsource,dc=com\nldap.group.request=(&#x26;(objectClass=posixGroup)(memberUid={uid}))\n</code></pre>\n<h2>Advanced LDAP Topics</h2>\n<h3>Authentication Methods</h3>\n<ul>\n<li><strong><code>Anonymous</code></strong> -  Used when only read-only access to non-protected entries and attributes is needed when binding to the LDAP server.</li>\n<li><strong><code>Simple</code></strong> Simple authentication is not recommended for production deployments not using the ldaps secure protocol since it sends a cleartext password over the network.</li>\n<li><strong><code>CRAM-MD5</code></strong> - The Challenge-Response Authentication Method (CRAM) based on the HMAC-MD5 MAC algorithm (<a href=\"http://tools.ietf.org/html/rfc2195\">RFC 2195</a>).</li>\n<li><strong><code>DIGEST-MD5</code></strong> - This is an improvement on the CRAM-MD5 authentication method (<a href=\"http://www.ietf.org/rfc/rfc2831.txt\">RFC 2831</a>).</li>\n<li><strong><code>GSSAPI</code></strong> - GSS-API is Generic Security Service API (<a href=\"http://www.ietf.org/rfc/rfc2744.txt\">RFC 2744</a>). One of the most popular security services available for GSS-API is the Kerberos v5, used in Microsoft's Windows 2000 platform.</li>\n</ul>\n<p>For a full discussion of LDAP authentication approaches, see <a href=\"http://www.ietf.org/rfc/rfc2829.txt\">RFC 2829</a> and <a href=\"http://www.ietf.org/rfc/rfc2251.txt\">RFC 2251</a>.</p>\n<h3>Multiple Servers</h3>\n<p>To configure multiple servers:</p>\n<pre><code># List the different servers\nldap.servers=server1,server2\n  \n# Configure server1\nldap.server1.url=ldap://server1:1389\nldap.server1.user.baseDn=dc=dept1,dc=com\n...\n \n# Configure server2\nldap.server2.url=ldap://server2:1389\nldap.server2.user.baseDn=dc=dept2,dc=com\n...\n</code></pre>\n<p>Authentication will be tried on each server, in the order they are listed in the configurations, until one succeeds. User/Group mapping will be performed against the first server on which the user is found.</p>\n<p>Note that all the LDAP servers must be available while (re)starting the SonarQube server.</p>\n<h3>Troubleshooting</h3>\n<ul>\n<li>\n<p>Detailed connection logs (and potential error codes received from LDAP server) are output to SonarQube's <em>$SONARQUBE</em>HOME/logs/web.log_, when logging is in <code>DEBUG</code> mode.</p>\n</li>\n<li>\n<p>Time out when running SonarQube analysis using LDAP\nJava parameters are documented here: <a href=\"http://docs.oracle.com/javase/jndi/tutorial/ldap/connect/config.html\">http://docs.oracle.com/javase/jndi/tutorial/ldap/connect/config.html</a>. Such parameters can be set in <code>sonar.web.javaAdditionalOpts</code> in <em>$SONARQUBE-HOME/conf/sonar.properties</em>.</p>\n</li>\n</ul>","fields":{"slug":"/instance-administration/delegated-auth/"}}},{"node":{"html":"<p>When you run a new analysis of your project or its branches or pull requests(PRs), some data that was previously available is cleaned out of the database. For example the source code of the previous analysis, measures at directory and file levels, and so on are automatically removed at the end of a new analysis. Additionally, some old analysis snapshots, PR analyses, and branches are also removed.</p>\n<p>Why? Well, it's useful to analyze a project frequently to see how its quality evolves. It is also useful to be able to see the trends over weeks, months, years. But when you look back in time, you don't really need the same level of detail as you do for the project's current state. To save space and to improve overall performance, the Database Cleaner deletes some rows in the database. Here is its default configuration:</p>\n<ul>\n<li>\n<p>For each project:</p>\n<ul>\n<li>only one snapshot per day is kept after 1 day. Snapshots marked by an event are not deleted.</li>\n<li>only one snapshot per week is kept after 1 month. Snapshots marked by an event are not deleted.</li>\n<li>only one snapshot per month is kept after 1 year. Snapshots marked by an event are not deleted.</li>\n<li>only snapshots with version events are kept after 2 years. Snapshots without events or with only other event types are deleted.</li>\n<li><strong>all snapshots</strong> older than 5 years are deleted, including snapshots marked by an event. </li>\n</ul>\n</li>\n<li>All closed issues more than 30 days old are deleted</li>\n<li>History at package/directory level is removed</li>\n</ul>\n<p>These settings can be changed at <a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings\">Administration > General > Database Cleaner</a>.</p>","fields":{"slug":"/instance-administration/housekeeping/"}}},{"node":{"html":"<p><em>The ability to manage Compute Engine performance is available as part of <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">Enterprise Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em></p>\n<h3>How can I get analyses through the Compute Engine Queue faster?</h3>\n<p>If analyses are taking too long to process, it may be that you need to increase the number of Compute Engine (CE) workers (<strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/background_tasks\">Administration > Projects > Background Tasks > Number of Workers</a></strong>). </p>\n<p>There are two cases to consider:</p>\n<ol>\n<li>slowness comes from the fact that the queue is often full of pending tasks</li>\n<li>individual tasks take a long time to process</li>\n</ol>\n<p>In the first case, increasing the number of workers could help. The second case should be carefully evaluated. In either case, when considering increasing the number of CE workers, two questions should be answered.</p>\n<ul>\n<li>does my infrastructure allow me to increase the number of workers?</li>\n<li>to what extent should I increase the number of workers? I.E. What number should I configure?</li>\n</ul>\n<p>Increasing the number of workers will increase the stress on the resources consumed by the Compute Engine. Those resources are:</p>\n<ul>\n<li>the DB</li>\n<li>disk I/O</li>\n<li>network</li>\n<li>heap</li>\n<li>CPU</li>\n</ul>\n<p>Of those, only the last two are internal to the CE.</p>\n<p>If slowness comes from any of the external resources (DB, disk I/O, network), then increasing the number of workers could actually slow the processing of individual reports (think of two people trying to go through a door at  the same time). However, if your slowness is caused by large individual analysis reports hogging the CE worker for extended periods of time, then enabling parallel processing by adding another worker could help. But if you do, you need to take a look at the internal resources.</p>\n<p>CE workers are not CPU-intensive and memory use depends entirely on the project that was analyzed. Some need a lot of memory, others don't. But with multiple CE workers, you should increase CE heap size by a multiple of the number of workers. The same logic applies to CPU: if running with one worker consumes up to Y% of CPU, then you should plan for Z workers requiring Y*Z% of CPU.</p>\n<p>To accurately diagnose your situation, monitor network latency, the I/O of the SonarQube instance, and the database CPU and memory usage to evaluate whether slowness is mainly/mostly/only related to external resources. </p>","fields":{"slug":"/instance-administration/compute-engine-performance/"}}},{"node":{"html":"<p><em>GitHub Enterprise Integration is available as part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em></p>\n<p>You can add Pull Request decoration to Checks in GitHub Enterprise by creating a GitHub Application, configuring your SonarQube instance, and installing the app in your organizations.</p>\n<h2>Creating a GitHub Application</h2>\n<p>Click <a href=\"https://developer.github.com/apps/building-github-apps/creating-a-github-app/\">here</a> for general instructions on creating a GitHub App.</p>\n<p>From the \"Register new GitHub App\" page, follow these steps to create your GitHub App for PR decoration:</p>\n<ol>\n<li>\n<p>Under <strong>GitHub App name</strong>, give your app a name (such as SonarQubePRChecks).</p>\n</li>\n<li>\n<p>GitHub requires a <strong>Homepage URL</strong> and a <strong>Webhook URL</strong>. These values aren't important for Pull Request decoration, so you can use any URL (such as <a href=\"https://www.sonarqube.org/\">https://www.sonarqube.org/</a>).</p>\n</li>\n<li>\n<p>Grant access for the following <strong>Permissions</strong></p>\n<table>\n<thead>\n<tr>\n<th>Permission</th>\n<th>Access</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Checks</td>\n<td>Read &#x26; write</td>\n</tr>\n<tr>\n<td>Repository metadata</td>\n<td>Read-only</td>\n</tr>\n<tr>\n<td>Pull Requests</td>\n<td>Read-only</td>\n</tr>\n<tr>\n<td>Commit statuses</td>\n<td>Read-only</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>Under \"Where can this GitHub App be installed?,\" select <strong>Any account</strong>.</p>\n</li>\n<li>\n<p>Click <strong>Create GitHub App</strong>.</p>\n</li>\n</ol>\n<h2>Generating and Setting Your Private Key</h2>\n<p>After creating your app, you'll be prompted with a link to \"generate a private key\" at the top of the page. Click the link to download your <code>.pem</code> private key file. You can also download your <code>.pem</code> file by scrolling down to \"Private Key\" and clicking <strong>Generate Private Key</strong>.</p>\n<p>After downloading your <code>.pem</code> file, you'll need to set your private key in SonarQube global settings by copying and pasting the content of your private key file into the text box at <a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=pull_request/\"><strong>Administration > Pull Requests > GitHub > GitHub App private key</strong></a>.</p>\n<h2>Configuring Your SonarQube Instance</h2>\n<p>You'll need to configure the following global settings in SonarQube.</p>\n<h3>Setting Your GitHub Enterprise Instance API URL</h3>\n<p>Enter your GitHub Enterprise Instance API URL in the text box at <a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=pull_request/\"><strong>Administration > Pull Requests > GitHub > GitHub API URL</strong></a>.\nYour GitHub Enterprise instance API URL is formatted as follows: <code>https://&#x3C;your-github-enterprise-address>/api/v3</code></p>\n<h3>Setting Your App Name and ID</h3>\n<ol>\n<li>Enter your app name in the text box at <a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=pull_request/\"><strong>Administration > Pull Requests > GitHub > GitHub App name</strong></a>.</li>\n<li>Enter your app ID in the text box at <a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=pull_request/\"><strong>Administration > Pull Requests > GitHub > GitHub App ID</strong></a>. You can find your GitHub App ID on the app's settings page at <code>https://&#x3C;your-github-enterprise>/settings/apps/&#x3C;appname></code>.</li>\n</ol>\n<h2>Installing Your App</h2>\n<p>To install your app in your organizations:</p>\n<ol>\n<li>\n<p>Go to your GitHub App URL.</p>\n<ul>\n<li>GitHub App URLs are specific to your GitHub Enterprise Address and your app name and are formatted as follows: <code>https://&#x3C;your-github-enterprise-address>/github-apps/&#x3C;YourAppName></code>.</li>\n<li>For example, if your GitHub Enterprise address is <code>github-enterprise-1.yoursite.com</code> and your app name is <code>SonarQubePRChecks</code>, your GitHub App URL will be <code>https://github-enterprise-1.yoursite.com/github-apps/SonarQubePRChecks</code>.</li>\n</ul>\n</li>\n<li>From your GitHub App page, click the <strong>Install</strong> or <strong>Configure</strong> button.</li>\n<li>Choose the organization where you want to install your app from the list.</li>\n<li>Click the <strong>Install</strong> button.</li>\n</ol>","fields":{"slug":"/instance-administration/github-application/"}}},{"node":{"html":"<h2>Home logo</h2>\n<p>You can set your own \"home\" logo in <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings\">Administration > General > Look &#x26; Feel</a></strong>. Simply provide an image URL and width. Ideally, the width will scale the height to 30 pixels. This logo will be used in both the menu bar and on the About page.</p>\n<h2>Content of the \"About\" page</h2>\n<p>You also have the ability to add content to the About page, which anonymous users land on by default: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings\">Administration > General > Look &#x26; Feel</a></strong>.</p>\n<h2>Gravatar</h2>\n<p>Gravatar support is enabled by default, using gravatar.com. You can configure a different server or disable the feature altogether. When enabled, gravatars show up next to most uses of the user name.</p>","fields":{"slug":"/instance-administration/look-and-feel/"}}},{"node":{"html":"<p>At the end of each analysis, notifications are computed for each subscribed user. Then, asynchronously, these notifications are sent via email.</p>\n<p>To set the frequency with which the notification queue is processed, set <code>the sonar.notifications.delay</code> property (in seconds) in <em>$SONARQUBE-HOME/conf/sonar.properties</em>. The server must be restarted for the new value to be taken into account.</p>\n<h2>Who gets notifications</h2>\n<p>Only users who subscribe themselves will get notifications. With only one exception, there is no admin functionality to proactively subscribe another user. If you believe a user should be receiving notifications, then it's time to practice the gentle art of persuasion.</p>\n<h3>The exception</h3>\n<p>Notifications will automatically (without user opt-in) be sent to users with Quality Profile Administration rights when built-in quality profiles are updated. These updates can only happen via an upgrade of the relevant analyzer. This type of notification is on by default, and can be toggled globally in <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings/\">Administration > General Settings > General</a></strong>.</p>\n<h2>Email Configuration</h2>\n<p>To configure the email server, go to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings\">Administration > General Settings > Email</a></strong>.</p>\n<p>Check also the Server base URL property at Administration > General Settings > General to make sure that links in those notification emails will redirect to the right SonarQube server URL.</p>","fields":{"slug":"/instance-administration/notifications/"}}},{"node":{"html":"<p><em>The License Manager is accessible from <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/extension/license/app\">Administration > Configuration> License Manager</a></strong> as part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em></p>\n<h2>License Manager</h2>\n<p>The License Manager enables retrieval of your Server ID (required for obtaining a License Key) and configuration of your SonarSource-provided License key.</p>\n<h3>Retrieving Server ID</h3>\n<p>The Server ID is always available on the License Manager page, as well as in the System section of the System Info .</p>\n<p>Note that if the database connection string is updated, the server ID will be re-generated and a new license will be needed. When it is generated, the Server ID is unique. The same Server ID will never be generated twice, even on the same SonarQube instance.</p>\n<h3>Setting a License</h3>\n<p>Using the \"Set new license\" button, you can set a new License to enable or disable features in SonarQube, or simply to update your license.</p>\n<h3>LOCs Consumption</h3>\n<p>The gauge indicates the quantity of LOCs you are currently scanning and allows you to check if you are near the limit and if you need to purchase additional LOCs.</p>\n<h3>Global admin notifications</h3>\n<p>The License Manager comes with two notification mechanisms built-in (notifications are sent to Global Admins):</p>\n<ul>\n<li>when the license is about to expire–sent two months before expiration, with a reminder one month before</li>\n<li>when the configurable LOC threshold is exceeded–this threshold can be modified via the indicator present on the LOC gauge</li>\n<li>the background job, that checks threshold and decide if a notification should be sent, runs at server startup, then every 24 hours</li>\n<li>the background job does not check validity of smtp server settings and if the emails addresses are set up for global administrators, \ntherefore for notifications to be received, these settings needs to be correctly configured before the LOC threshold is reached or exceeded</li>\n</ul>\n<h3>Features Included section</h3>\n<p>This sections of the License Manager page lists the commercial features that are enabled by the license currently set.</p>\n<h2>Support</h2>\n<h3>Access to SonarSource Support</h3>\n<p>If your License entitles you to SonarSource Support, A <strong>Support</strong> tab will appear at <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/extension/license/support\">Administration > Support</a></strong> to guide you through interactions with SonarSource Support.</p>\n<p>This page also allows you to collect the Support Information File of your instance. Make sure to provide this file for any interaction with SonarSource Support.</p>\n<p><img src=\"/images/support-information-file.png\" alt=\"Support Information File.\"></p>","fields":{"slug":"/instance-administration/license-manager/"}}},{"node":{"html":"<p>Monitoring your SonarQube instance is key to keeping it healthy and having happy users.</p>\n<p>As a start, you can use this Web API to get an overview of the health of your SonarQube installation:</p>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/api/system/health\">api/system/health</a></li>\n</ul>\n<h2>Java Process Memory</h2>\n<p>The SonarQube application server consists of three main Java processes:</p>\n<ul>\n<li>Web (including embedded web server)</li>\n<li>ElasticSearch</li>\n<li>Compute Engine</li>\n</ul>\n<p>Each of these Java processes has its own memory settings that can be configured in the <em>$SONARQUBE-HOME/conf/sonar.properties</em> file. The default memory settings that ship with SonarQube are fine for most instances. If you are supporting a large SonarQube instance (more than 100 users or more than 5,000,000 lines of code) or an instance that is part of your Continuous Integration pipeline, you should monitor the memory and CPU usage of all three key Java processes on your instance, along with overall disk space. Monitoring will allow you to see if any of the processes is running short of resources and take action ahead of resource shortages. There are a large number of monitoring tools available, both open source and commercial, to help you with this task. SonarSource does not recommend or endorse any particular tool.</p>\n<h2>Memory settings</h2>\n<p>You may need to increase your memory settings if you see the following symptoms:</p>\n<ul>\n<li>Your monitoring tools show one or more of the SonarQube processes is reaching its memory limit</li>\n<li>Any of the SonarQube processes crashes and/or generates an out-of-memory error in the sonar.log file</li>\n<li>A SonarQube background task fails with an out-of-memory error in the background task log</li>\n<li>The size of the Issues index of your ElasticSearch instance (visible in the System Info) is greater than or equal to the memory allocated to the ElasticSearch Java process</li>\n</ul>\n<p>You can increase the maximum memory allocated to the appropriate process by increasing the  -Xmx memory setting for the corresponding Java process in your <em>$SONARQUBE-HOME/conf/sonar.properties</em> file:</p>\n<ul>\n<li>For Web: sonar.web.javaOpts</li>\n<li>For ElasticSearch: sonar.search.javaOpts</li>\n<li>For Compute Engine: sonar.ce.javaOpts</li>\n</ul>\n<p>The -Xmx parameter accepts numbers in both megabytes (e.g. -Xmx2048m) and gigabytes (e.g. -Xmx2G)</p>\n<p>For detailed information on JMX Beans exposed by SonarQube and more ElasticSearch monitoring options, please visit our Monitoring Details page.</p>\n<h2>Exposed JMX MBeans</h2>\n<p>The SonarQube Server offers visibility about what happens internally through the exposure of JMX MBeans.</p>\n<p>In addition to the classical Java MBeans providing information about the ClassLoader, OS, Memory and Threads you have access to four more MBeans in the SonarQube Server:</p>\n<ul>\n<li>ComputeEngine</li>\n<li>Database</li>\n<li>SonarQube</li>\n</ul>\n<p>All these MBeans are read-only. It's not possible to modify or reset their values in real time.</p>\n<h2>ComputeEngineTasks MBean</h2>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>ComputeEngineTasks MBean</h2><table>\n<thead>\n<tr>\n<th>Attribute Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ProcessingTime</td>\n<td>Measure the time (in ms) spent to process Background Tasks since the last restart of SonarQube. Its value will always increase and will be reset by a restart of SonarQube.  This measure is very powerful when combined with SuccessCount and ErrorCount measures to get the average time to handle a Background Task, or when used to understand how much time the SonarQube Server is spending during a day to handle Background Tasks. It gives you an indication of the load on your server.</td>\n</tr>\n<tr>\n<td>ErrorCount</td>\n<td>Number of Background Tasks which failed since the last restart of SonarQube</td>\n</tr>\n<tr>\n<td>PendingCount</td>\n<td>Number of Background Tasks waiting to be processed since the last restart of SonarQube</td>\n</tr>\n<tr>\n<td>InProgressCount</td>\n<td>Number of Background Tasks currently under processing. Its value is either 1 or 0, since SonarQube can process only one task at a time.</td>\n</tr>\n<tr>\n<td>SuccessCount</td>\n<td>Number of Background Tasks successfully processed since the last restart of SonarQube</td>\n</tr>\n<tr>\n<td>WorkerCount</td>\n<td>Number of Background Tasks that can be processed at the same time</td>\n</tr>\n<tr>\n<td>PendingTime</td>\n<td>Pending time (in ms) of the oldest Background Task waiting to be processed. This measure, together with PendingCount, helps you know if analyses are stacking and taking too long to start processing. This helps you evaluate if it might be worth configuring additional Compute Engine workers (Enterprise Edition) or additional nodes (Data Center Edition) to improve SonarQube performance.</td>\n</tr>\n</tbody>\n</table><p>Note:</p><ul>\n<li>the total number of Background Tasks handled since the last restart of SonarQube is equal to SuccessCount + ErrorCount</li>\n<li>these values are reset to their default values by restarting SonarQube</li>\n</ul></div></div>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>Database MBean</h2><h3>Same attributes are available for both ComputeEngineServer and WebServer.</h3><table>\n<thead>\n<tr>\n<th>Attribute Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MigrationStatus</td>\n<td>Possible values are: UP<em>TO</em>DATE, REQUIRES<em>UPGRADE, REQUIRES</em>DOWNGRADE, FRESH_INSTALL (only available for WebServer).</td>\n</tr>\n<tr>\n<td>PoolActiveConnections</td>\n<td>Number of active database connections</td>\n</tr>\n<tr>\n<td>PoolIdleConnections</td>\n<td>Number of database connections waiting to be used</td>\n</tr>\n<tr>\n<td>PoolInitialSize</td>\n<td>Initial size of the database connections pool.</td>\n</tr>\n<tr>\n<td>PoolMaxActiveConnections</td>\n<td>Maximum number of active database connections</td>\n</tr>\n<tr>\n<td>PoolMaxIdleConnections</td>\n<td>Maximum number of database connections waiting to be used</td>\n</tr>\n<tr>\n<td>PoolMaxWaitMillis</td>\n<td>In milliseconds</td>\n</tr>\n<tr>\n<td>PoolRemoveAbandoned</td>\n<td>Possible values : true, false</td>\n</tr>\n<tr>\n<td>PoolRemoveAbandonedTimeoutSeconds</td>\n<td>In Seconds</td>\n</tr>\n</tbody>\n</table></div></div>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>SonarQube MBean</h2><table>\n<thead>\n<tr>\n<th>Attribute Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LogLevel</td>\n<td>Log Level: INFO, DEBUG, TRACE</td>\n</tr>\n<tr>\n<td>ServerId</td>\n<td>SonarQube Server ID</td>\n</tr>\n<tr>\n<td>Version</td>\n<td>SonarQube Version</td>\n</tr>\n</tbody>\n</table></div></div>\n<h2>How do I Activate JMX?</h2>\n<h3>Local Access</h3>\n<p>There is nothing to activate to view SonarQube MBeans if your tool is running on the same server as the SonarQube Server.</p>\n<h3>Remote Access</h3>\n<p>Here are examples of configuration to activate remote access to JMX MBeans.</p>\n<p>For the WebServer:</p>\n<pre><code># JMX WEB - 10443/10444\nsonar.web.javaAdditionalOpts=-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.port=10443 -Dcom.sun.management.jmxremote.rmi.port=10444 -Dcom.sun.management.jmxremote.password.file=/opt/sonarsource/sonar/conf/jmxremote.password -Dcom.sun.management.jmxremote.access.file=/opt/sonarsource/sonar/conf/jmxremote.access\n</code></pre>\n<p>For the ComputeEngine:</p>\n<p>There is no specific javaAdditionalOpts entry, simply amend the sonar.ce.javaOpts one.</p>\n<p>Example of <code>jmxremote.access</code>:</p>\n<pre><code>#\n# JMX Access Control file\n#\nreader readonly\nadmin  readwrite \\\n    create javax.management.monitor.*,javax.management.timer.*,com.sun.management.*,com.oracle.jrockit.* \\\n    unregister\n</code></pre>\n<p>Example of <code>jmxremote.password</code>:</p>\n<pre><code>#\n# JMX Access Password file\n#\nreader readerpassword\nadmin  adminpassword\n</code></pre>\n<p>Note: on <code>jmxremote.password</code>, you should apply <code>chmod 600</code> or <code>400</code> for security reasons.</p>","fields":{"slug":"/instance-administration/monitoring/"}}},{"node":{"html":"<p><img src=\"https://update.sonarsource.org/plugins/onde-sonar-16.png\" alt=\"(Supported by SonarSource)\"> = Supported by SonarSource<br>\n<img src=\"https://update.sonarsource.org/plugins/error.png\" alt=\"(not compatible)\"> = Not compatible  </p>\n<iframe src=\"https://update.sonarsource.org/plugins/compatibility-matrix.html\" height=\"3100\">Your browser does not support iframes.</iframe>","fields":{"slug":"/instance-administration/plugin-version-matrix/"}}},{"node":{"html":"<p>Administrators can access the Marketplace via <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/marketplace\">Administration > Marketplace</a></strong>. The Marketplace is the place for keeping the pieces of the SonarQube platform up to date. It lets you:</p>\n<p>See</p>\n<ul>\n<li>The currently installed SonarQube Edition</li>\n<li>Which plugins are installed</li>\n<li>Whether plugin updates are available</li>\n<li>Which other plugins are compatible with your version of SonarQube</li>\n</ul>\n<p>Discover</p>\n<ul>\n<li>Which other Editions are available, to enable more features</li>\n</ul>\n<p>Install</p>\n<ul>\n<li>New plugins</li>\n<li>Plugin updates</li>\n</ul>\n<p>To view/install plugin updates, your SonarQube server needs internet access. Installations require the platform to be restarted before they take effect.</p>\n<h2>Pending Operations</h2>\n<p>When you perform an action in the Markplace (install, update or uninstall a plugin), a yellow banner appears at the top of the page showing pending operations that will be executed once SonarQube is restarted. Pending operations can be canceled until the server is restarted.</p>\n<h2>Restart SonarQube</h2>\n<p>Restarting SonarQube can be done manually from the command line by running <code>sonar.sh restart</code> or directly from the UI:</p>\n<ul>\n<li>in the Update Center when you have Pending Changes, the restart button will be displayed in the yellow banner (see Pending Operations)</li>\n<li>in the System Info page at any time</li>\n</ul>\n<h2>Manual Updates</h2>\n<p>If your server has no access to the internet, you won't be able to rely on the Marketplace for plugins, and will have to handle plugin installations and upgrades manually.</p>\n<p>To see what plugins are available and which version of a plugin is appropriate for your server, use the <a href=\"/SonarQubeChineseDoc8.1/instance-administration/plugin-version-matrix/\">plugin version matrix</a>, which is kept up to date with current plugin availability and compatibility.</p>\n<p>To install a plugin, simply download it using the manual download link on the plugin documentation page, place it in <em>$SONARQUBE-HOME/extensions/downloads</em>, and restart the server.</p>\n<h2>Which URLs does the Marketplace connect to?</h2>\n<p>The SonarQube Marketplace connects to <a href=\"https://update.sonarsource.org/\">https://update.sonarsource.org/</a> to get the list of plugins. Most of the referenced plugins are downloaded from:</p>\n<ul>\n<li><a href=\"https://binaries.sonarsource.com/\">https://binaries.sonarsource.com/</a></li>\n<li><a href=\"https://github.com/\">https://github.com/</a></li>\n</ul>\n<h2>Using the Marketplace behind a Proxy</h2>\n<p>Marketplace uses HTTP(S) connections to external servers to provide these services. If SonarQube is located behind a proxy, additional information must be provided in the <em>$SONARQUBE-HOME/conf/sonar.properties</em> configuration file:</p>\n<pre><code>http.proxyHost=&#x3C;your.proxy.host>\nhttp.proxyPort=&#x3C;yout.proxy.port>\n\n#If proxy authentication is required\nhttp.proxyUser=&#x3C;your.proxy.user>\nhttp.proxyPassword=&#x3C;your.proxy.password> \n</code></pre>\n<p>Note: the same properties can be used in the 'https.' form for HTTPS connections.</p>","fields":{"slug":"/instance-administration/marketplace/"}}},{"node":{"html":"<p><em>Project Move is available as part of <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">Enterprise Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em></p>\n<p>Project Move allows you to export a project from one SonarQube instance and import it into another, identically configured SonarQube instance. To use Project Move, you must have the Administer permission on the project in the source instance, and access to the file systems of both instances.</p>\n<h2>When to Use \"Project Move\"</h2>\n<p>In the following cases:</p>\n<ul>\n<li>you want to create a central SonarQube instance at enterprise level and you want to keep the history created on N instances used previously at the team level</li>\n<li>your company is acquiring another company that already has a central SonarQube instance</li>\n<li>an application is transferred from one team to another in a large company and that company has several SonarQube instances</li>\n</ul>\n<h2>Prerequisites</h2>\n<p>In order to be able to export and then load your Project's data, the two SonarQube instances must have:</p>\n<ul>\n<li>the exact same version</li>\n<li>the same plugins with the same versions</li>\n<li>the same custom metrics</li>\n<li>the same custom rules</li>\n</ul>\n<h2>How To Export</h2>\n<p>On the source instance:</p>\n<ul>\n<li>reanalyze the project one last time to make sure it is populated with data corresponding to your current SonarQube installation</li>\n<li>navigate to the project and at the project level, choose <strong>Administration > Import / Export</strong></li>\n<li>click on the <strong>Export</strong> button to generate a zip file containing the settings and history of your Project (but not the source code). Note that if you need to change the Project's key, you must to do it before performing the export.</li>\n</ul>\n<p>A zip file containing all project data ex is generated in <em>$SONAR</em>SOURCE<em>HOME/data/governance/project</em>dumps/export/_ named <em>&#x3C;project</em>key>.zip_</p>\n<h2>How To Import</h2>\n<p>On the target instance:</p>\n<ul>\n<li>With a user having the \"Administer System\" and \"Create Projects\" permissions, go to <a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/projects_management/\"><strong>Administration > Projects > Management</strong></a> and <a href=\"/SonarQubeChineseDoc8.1/project-administration/project-existence/\">provision the project</a> using the same key the project had in the source instance.</li>\n<li>Configure the Project's permissions, and the Quality Profiles and Quality Gate associated to the Project</li>\n<li>Put the generated zip file into the directory <em>$SONAR_TARGET_HOME/data/governance/project_dumps/import</em></li>\n<li>Go to the Project's Home Page and choose <strong>Administration > Import / Export</strong></li>\n<li>Click on the Import button to start importing your data</li>\n<li>Source code is not included in the zip file. Once the import is finished, trigger an analysis to import source files into the new instance.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>If the import is successful, the zip file will automatically be deleted.</li>\n<li>It is not possible to import a Project that has been already analyzed on the target instance.</li>\n<li>Security reports in an imported project will be empty until analysis has run.</li>\n</ul>","fields":{"slug":"/instance-administration/project-move/"}}},{"node":{"html":"<h2>Overview</h2>\n<p>SonarQube comes with a number of global security features:</p>\n<ul>\n<li>on-board authentication and authorization mechanisms</li>\n<li>the ability to force users to authenticate before they can see any part of a SonarQube instance</li>\n<li>the ability to delegate to authentication (for more see <a href=\"/SonarQubeChineseDoc8.1/instance-administration/delegated-auth/\">Delegating Authentication</a>)</li>\n</ul>\n<p>Additionally, you can configure at a group or user level who can:</p>\n<ul>\n<li>see that a project even exists</li>\n<li>access a project's source code </li>\n<li>administer a project (set exclusion patterns, tune plugin configuration for that project, etc.)</li>\n<li>administer Quality Profiles, Quality Gates, and the SonarQube instance itself.</li>\n</ul>\n<p>Another aspect of security is the encryption of settings such as passwords. SonarQube provides a built-in mechanism to encrypt settings.</p>\n<h2>Authentication</h2>\n<p>The first question that should be answered when setting the security strategy for SonarQube is: Can anonymous users browse the SonarQube instance or is authentication be required? </p>\n<p>To force user authentication, log in as a system administrator, go to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=security\">Administration > Configuration > General Settings > Security</a></strong>, and set the <strong>Force user authentication</strong> property to true. </p>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>SonarQube does not support sharing email addresses across multiple users.</p></div></div>\n<h3>Authentication Mechanisms</h3>\n<p>Authentication can be managed through a number of mechanisms:</p>\n<ul>\n<li>Via the SonarQube built-in users/groups database</li>\n<li>Via external identity providers such as an LDAP server (including LDAP Service of Active Directory), GitHub etc. See the Authentication &#x26; Authorization section of the Plugin Library.</li>\n<li>Via HTTP headers</li>\n</ul>\n<h3>Technical Users</h3>\n<p>When you create a user in SonarQube's own database, it is considered local and will only be authenticated against SonarQube's own user/group database rather than against any external tool (LDAP, Active Directory, Crowd, etc.). By default <code>admin</code> is a local account.</p>\n<p>Similarly, all non-local accounts will be authenticated only against the external tool. </p>\n<p>An Administrator can manage tokens on a user's behalf via <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/users\">Administration > Security > Users</a></strong>. From here, click in the user's <strong>Tokens</strong> column to see the user's existing tokens, and either revoke existing tokens or generate new ones. Once established, a token is the only credential needed to run an analysis. Tokens should be passed as the value of the <code>sonar.login</code> property.</p>\n<h3>Default Admin Credentials</h3>\n<p>When installing SonarQube, a default user with Administer System permission is created automatically:</p>\n<ul>\n<li>Login: admin</li>\n<li>Password: admin</li>\n</ul>\n<h2>Reinstating Admin Access</h2>\n<p>If you changed and then lost the <code>admin</code> password, you can reset it using the following query:</p>\n<pre><code>update users set crypted_password = '$2a$12$uCkkXmhW5ThVK8mpBvnXOOJRLd64LJeHTeCkSuB3lfaR2N0AYBaSi', salt=null, hash_method='BCRYPT' where login = 'admin'\n</code></pre>\n<p>If you've deleted <code>admin</code> and subsequently locked out the other users with global administrative permissions, you'll need to re-grant <code>admin</code> to a user with the following query:</p>\n<pre><code>INSERT INTO user_roles(user_id, role, organization_uuid) \nVALUES ((select id from users where login='mylogin'), \nadmin', \n(select uuid from organizations where kee='default-organization'));\n</code></pre>\n<h2>Authorization</h2>\n<p>The way authorization is implemented in SonarQube is pretty standard. It is possible to create as many users and groups of users as needed. The users can then be attached (or not) to (multiple) groups. Groups and / or users are then given (multiple) permissions. The permissions grant access to projects, services and functionalities.</p>\n<p>To administer groups and users, choose <strong>Administration > Security</strong>, and use the sub-menu items.</p>\n<h3>User</h3>\n<p>Multiple integrations that allow the delegation of authentication are available (see the <a href=\"https://redirect.sonarsource.com/doc/plugin-library.html\">Plugin Library</a> and <a href=\"https://docs.sonarqube.org/display/PLUG/Other+Plugins\">Other Plugins</a>, but you can manually create and edit users at <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/users\">Settings > Security > Users</a></strong>. For manually-created users, login and password can be set at creation. Manually-created users can edit their passwords.</p>\n<p>During both user creation and edit, you can set an account's screen name, email address. User login and email address will be implicitly recognized by the Issue Assignment feature as SCM accounts if applicable, but you can set additional SCM accounts explicitly. </p>\n<h3>Group</h3>\n<p>A group is a set of users.</p>\n<p>To administer groups, go to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/groups\">Administration > Security > Groups</a></strong>.</p>\n<p>To edit the membership of a group, click the icon next to the membership total.</p>\n<p>Two groups have a special meaning:</p>\n<ul>\n<li><strong>Anyone</strong> is a group that exists in the system, but that cannot be managed. Every user belongs to this group, including Anonymous user.</li>\n<li><strong>sonar-users</strong> is the default group to which users are automatically added.</li>\n</ul>\n<h3>Global Permissions</h3>\n<p>To set global permissions, log in as a System administrator and go to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/permissions\">Administration > Security > Global Permissions</a></strong>. </p>\n<ul>\n<li><strong>Administer System</strong>: All administration functions for the instance: global configuration.</li>\n<li><strong>Administer Quality Profiles</strong>: Any action on quality profiles.</li>\n<li><strong>Administer Quality Gates</strong>: Any action on quality gates</li>\n<li><strong>Execute Analysis</strong>: Execute analyses (project, view, report, developer), and to get all settings required to perform the analysis, even the secured ones like the scm account password, and so on.</li>\n<li><strong>Create Projects</strong>: Initialize the structure of a new project before its first analysis. This permission is also required when doing the very first analysis of a project that has not already been created via the GUI. * **</li>\n<li><strong>Create Applications</strong>: Create a new Application. * **</li>\n<li><strong>Create Portfolios</strong>: Create a new Portfolio. * **</li>\n</ul>\n<p>* Users with any explicit create permission will see a \"+\" item in the top menu giving access to these functions. If these permissions are removed from global administrators, they will loose quick access to them via the \"+\" menu, <strong>but retain access to creation</strong> via the <strong>Administration</strong> menu.</p>\n<p>** Creating an item does not automatically grant rights to administer it. For that, see <em>Creators permission</em> below.</p>\n<h3>Project Permissions</h3>\n<p>Project permissions are available from the project-level Administration menu: <strong>Administration > Permissions</strong>.</p>\n<p>Project visibility may be toggled between public or private. Making a project private hides its source code and measures from the <code>Anyone</code> group. For both public and private projects, four different permissions can be set:</p>\n<ul>\n<li><strong>Administer Issues</strong>: Change the type and severity of issues, resolve issues as being \"Won't Fix\" or \"False Positive\" (users also need \"Browse\" permission).</li>\n<li><strong>Administer Security Hotspots</strong>: Change the status of a Security Hotspot.</li>\n<li><strong>Administer</strong>: Access project settings and perform administration tasks (users also need \"Browse\" permission).</li>\n<li><strong>Execute Analysis</strong>: Execute analyses (project, view, report, developer), and to get all settings required to perform the analysis, even the secured ones like the scm account password, the jira account password, and so on.</li>\n</ul>\n<p>Private projects have two additional permissions:</p>\n<ul>\n<li><strong>Browse</strong>: Access a project; browse its measures, issues, and Security Hotspots; perform some issue edits (confirm/resolve/reopen, assignment, comment); comment on or change the user assigned to a Security Hotspot.</li>\n<li><strong>See Source Code</strong>: View the project's source code.</li>\n</ul>\n<p>Note that permissions <em>are not</em> cumulative. For instance, if you want to be able to administer the project, you also have to be granted the Browse permission to be able to access the project (which is the default for Public project).</p>\n<p>You can either manually grant permissions for each project to some users and groups or apply permission templates to projects. </p>\n<h2>Permission Templates for Default Permissions</h2>\n<p>SonarQube ships with a default permissions template, which automatically grants specific permissions to certain groups when a project, portfolio, or application is created. It is possible to edit this template, and to create additional templates. A separate template can be set for each type of resource. Further, for projects you can have a template apply only to a subset of new projects using a project key regular expression (the template's <strong>Project Key Pattern</strong>). By default, every new project with a key that matches the supplied pattern will have template's permissions applied.</p>\n<p>Templates are empty immediately after creation. Clicking on the template name will take you to its permission editing interface.</p>\n<p>Templates are administered through <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/permission_templates\">Administration > Security > Permission Templates</a></strong>.</p>\n<h3>Creators permissions</h3>\n<p><strong>Creators</strong> is a special group that appears only in the permission template editing interface. Any permissions assigned to this group will at the time of project/portfolio/application creation be granted to the single user account used to create the project. This allows SonarQube administrators to let users autonomously create and administer their own projects.</p>\n<p>While templates can be applied after project creation, applying a template that includes \"Creators\" permissions to an existing project/portfolio/application will not grant the relevant permissions to the project's original creator because that association is not stored.</p>\n<h3>Reset project permissions to a template</h3>\n<p>To apply permission templates to projects go to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/projects_management\">Administration > Projects > Management</a></strong>. You can  either apply a template to a specific project using the project-specific <strong>Actions > Apply Permission Template</strong> option or use the Bulk Apply Permission Template to apply a template to all selected projects.</p>\n<p>Note that there is no relation between a project and a permission template, meaning that:</p>\n<ul>\n<li>the permissions of a project can be modified after a permission template has been applied to this project</li>\n<li>none of the project permissions is changed when a permission template is modified</li>\n</ul>\n<h2>Settings Encryption</h2>\n<p>Encryption is mostly used to remove clear passwords from settings (database or SCM credentials for instance). The implemented solution is based on a symetric key algorithm. The key point is that the secret key is stored in a secured file on disk. This file must owned by and readable only by the system account that runs the SonarQube server.</p>\n<p>The algorithm is AES 128 bits. Note that 256 bits cipher is not used because it's not supported by default on all Java Virtual Machines (<a href=\"https://confluence.terena.org/display/~visser/No+256+bit+ciphers+for+Java+apps\">see this article</a>).</p>\n<ol>\n<li><strong>Generate the secret key</strong><br>\nA unique secret key must be shared between all parts of the SonarQube infrastructure (server and analyzers). To generate it, go to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings/encryption\">Administration > Configuration > Encryption</a></strong> and click on Generate Secret Key.</li>\n<li>\n<p><strong>Store the secret key on the SonarQube server</strong>  </p>\n<ul>\n<li>Copy the generated secred key to a file on the machine hosting the SonarQube server. The default location is <em>~/.sonar/sonar-secret.txt</em>. If you want to store it somewhere else, set its path through the <code>sonar.secretKeyPath</code> property in <em>$SONARQUBE-HOME/conf/sonar.properties</em></li>\n<li>Restrict file permissions to the account running the SonarQube server (ownership and read-access only).</li>\n<li>Restart your SonarQube server</li>\n</ul>\n</li>\n<li><strong>Generate the encrypted values of your settings</strong><br>\nGo back to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings/encryption\">Administration > Configuration > Encryption</a></strong> and use the form that has been added to the interface to generated encrypted versions of your values.\n<img src=\"/images/encrypt-value.png\" alt=\"Encrypt values through the admin interface\"></li>\n<li>\n<p><strong>Use the encrypted values in your SonarQube server configuration</strong><br>\nSimply copy these encrypted values into <em>$SONARQUBE-HOME/conf/sonar.properties</em></p>\n<pre><code>sonar.jdbc.password={aes}CCGCFg4Xpm6r+PiJb1Swfg==  # Encrypted DB password\n...\nsonar.secretKeyPath=C:/path/to/my/secure/location/my_secret_key.txt\n</code></pre>\n</li>\n</ol>","fields":{"slug":"/instance-administration/security/"}}},{"node":{"html":"<h2>Overview</h2>\n<p><strong>Quality Profiles</strong> are a core component of SonarQube, since they are where you define sets of <a href=\"/SonarQubeChineseDoc8.1/user-guide/rules/\"><strong>Rules</strong></a> that when violated should raise issues on your codebase (example: Methods should not have a Cognitive Complexity higher than 15). Quality Profiles are defined for individual languages.</p>\n<p>To manage Quality Profiles, browse to the the <a href=\"/SonarQubeChineseDoc8.1/#sonarqube#/profiles\"><strong>Quality Profiles</strong></a> page  where you'll find Quality Profiles grouped by language.</p>\n<p>Ideally all of your projects will be measured with the same Quality Profiles, but that is not <em>always</em> practical. In some cases, you may find that:</p>\n<ul>\n<li>You have different technical requirements from one project to another (different rules might apply to a threaded/non-threaded Java application)</li>\n<li>You want to ensure stronger requirements for some of your projects (internal frameworks, for example)</li>\n</ul>\n<p>While it's recommended to have as few Quality Profiles as possible to ensure consistency across projects, you can define as many Quality Profiles as are necessary to fit your specific needs.</p>\n<p>Each language must have a default Quality Profile (marked with the Default tag). Projects that are not explicitly assigned to specific Quality Profiles will be analyzed using the default Quality Profiles. There is also at least one built-in Quality Profile (the <strong>Sonar way</strong>) per language. These Quality Profiles are designed by SonarSource with rules that are generally applicable for most projects. </p>\n<p>The Sonar way Quality Profiles are a good starting-point as you begin analyzing code, and they start out as the default Quality Profiles for each language. That being said, we recommend that you <strong>Copy</strong> this profile and begin to fine-tune the contents. Why?</p>\n<ul>\n<li>Default Quality Profiles are not editable, so you won't be able to customize the Sonar way to your needs</li>\n<li>The Sonar way becomes a baseline against which you can track your own Quality Profiles</li>\n<li>The Sonar way may be updated over time to adjust which rules are included and adjust rule severities.</li>\n</ul>\n<h2>How do I...</h2>\n<h3>Delegate the management of Quality Profiles to someone else?</h3>\n<p>By default, only users with the \"Administer Quality Profiles\" permission can edit Quality Profiles. But in large organizations, it may not be desirable to grant permissions to change all the Quality Profiles without distinction. That's why you can also grant users/groups the permission to edit an individual Quality Profile so that, for instance, the management of the Swift profile can be delegated to a group of Swift experts, and the same for COBOL, ...</p>\n<p>This delegation of permission can only be performed by someone who already has the \"Administer Quality Profiles\" permission or individual edit rights on the profile to which additional permissions should be granted. The interface to grant individual permissions is available on the profile detail page.</p>\n<h3>Copy the rules from one profile to another?</h3>\n<p>Many times people want to work from a profile that's based on a built-in profile without actually using the built-in profile. The easiest thing to do in this case is to go to the original profile, we'll call it <em>Source</em>, in <strong>Quality Profiles</strong>. From there, click through on the total number of rules in <em>Source</em> to land on the <strong>Rules</strong> page at a pre-narrowed search of <em>Source</em>'s rules. Use <strong>Bulk Activate</strong> to turn Source's rules on in your target profile.</p>\n<h3>Know what's changed in a profile?</h3>\n<p>When SonarQube notices that an analysis was performed with a profile that is different in some way from the previous analysis, a Quality Profile event is added to the project's event log. To see the changes in a profile, navigate to the profile (<strong>Quality Profiles > [ Profile Name ]</strong>), and choose <strong>Changelog</strong>. This may help you understand how profile changes impact the issues raised in an analysis.</p>\n<p>Additionally, users with Quality Profile administration privileges are notified by email each time a built-in profile (one that is provided directly by an analyzer) is updated. These updates can only be caused by analyzer updates.</p>\n<h3>Copy a profile from one SonarQube instance to another?</h3>\n<p>Use the <strong>Back up</strong> feature on the source instance to export the profile to an XML file. Use the <strong>Restore Profile</strong> feature on the target instance to import the file. Note that some <a href=\"https://jira.sonarsource.com/browse/SONAR-5366\">limitations</a> on this feature exist.</p>\n<h3>Apply a core set of rules plus additional rules to a project?</h3>\n<p>Let's say your company has a minimum set of coding rules that all teams must follow, but you want to add rules that are specific to the in use technology in your project. Those rules are good for your team, but irrelevant or even misleading for others. This situation calls for inheritance. Set up a base profile, we'll call it <em>Root</em> with your core set of rules. Then create a child profile, we'll call it <em>Sprout</em>. Once it's created, you can <strong>Change parent</strong> to inherit from <em>Root</em>, then add your missing rules.</p>\n<p>Any profile that inherits from another Quality Profile will be updated when the parent Quality Profile is updated.</p>\n<h3>Make sure my non-default profile is used on a project?</h3>\n<p>One profile for each language is marked the default. Barring any other intervention, all projects that use that language will be analyzed with that profile. To have a project analyzed by a non-default profile instead, start from <strong>Quality Profiles</strong>, and click through on your target profile, then use the Projects part of the interface to manage which projects are explicitly assigned to the profile.</p>\n<h3>Make sure I've got all the relevant new rules in my profile?</h3>\n<p>Each time a language plugin update is released, new rules are added, but they won't appear automatically in your profile unless you're using a built-in profile such as <em>Sonar way</em>.</p>\n<p>If you're not using a built-in profile, you can compare your profile to the built-in profile to see what new on-by-default rules you're missing.</p>\n<p>Another option is to go to the <strong>Rules</strong> space, and use the <strong>Available Since</strong> search facet to see what rules have been added to the platform since the day you upgraded the relevant plugin.</p>\n<p>And finally, the profile interface itself will help you be aware of rules added in a new plugin version in the <strong>Latest New Rules</strong> section on the right of the interface.</p>\n<h3>Compare two profiles?</h3>\n<p>Starting from the <strong>Quality Profiles</strong> page, click through on one of the profiles you'd like to compare, then use the <strong>Actions > Compare</strong> interface to select the second profile and see the differences.</p>\n<h3>Make sure I don't have any deprecated rules in my profile?</h3>\n<p>The <strong>Deprecated Rules</strong> section of the rules interface itself is your first warning that a profile contains deprecated rules. This pink-background section gives the total number of instances of deprecated rules that are currently active in profiles, and a breakdown of deprecated count per profile. A click-through here takes you to the <strong>Rules</strong> page to edit the profile in question.</p>\n<p>Alternately, you can perform a <strong>Rules</strong> search for the rules in a profile (either manually or by clicking-through from <strong>Quality Profiles</strong> page) and use the <strong>Status</strong> rule search facet to narrow the list to the ones that need attention.</p>\n<h2>Security</h2>\n<p>The Quality Profiles service can be accessed by any user (even anonymous users). All users can view every aspect of a profile. That means anyone can see which rules are included in a profile, and which ones have been left out, see how a profile has changed over time, and compare the rules in any two profiles.</p>\n<p>To make rule profile changes (create, edit or delete) users must be granted the <strong>Administer Quality Profiles and Gates</strong> permission.</p>\n<p>A <strong>project administrator</strong> can choose which profiles his project is associated with. See Project Settings for more.</p>","fields":{"slug":"/instance-administration/quality-profiles/"}}},{"node":{"html":"<p>The System Info page is found at <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/system\">Administration > System</a></strong>. It gives you access to detailed information on the state of your SonarQube instance. </p>\n<h2>System Info</h2>\n<p>You can browse details about your running instance on this page. </p>\n<h3>Download</h3>\n<p>Additionally, if you have a Support contract, you might be asked by a Support representative to send in your System Info, which can be downloaded from the page <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/system\">Administration > System</a></strong> using the <strong>\"Download System Info\"</strong> button at the top.</p>\n<h3>Server Id</h3>\n<p>Your server id can be obtained from this page by expanding the <strong>System</strong> section. If you're running a commercial instance, you can also find this value on the License page (<strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/extension/license/app\">Administration > Configuration > License Manager</a></strong>)</p>\n<h2>Logs</h2>\n<p>Server-side logging is controlled by properties set in <em>$SONARQUBE-HOME/conf/sonar.properties</em>.</p>\n<p>4 logs files are created: one per SonarQube process.</p>\n<h3>Log Level</h3>\n<p>The server-side log level can be customized via the <code>sonar.log.level</code> property. Supported values are:</p>\n<ul>\n<li><strong><code>INFO</code></strong> - the default</li>\n<li><strong><code>DEBUG</code></strong> - for advanced logs.</li>\n<li><strong><code>TRACE</code></strong> - show advanced logs and all SQL and Elasticsearch requests. <code>TRACE</code> level logging slows down the server environment, and should be used only for tracking web request performance problems.</li>\n</ul>\n<h3>Log Level by Process</h3>\n<p>The server-side log level can be adjusted more precisely for the 4 processes of SonarQube Server via the following property:</p>\n<ul>\n<li><strong><code>sonar.log.level.app</code></strong> - for the Main process of SonarQube (aka WrapperSimpleApp, the bootstrapper process starting the 3 others) </li>\n<li><strong><code>sonar.log.level.web</code></strong> - for the WebServer</li>\n<li><strong><code>sonar.log.level.ce</code></strong> - for the ComputeEngineServer</li>\n<li><strong><code>sonar.log.level.es</code></strong> - for the SearchServer</li>\n</ul>\n<h3>Log Rotation</h3>\n<p>To control log rolling, use the <code>sonar.log.rollingPolicy</code></p>\n<ul>\n<li><strong><code>time:[value]</code></strong> - for time-based rotation. For example, use <code>time:yyyy-MM-dd</code> for daily rotation, and * <code>time:yyyy-MM</code> for monthly rotation.</li>\n<li><strong><code>size:[value]</code></strong> - for size-based rotation. For example, <code>size:10MB</code>.</li>\n<li><strong><code>none</code></strong> - for no rotation. Typically this would be used when logs are handled by an external system like logrotate.</li>\n</ul>\n<p><code>sonar.log.maxFiles</code> is the maximum number of files to keep. This property is ignored if <code>sonar.log.rollingPolicy=none</code>.</p>\n<h3>UI Access to Logs and Log Levels</h3>\n<p>The System Info page gives you the ability to download your instance's current log files (log files rotate on a regular basis), and to tune the log level via controls at the top of the page. Changes made here are temporary, and last only until the next time the instance is restarted, at which point the level will be reset to the more permanent value set in <em>$SONARQUBE-HOME/conf/sonar.properties</em>. Regardless, if you change your log level <em>from</em> <code>INFO</code>, but sure to change it back as soon as is practical; log files can get very large very quickly at lower log levels.</p>\n<h2>Total Lines of Code</h2>\n<p>The number of Lines of Code (for licensing purposes) in an instance can be found in the <strong>System</strong> section of the System Info page on, and on the License page (<strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/extension/license/app\">Administration > Configuration > License Manager</a></strong> in commercial editions. </p>\n<p>If you're on a commercial edition and using Branch or PR analysis, rest assured that only lines from the single largest branch in a project are considered for licensing purposes. The Lines of Code in the rest of the branches are ignored.</p>","fields":{"slug":"/instance-administration/system-info/"}}},{"node":{"html":"<h2>Prerequisite</h2>\n<p>The only prerequisite for running SonarQube is to have Java (Oracle JRE 11 or OpenJDK 11) installed on your machine.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p><strong>Note:</strong> <em>On Mac OS X it is highly recommended to install Oracle JDK 11 instead of the corresponding Oracle JRE since the JRE installation does not fully set up your Java environment properly. See <a href=\"http://stackoverflow.com/questions/15624667/mac-osx-java-terminal-version-incorrect\">this post</a> for more information.</em></p></div></div>\n<h2>Hardware Requirements</h2>\n<ol>\n<li>A small-scale (individual or small team) instance of the SonarQube server requires at least 2GB of RAM to run efficiently and 1GB of free RAM for the OS. If you are installing an instance for a large teams or Enterprise, please consider the additional recommendations below.</li>\n<li>The amount of disk space you need will depend on how much code you analyze with SonarQube. As an example, <a href=\"https://sonarcloud.io\">SonarCloud</a> the public instance of SonarQube, has more than 350 million lines of code under analysis with 5 years of history. SonarCloud is currently running on clustered <a href=\"http://aws.amazon.com/ec2/instance-types/\">Amazon EC2 m5.large</a> instances with allocations of 50 Gb of drive space per node. It handles 19,000+ projects with roughly 14M open issues. SonarCloud runs on PostgreSQL 9.5 and it is using about 250Gb of disk space for the database.</li>\n<li>SonarQube must be installed on hard drives that have excellent read &#x26; write performance. Most importantly, the \"data\" folder houses the Elasticsearch indices on which a huge amount of I/O will be done when the server is up and running. Great read &#x26; write hard drive performance will therefore have a great impact on the overall SonarQube server performance.</li>\n<li>SonarQube does not support 32-bit systems on the server side. SonarQube does, however, support 32-bit systems on the scanner side.</li>\n</ol>\n<h3>Enterprise Hardware Recommendations</h3>\n<p>For large teams or Enterprise-scale installations of SonarQube, additional hardware is required. At the Enterprise level, <a href=\"/SonarQubeChineseDoc8.1/instance-administration/monitoring/\">monitoring your SonarQube instance</a> is essential and should guide further hardware upgrades as your instance grows. A starting configuration should include at least:</p>\n<ul>\n<li>8 cores, to allow the main SonarQube platform to run with multiple Compute Engine workers</li>\n<li>16GB of RAM\nFor additional requirements and recommendations relating to database and ElasticSearch, see <a href=\"/SonarQubeChineseDoc8.1/requirements/hardware-recommendations/\">Hardware Recommendations</a>.</li>\n</ul>\n<h2>Supported Platforms</h2>\n<h3>Java</h3>\n<p>SonarQube scanners require version 8 or 11 of the JVM and the SonarQube server requires version 11. Versions beyond Java 11 are not officially supported. </p>\n<p>The SonarQube Java analyzer is able to analyze any kind of Java source files regardless of the version of Java they comply to. </p>\n<p>We recommend using the Critical Patch Update (CPU) releases.</p>\n<table>\n<thead>\n<tr>\n<th>Java</th>\n<th>Server</th>\n<th>Scanners</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Oracle JRE</td>\n<td><img src=\"/images/check.svg\"> 11</td>\n<td><img src=\"/images/check.svg\"> 11</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/cross.svg\"> 8</td>\n<td><img src=\"/images/check.svg\"> 8</td>\n</tr>\n<tr>\n<td>OpenJDK</td>\n<td><img src=\"/images/check.svg\"> 11</td>\n<td><img src=\"/images/check.svg\"> 11</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/cross.svg\"> 8</td>\n<td><img src=\"/images/check.svg\"> 8</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Database</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.postgresql.org/\">PostgreSQL</a></td>\n<td><img src=\"/images/check.svg\"> 12</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/check.svg\"> 11</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/check.svg\"> 10</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/check.svg\"> 9.3–9.6</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/exclamation.svg\"> Must be configured to use UTF-8 charset</td>\n</tr>\n<tr>\n<td><a href=\"http://www.microsoft.com/sqlserver/\">Microsoft SQL Server</a></td>\n<td><img src=\"/images/check.svg\"> 2017 (MSSQL Server 14.0) with bundled Microsoft JDBC driver. Express Edition is supported.</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/check.svg\"> 2016 (MSSQL Server 13.0) with bundled Microsoft JDBC driver. Express Edition is supported.</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/check.svg\"> 2014 (MSSQL Server 12.0) with bundled Microsoft JDBC driver. Express Edition is supported.</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/exclamation.svg\"> Collation must be case-sensitive (CS) and accent-sensitive (AS) (example: Latin1<em>General</em>CS_AS)</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/exclamation.svg\"> READ<em>COMMITTED</em>SNAPSHOT must be set on the SonarQube database to avoid potential deadlocks under heavy load</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/info.svg\"> Both Windows authentication (“Integrated Security”) and SQL Server authentication are supported. See the Microsoft SQL Server section in Installing/installation/installing-the-server page for instructions on configuring authentication.</td>\n</tr>\n<tr>\n<td><a href=\"http://www.oracle.com/database/\">Oracle</a></td>\n<td><img src=\"/images/check.svg\"> 19C</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/check.svg\"> 18C</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/check.svg\"> 12C</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/check.svg\"> 11G</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/check.svg\"> XE Editions</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/exclamation.svg\"> Must be configured to use a UTF8-family charset (see NLS_CHARACTERSET)</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/exclamation.svg\"> The driver ojdbc14.jar is not supported</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/info.svg\"> We recommend using the latest Oracle JDBC driver</td>\n</tr>\n<tr>\n<td></td>\n<td><img src=\"/images/exclamation.svg\"> Only the thin mode is supported, not OCI</td>\n</tr>\n</tbody>\n</table>\n<h3>Web Browser</h3>\n<p>To get the full experience SonarQube has to offer, you must enable JavaScript in your browser.</p>\n<table>\n<thead>\n<tr>\n<th>Browser</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Microsoft Internet Explorer</td>\n<td><img src=\"/images/check.svg\"> IE 11</td>\n</tr>\n<tr>\n<td>Microsoft Edge</td>\n<td><img src=\"/images/check.svg\"> Latest</td>\n</tr>\n<tr>\n<td>Mozilla Firefox</td>\n<td><img src=\"/images/check.svg\"> Latest</td>\n</tr>\n<tr>\n<td>Google Chrome</td>\n<td><img src=\"/images/check.svg\"> Latest</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td><img src=\"/images/exclamation.svg\"> Not tested</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td><img src=\"/images/check.svg\"> Latest</td>\n</tr>\n</tbody>\n</table>\n<h2>GitHub Enterprise Integration</h2>\n<p>To add Pull Request analysis to Checks in GitHub Enterprise, you must be running GitHub Enterprise version 2.14+.</p>\n<h2>Bitbucket Server Integration</h2>\n<p>To add Pull Request analysis to Code Insights in Bitbucket Server, you must be running Bitbucket Server version 5.15+.</p>\n<h2>Platform notes</h2>\n<h3>Linux</h3>\n<p>If you're running on Linux, you must ensure that:</p>\n<ul>\n<li><code>vm.max_map_count</code> is greater or equals to 262144</li>\n<li><code>fs.file-max</code> is greater or equals to 65536</li>\n<li>the user running SonarQube can open at least 65536 file descriptors</li>\n<li>the user running SonarQube can open at least 4096 threads</li>\n</ul>\n<p>You can see the values with the following commands:</p>\n<pre><code>sysctl vm.max_map_count\nsysctl fs.file-max\nulimit -n\nulimit -u\n</code></pre>\n<p>You can set them dynamically for the current session by running  the following commands as <code>root</code>:</p>\n<pre><code>sysctl -w vm.max_map_count=262144\nsysctl -w fs.file-max=65536\nulimit -n 65536\nulimit -u 4096\n</code></pre>\n<p>To set these values more permanently, you must update either <em>/etc/sysctl.d/99-sonarqube.conf</em> (or <em>/etc/sysctl.conf</em> as you wish) to reflect these values.</p>\n<p>If the user running SonarQube (<code>sonarqube</code> in this example) does not have the permission to have at least 65536 open descriptors, you must insert this line in <em>/etc/security/limits.d/99-sonarqube.conf</em> (or <em>/etc/security/limits.conf</em> as you wish):</p>\n<pre><code>sonarqube   -   nofile   65536\nsonarqube   -   nproc    4096\n</code></pre>\n<p>You can get more detail in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.6/system-config.html\">Elasticsearch documentation</a>.</p>\n<p>If you are using <code>systemd</code> to start SonarQube, you must specify those limits inside your unit file in the section [service] :</p>\n<pre><code>[Service]\n...\nLimitNOFILE=65536\nLimitNPROC=4096\n...\n</code></pre>\n<h3>seccomp filter</h3>\n<p>By default, Elasticsearch uses <a href=\"https://www.kernel.org/doc/Documentation/prctl/seccomp_filter.txt\">seccomp filter</a>. On most distribution this feature is activated in the kernel, however on distributions like Red Hat Linux 6 this feature is deactivated. If you are using a distribution without this feature and you cannot upgrade to a newer version with seccomp activated, you have to explicitly deactivate this security layer by updating <code>sonar.search.javaAdditionalOpts</code> in <em>$SONARQUBE</em>HOME/conf/sonar.properties_:</p>\n<pre><code>sonar.search.javaAdditionalOpts=-Dbootstrap.system_call_filter=false\n</code></pre>\n<p>You can check if seccomp is available on your kernel with:</p>\n<pre><code>$ grep SECCOMP /boot/config-$(uname -r)\n</code></pre>\n<p>If your kernel has seccomp, you will see:</p>\n<pre><code>CONFIG_HAVE_ARCH_SECCOMP_FILTER=y\nCONFIG_SECCOMP_FILTER=y\nCONFIG_SECCOMP=y\n</code></pre>\n<p>For more detail, see the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.6/breaking-changes-5.6.html\">Elasticsearch documentation</a>.</p>","fields":{"slug":"/requirements/requirements/"}}},{"node":{"html":"<h2>Database</h2>\n<p>We recommend that for large instances, the database used by SonarQube is hosted on a machine which is physically separate from SonarQube Server but close to it on the network.</p>\n<h3>Oracle</h3>\n<p>In case your SonarQube Server is running on Linux and you are using Oracle, the Oracle JDBC Driver may be blocked due to /dev/random. See <a href=\"http://www.usn-it.de/index.php/2009/02/20/oracle-11g-jdbc-driver-hangs-blocked-by-devrandom-entropy-pool-empty/\">this Oracle article</a> for more details about this problem.</p>\n<p> To avoid it, you may want to add this JVM parameter to your SonarQube Web Server (<code>sonar.web.javaOpts</code>) configuration :</p>\n<pre><code>-Djava.security.egd=file:///dev/urandom\n</code></pre>\n<h2>Elasticsearch (ES)</h2>\n<ul>\n<li><a href=\"https://www.elastic.co/\">Elasticsearch</a> is used by SonarQube in the background in the SearchServer process. To ensure good performance of your SonarQube, you need to follow these recommendations that are linked to ES usage.</li>\n</ul>\n<h3>JVM</h3>\n<ul>\n<li>It is recommended to set the min and max memory to the same value to prevent the heap from resizing at runtime, a very costly process. See -Xms and  -Xmx of property <code>sonar.search.javaOpts</code>.</li>\n</ul>\n<h3>Disk</h3>\n<ul>\n<li>Free disk space is an absolute requirement. ES implements a safety mechanism to prevent the disk from being flooded with index data that locks all indices in read-only mode when a 95% disk usage watermark is reached. For information on recovering from ES read-only indices, see the <a href=\"/SonarQubeChineseDoc8.1/setup/troubleshooting/\">Troubleshooting</a> page.</li>\n<li>Disk can easily  become the bottleneck of ES. If you can afford SSDs, they are by far superior to any spinning media. SSD-backed nodes see boosts in both query and indexing performance. If you use spinning media, try to obtain the fastest disks possible (high performance server disks 15k RPM drives).</li>\n<li>Make sure to increase the number of open files descriptors on the machine (or for the user running SonarQube server). Setting it to 32k or even 64k is recommended. See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/file-descriptors.html\">this ElasticSearch article</a>.</li>\n<li>Using RAID 0 is an effective way to increase disk speed, for both spinning disks and SSD. There is no need to use mirroring or parity variants of RAID because of Elasticsearch replicas and database primary storage.\n8 Do not use remote-mounted storage, such as NFS, SMB/CIFS or network-attached storages (NAS). They are often slower, display larger latencies with a wider deviation in average latency, and are a single point of failure.</li>\n</ul>\n<p><strong>Advanced</strong></p>\n<ul>\n<li>If you are using SSD, make sure your OS I/O Scheduler is configured correctly. When you write data to disk, the I/O Scheduler decides when that data is actually sent to the disk. The default under most *nix distributions is a scheduler called cfq (Completely Fair Queuing). This scheduler allocates \"time slices\" to each process, and then optimizes the delivery of these various queues to the disk. It is optimized for spinning media: the nature of rotating platters means it is more efficient to write data to disk based on physical layout. This is very inefficient for SSD, however, since there are no spinning platters involved. Instead, deadline or noop should be used instead. The deadline scheduler optimizes based on how long writes have been pending, while noop is just a simple FIFO queue. This simple change can have dramatic impacts.</li>\n<li>If SQ home directory is located on a slow disk, then the property <code>sonar.path.data</code> can be used to move data to a faster disk (RAID 0 local SSD for instance).</li>\n</ul>\n<h3>Memory</h3>\n<ul>\n<li>Machine available memory for OS must be at least the Elasticsearch heap size. The reason is that Lucene (used by ES) is designed to leverage the underlying OS for caching in-memory data structures. That means that by default OS must have at least 1Gb of available memory.</li>\n<li>Don't allocate more than 32Gb. See <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/heap-sizing.html\">this ElasticSearch article</a> for more details.</li>\n</ul>\n<p><strong>Advanced</strong></p>\n<ul>\n<li>\n<p>Elasticsearch uses a hybrid mmapfs / niofs directory by default to store its indices. The default operating system limits on mmap counts is likely to be too low, which may result in out of memory exceptions. On Linux, you can increase the limits by running the following command as root :</p>\n<pre><code>sysctl -w vm.max_map_count=262144\n</code></pre>\n<p>To set this value permanently, update the <code>vm.max_map_count</code> setting in <code>/etc/sysctl.conf</code>.</p>\n</li>\n</ul>\n<h3>CPU</h3>\n<ul>\n<li>If you need to choose between faster CPUs or more cores, then choose more cores. The extra concurrency that multiple cores offers will far outweigh a slightly faster clock-speed.</li>\n<li>By nature data are distributed on multiples nodes, so execution time depends on the slowest node. It's better to have multiple medium boxes than one fast + one slow.</li>\n</ul>","fields":{"slug":"/requirements/hardware-recommendations/"}}},{"node":{"html":"<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>This guides shows you how to install a demo instance. When you are ready to move to production, take some time to read the <a href=\"/SonarQubeChineseDoc8.1/setup/install-server/\">Install the Server</a> documentation.</p></div></div>\n<h2>Installing from a zip file</h2>\n<ol>\n<li>\n<p><a href=\"https://www.sonarqube.org/downloads/\">Download</a> the SonarQube Community Edition.</p>\n</li>\n<li>\n<p>As a <strong>non-<code>root</code> user</strong>, unzip it, let's say in <em>C:\\sonarqube</em> or <em>/opt/sonarqube</em>.</p>\n</li>\n<li>\n<p>As a <strong>non-<code>root</code> user</strong>, start the SonarQube Server:</p>\n<pre><code># On Windows, execute:\nC:\\sonarqube\\bin\\windows-x86-xx\\StartSonar.bat\n\n# On other operating systems, as a non-root user execute:\n/opt/sonarqube/bin/[OS]/sonar.sh console\n</code></pre>\n<p><img src=\"/images/info.svg\"> If your instance fails to start, check your <a href=\"/SonarQubeChineseDoc8.1/setup/troubleshooting/\">logs</a> to find the cause.</p>\n</li>\n<li>\n<p>Log in to <a href=\"http://localhost:9000\">http://localhost:9000</a> with System Administrator credentials (login=admin, password=admin).</p>\n</li>\n<li>\n<p>Click the <strong>Create new project</strong> button to analyze your first project.</p>\n</li>\n</ol>\n<h2>Using Docker</h2>\n<p>A Docker image of the Community Edition is available on <a href=\"https://hub.docker.com/_/sonarqube/\">Docker Hub</a>. You can find usage and configuration examples there.</p>","fields":{"slug":"/setup/get-started-2-minutes/"}}},{"node":{"html":"<p>There are two options to install a plugin into SonarQube:</p>\n<ul>\n<li>Marketplace - Installs plugins automatically, from the SonarQube UI. </li>\n<li>Manual Installation - You'll use this method if your SonarQube instance doesn't have access to the Internet.</li>\n</ul>\n<h2>Marketplace</h2>\n<p>If you have access to the Internet and you are connected with a SonarQube user having the Global Permission \"Administer System\", you can go to Administration > Marketplace.</p>\n<ul>\n<li>Find the plugin you want to install</li>\n<li>Click on Install and wait for the download to be processed</li>\n</ul>\n<p>Once download is complete, a \"Restart\" button will be available to restart your instance.</p>\n<p>See <a href=\"/SonarQubeChineseDoc8.1/instance-administration/marketplace/\">Marketplace</a> for more details on how to configure your SonarQube Server to connect to the Internet.</p>\n<h2>Manual Installation</h2>\n<p>In the page dedicated to the plugin you want to install (ex: for Python: SonarPython), click on the \"Download\" link of the version compatible with your SonarQube version.  </p>\n<p>Put the downloaded jar in <code>$SONARQUBE_HOME/extensions/plugins</code>, removing any previous versions of the same plugins.</p>\n<p>Once done, you will need to restart your SonarQube Server.</p>\n<h3>License</h3>\n<p>If you installed a Commercial Edition, you will need to set the License Key in Administration > Configuration > License Manager before being able to use it.</p>","fields":{"slug":"/setup/install-plugin/"}}},{"node":{"html":"<p><em>Running SonarQube as a Cluster is only possible with a <a href=\"https://www.sonarsource.com/plans-and-pricing/data-center/\">Data Center Edition</a></em>.</p>\n<p>The Data Center Edition allows SonarQube to run in a clustered configuration to make it resilient to failures.</p>\n<h2>Overview</h2>\n<p>The default configuration for the Data Center Edition comprises five servers, a load balancer, and a database server:</p>\n<ul>\n<li>Two application nodes responsible for handling web requests from users (WebServer process) and handling analysis reports (ComputeEngine process). You can add application nodes to increase computing capabilities.</li>\n<li>Three search nodes that host the Elasticsearch process that will store data indices. SSDs perform significantly better than HDDs for these nodes.</li>\n<li>A reverse proxy / load balancer to load balance traffic between the two application nodes. The installing organization must supply this hardware or software component.</li>\n<li>PostgreSQL, Oracle, or Microsoft SQL Server database server. This software must be supplied by the installing organization.</li>\n</ul>\n<p>With this configuration, one application node and one search node can be lost without impacting users.  Here is a diagram of the default topology:</p>\n<p><img src=\"/images/cluster-dce.png\" alt=\"DCE Cluster Machines Topology.\"></p>\n<h2>Requirements</h2>\n<h3>Network</h3>\n<p>All servers, including the database server, must be co-located (geographical redundancy is not supported) and have static IP addresses (reference via hostname is not supported).  Network traffic should not be restricted between application and search nodes.</p>\n<h3>Servers</h3>\n<p>You need a minimum of five servers (two application nodes and three search nodes) to form a SonarQube application cluster. You can add application nodes to increase computing capabilities. Servers can be virtual machines; it is not necessary to use physical machines.</p>\n<p>The operating system requirements for servers are available on the <a href=\"/SonarQubeChineseDoc8.1/requirements/requirements/\">Requirements</a> page.  All application nodes should be identical in terms of hardware and software. Similarly, all search nodes should be identical to each other. Application and search nodes, however, can differ from one another. Generally, search nodes are configured with more CPU and RAM than application nodes.</p>\n<p>Here are the machines we used to perform our validation with a 200M issues database. You can use this as a minimum recommendation to build your cluster.</p>\n<ul>\n<li>App Node made of <a href=\"https://aws.amazon.com/ec2/instance-types/\">Amazon EC2 m4.xlarge</a>: 4 vCPUs, 16GB RAM</li>\n<li>Search Node made of <a href=\"https://aws.amazon.com/ec2/instance-types/\">Amazon EC2 m4.2xlarge</a>: 8 vCPUs, 32GB RAM - 16GB allocated to Elasticsearch. SSDs perform significantly better than HDDs for these nodes.</li>\n</ul>\n<h3>Database Server</h3>\n<p>Supported database systems are available on the <a href=\"/SonarQubeChineseDoc8.1/requirements/requirements/\">Requirements</a> page.</p>\n<h3>Load Balancer</h3>\n<p>SonarSource does not provide specific recommendations for reverse proxy / load balancer or solution-specific configuration.  The general requirements to use with SonarQube Data Center Edition are:</p>\n<ul>\n<li>Ability to balance HTTP requests (load) between the application nodes configured in the SonarQube cluster.</li>\n<li>If terminating HTTPS, meets the requirements set out in <a href=\"/SonarQubeChineseDoc8.1/setup/operate-server/\">Securing SonarQube Behind a Proxy</a>.</li>\n<li>No requirement to preserve or sticky sessions; this is handled by the built-in JWT mechanism.</li>\n</ul>\n<h3>License</h3>\n<p>You need a dedicated license to activate the Data Center Edition. If you don't have one yet, please contact the SonarSource Sales Team.</p>\n<h3>Support</h3>\n<p>Don't start this journey alone!  As a Data Center Edition subscriber, SonarSource will assist with the setup and configuration of your cluster. Get in touch with <a href=\"https://support.sonarsource.com\">SonarSource Support</a> for help.</p>\n<h2>Configuration</h2>\n<p>Additional parameters are required to activate clustering capabilities and specialize each node. These parameters are in addition to standard configuration properties used in a single-node configuration.</p>\n<p>The <strong>sonar.properties</strong> file on each node will be edited to configure the node's specialization. A list of all cluster-specific configuration parameters is available in the <a href=\"/SonarQubeChineseDoc8.1/setup/operate-cluster/\">Operate the Cluster</a> documentation.</p>\n<p>Prior to configuration, you will need to generate a value for the <code>sonar.auth.jwtBase64Hs256Secret</code> property for the application nodes.  The value is a HS256 key encoded with base64 and will be the same for both nodes.  The following is an example on how to generate this value on a Unix system:</p>\n<pre><code>echo -n \"your_secret\" | openssl dgst -sha256 -hmac \"your_key\" -binary | base64\n</code></pre>\n<h3>Sample Configuration</h3>\n<p>The following example represents the minimal parameters required to configure a SonarQube cluster.  The example assumes:</p>\n<ul>\n<li>The VMs having IP addresses ip1 and ip2 (server1, server2) are application nodes</li>\n<li>The VMs having IP addresses ip3, ip4, and ip5 (server3, server4 and server5) are search nodes</li>\n</ul>\n<p>The configuration to be added to sonar.properties for each node is the following:</p>\n<h4>Application Nodes</h4>\n<p><strong>server1</strong></p>\n<pre><code>...\nsonar.cluster.enabled=true\nsonar.cluster.hosts=ip1,ip2\nsonar.cluster.search.hosts=ip3,ip4,ip5\nsonar.cluster.node.type=application\nsonar.auth.jwtBase64Hs256Secret=YOURGENERATEDSECRET\n...\n</code></pre>\n<p><strong>server2</strong></p>\n<pre><code>...\nsonar.cluster.enabled=true\nsonar.cluster.hosts=ip1,ip2\nsonar.cluster.search.hosts=ip3,ip4,ip5\nsonar.cluster.node.type=application\nsonar.auth.jwtBase64Hs256Secret=YOURGENERATEDSECRET\n...\n</code></pre>\n<h4>Search Nodes</h4>\n<p><strong>server3</strong></p>\n<pre><code>...\nsonar.cluster.enabled=true\nsonar.cluster.search.hosts=ip3,ip4,ip5\nsonar.cluster.node.type=search\nsonar.search.host=ip3\n...\n</code></pre>\n<p><strong>server4</strong></p>\n<pre><code>...\nsonar.cluster.enabled=true\nsonar.cluster.search.hosts=ip3,ip4,ip5\nsonar.cluster.node.type=search\nsonar.search.host=ip4\n...\n</code></pre>\n<p><strong>server5</strong></p>\n<pre><code>...\nsonar.cluster.enabled=true\nsonar.cluster.search.hosts=ip3,ip4,ip5\nsonar.cluster.node.type=search\nsonar.search.host=ip5\n...\n</code></pre>\n<h2>Sample Installation Process</h2>\n<p>The following is an example of the default SonarQube cluster installation process. You need to tailor your installation to the specifics of the target installation environment and the operational requirements of the hosting organization.</p>\n<p><strong>Prepare the cluster environment:</strong></p>\n<ol>\n<li>Prepare the cluster environment by setting up the network and provisioning the nodes and load balancer. </li>\n<li>Follow the <a href=\"/SonarQubeChineseDoc8.1/setup/install-server/\">Installing the Server</a> documentation to configure the database server.</li>\n</ol>\n<p><strong>Prepare a personalized SonarQube package:</strong></p>\n<ol>\n<li>On a single application node of the cluster, download and install SonarQube Data Center Edition, following the usual <a href=\"/SonarQubeChineseDoc8.1/setup/install-server/\">Installing the Server</a> documentation.</li>\n<li>Add cluster-related parameters to <code>$SONARQUBE_HOME/conf/sonar.properties</code>.</li>\n<li>As the Marketplace is not available in SonarQube Data Center Edition, this is a good opportunity to install additional plugins. Download and place a copy of each plugin JAR in <code>$SONARQUBE_HOME/extensions/plugins</code>.  Be sure to check compatibility with your SonarQube version using the <a href=\"https://docs.sonarqube.org/display/PLUG/Plugin+Version+Matrix\">Plugin Version Matrix</a>.</li>\n<li>Zip the directory <code>$SONARQUBE_HOME</code>. This archive is a customized SonarQube Data Center Edition package that can be copied to other nodes.</li>\n</ol>\n<p><strong>Test configuration on a single node:</strong></p>\n<ol>\n<li>On the application node where you created your Zip package, comment out all cluster-related parameters in <code>$SONARQUBE_HOME/conf/sonar.properties</code>.</li>\n<li>Configure the load balancer to proxy with single application node.</li>\n<li>Start server and test access through load balancer.</li>\n<li>Request license from SonarSource Sales Team.</li>\n<li>After applying license, you will have a full-featured SonarQube system operating on a single node.</li>\n</ol>\n<p><strong>Deploy SonarQube package on other nodes:</strong></p>\n<ol>\n<li>Unzip SonarQube package on the other four nodes.</li>\n<li>Configure node-specific parameters on all five nodes in <code>$SONARQUBE_HOME/conf/sonar.properties</code> and ensure application node-specific and search node-specific parameters are properly set.</li>\n<li>Start all search nodes.</li>\n<li>After all search nodes are running, start all application nodes.</li>\n<li>Configure the load balancer to proxy with both application nodes.</li>\n</ol>\n<p>Congratulations, you have a fully-functional SonarQube cluster.  Once these steps are complete, take a break and a coffee, then you can <a href=\"/SonarQubeChineseDoc8.1/setup/operate-cluster/\">Operate your Cluster</a>.</p>","fields":{"slug":"/setup/install-cluster/"}}},{"node":{"html":"<h2>Installing the Database</h2>\n<p>Several <a href=\"/SonarQubeChineseDoc8.1/requirements/requirements/\">database engines</a> are supported. Be sure to follow the requirements listed for your database, they are real requirements not recommendations.</p>\n<p>Create an empty schema and a <code>sonarqube</code> user. Grant this <code>sonarqube</code> user permissions to <code>create</code>, <code>update</code>, and <code>delete</code> objects for this schema.</p>\n<h3>Microsoft SQL Server</h3>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>Collation <strong>MUST</strong> be case-sensitive (CS) and accent-sensitive (AS).<br>\n<code>READ_COMMITED_SNAPSHOT</code> <strong>MUST</strong> be set on the SonarQube database.</p></div></div>\n<p>MS SQL database's shared lock strategy may impact SonarQube runtime. Making sure that <code>is_read_committed_snapshot_on</code> is set to <code>true</code> to prevent SonarQube from facing potential deadlocks under heavy loads. </p>\n<p>Example of query to check <code>is_read_committed_snapshot_on</code>:</p>\n<pre><code>SELECT is_read_committed_snapshot_on FROM sys.databases WHERE name='YourSonarQubeDatabase';\n</code></pre>\n<p>Example of query to update <code>is_read_committed_snapshot_on</code>:</p>\n<pre><code>ALTER DATABASE YourSonarQubeDatabase SET READ_COMMITTED_SNAPSHOT ON WITH ROLLBACK IMMEDIATE;\n</code></pre>\n<h4>Integrated Security</h4>\n<p>To use integrated security: </p>\n<ol>\n<li>\n<p>Download the <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=57782\">Microsoft SQL JDBC Driver 7.2.2 package</a> and copy the 64-bit version of <code>sqljdbc_auth.dll</code> to any folder in your path. </p>\n</li>\n<li>\n<p><strong>If you're running SonarQube as a Windows service,</strong> make sure the Windows account under which the service is running has permission to connect your SQL server. The account should have <code>db_owner</code> database role membership. </p>\n<p><strong>If you're running the SonarQube server from a command prompt,</strong> the user under which the command prompt is running should have <code>db_owner</code> database role membership. </p>\n</li>\n<li>\n<p>Ensure that <code>sonar.jdbc.username</code> or <code>sonar.jdbc.password</code> properties are commented out or SonarQube will use SQL authentication.</p>\n</li>\n</ol>\n<pre><code>sonar.jdbc.url=jdbc:sqlserver://localhost;databaseName=sonar;integratedSecurity=true\n</code></pre>\n<h4>SQL Authentication</h4>\n<p>To use SQL Authentication, use the following connection string. Also ensure that <code>sonar.jdbc.username</code> and <code>sonar.jdbc.password</code> are set appropriately:</p>\n<pre><code>sonar.jdbc.url=jdbc:sqlserver://localhost;databaseName=sonar\nsonar.jdbc.username=sonarqube\nsonar.jdbc.password=mypassword\n</code></pre>\n<h3>Oracle</h3>\n<p>If there are two SonarQube schemas on the same Oracle instance, especially if they are for two different versions, SonarQube gets confused and picks the first it finds. To avoid this issue:</p>\n<ul>\n<li>Either privileges associated to the SonarQube Oracle user should be decreased</li>\n<li>Or a trigger should be defined on the Oracle side to automatically alter the SonarQube Oracle user session when establishing a new connection:</li>\n</ul>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>Oracle JDBC driver versions 12.1.0.1 and 12.1.0.2 have major bugs, and are not recommended for use with the SonarQube (<a href=\"https://groups.google.com/forum/#!msg/sonarqube/Ahqt1iarqJg/u0BVRJZnBQAJ\">see more details</a>).</p></div></div>\n<h3>PostgreSQL</h3>\n<p>If you want to use a custom schema and not the default \"public\" one, the PostgreSQL <code>search_path</code> property must be set:</p>\n<pre><code>ALTER USER mySonarUser SET search_path to mySonarQubeSchema\n</code></pre>\n<h2>Installing the Web Server</h2>\n<p>First, check the <a href=\"/SonarQubeChineseDoc8.1/requirements/requirements/\">requirements</a>. Then download and unzip the <a href=\"http://www.sonarqube.org/downloads/\">distribution</a> (do not unzip into a directory starting with a digit). </p>\n<p>SonarQube cannot be run as <code>root</code> on Unix-based systems, so create a dedicated user account to use for SonarQube if necessary.</p>\n<p><em>$SONARQUBE-HOME</em> (below) refers to the path to the directory where the SonarQube distribution has been unzipped.</p>\n<h3>Setting the Access to the Database</h3>\n<p>Edit <em>$SONARQUBE-HOME/conf/sonar.properties</em> to configure the database settings. Templates are available for every supported database. Just uncomment and configure the template you need and comment out the lines dedicated to H2:</p>\n<pre><code>Example for PostgreSQL\nsonar.jdbc.username=sonarqube\nsonar.jdbc.password=mypassword\nsonar.jdbc.url=jdbc:postgresql://localhost/sonarqube\n</code></pre>\n<h3>Adding the JDBC Driver</h3>\n<p>Drivers for the supported databases (except Oracle) are already provided. Do not replace the provided drivers; they are the only ones supported.</p>\n<p>For Oracle, copy the JDBC driver into <em>$SONARQUBE-HOME/extensions/jdbc-driver/oracle</em>.</p>\n<h3>Configuring the Elasticsearch storage path</h3>\n<p>By default, Elasticsearch data is stored in <em>$SONARQUBE-HOME/data</em>, but this is not recommended for production instances. Instead, you should store this data elsewhere, ideally in a dedicated volume with fast I/O. Beyond maintaining acceptable performance, doing so will also ease the upgrade of SonarQube.</p>\n<p>Edit <em>$SONARQUBE-HOME/conf/sonar.properties</em> to configure the following settings:</p>\n<pre><code>sonar.path.data=/var/sonarqube/data\nsonar.path.temp=/var/sonarqube/temp\n</code></pre>\n<p>The user used to launch SonarQube must have read and write access to those directories.</p>\n<h3>Starting the Web Server</h3>\n<p>The default port is \"9000\" and the context path is \"/\". These values can be changed in <em>$SONARQUBE-HOME/conf/sonar.properties</em>:</p>\n<pre><code>sonar.web.host=192.0.0.1\nsonar.web.port=80\nsonar.web.context=/sonarqube\n</code></pre>\n<p>Execute the following script to start the server:</p>\n<ul>\n<li>On Linux/Mac OS: bin/<YOUR OS>/sonar.sh start</li>\n<li>On Windows: bin/windows-x86-XX/StartSonar.bat</li>\n</ul>\n<p>You can now browse SonarQube at <em><a href=\"http://localhost:9000\">http://localhost:9000</a></em> (the default System administrator credentials are <code>admin</code>/<code>admin</code>).</p>\n<h3>Tuning the Web Server</h3>\n<p>By default, SonarQube is configured to run on any computer with a simple Java JRE.</p>\n<p>For better performance, the first thing to do when installing a production instance is to use a Java JDK and activate the server mode by uncommenting/setting the following line in <em>$SONARQUBE-HOME/conf/sonar.properties</em>:</p>\n<pre><code>sonar.web.javaOpts=-server\n</code></pre>\n<p>To change the Java JVM used by SonarQube, simply edit <em>$SONARQUBE-HOME/conf/wrapper.conf</em> and update the following line:</p>\n<pre><code>wrapper.java.command=/path/to/my/jdk/bin/java\n</code></pre>\n<h3>Advanced Installation Features</h3>\n<ul>\n<li>Running SonarQube as a Service on <a href=\"/SonarQubeChineseDoc8.1/setup/operate-server/\">Windows</a> or <a href=\"/SonarQubeChineseDoc8.1/setup/operate-server/\">Linux</a></li>\n<li>Running SonarQube <a href=\"/SonarQubeChineseDoc8.1/setup/operate-server/\">behind a Proxy</a></li>\n<li>Running SonarQube Community Edition with <a href=\"https://hub.docker.com/_/sonarqube/\">Docker</a></li>\n</ul>\n<h2>Next Steps</h2>\n<p>Once your server is installed and running, you may also want to <a href=\"/SonarQubeChineseDoc8.1/setup/install-plugin/\">Install Plugins</a>. Then you're ready to begin <a href=\"/SonarQubeChineseDoc8.1/analysis/overview/\">Analyzing Source Code</a>.</p>\n<h2>Troubleshooting/FAQ</h2>\n<h3>Grant more memory to the web server / compute engine / elastic search</h3>\n<p>To grant more memory to a server-side process, uncomment and edit the relevant javaOpts property in <code>$SONARQUBE_HOME/conf/sonar.properties</code>, specifically:</p>\n<ul>\n<li><code>sonar.web.javaOpts</code> (minimum values: <code>-server -Xmx768m</code>)</li>\n<li><code>sonar.ce.javaOpts</code></li>\n<li><code>sonar.search.javaOpts</code></li>\n</ul>\n<h3>Failed to start on Windows Vista</h3>\n<p>SonarQube seems unable to start when installed under the <code>Program Files</code> directory on Windows Vista. It should therefore not be installed there.</p>\n<h3>Failed to start SonarQube with Oracle due to bad <code>USERS</code> table structure</h3>\n<p>When other <code>USERS</code> tables exist in the Oracle DB, if the <code>sonarqube</code> user has read access on this other <code>USERS</code> table, the SonarQube web server can't start and an exception like the following one is thrown:</p>\n<pre><code>ActiveRecord::ActiveRecordError: ORA-00904: \"TOTO\": invalid identifier\n: INSERT INTO users (login, name, email, crypted_password, salt, \ncreated_at, updated_at, remember_token, remember_token_expires_at, toto, id)\nVALUES('admin', 'Administrator', '', 'bba4c8a0f808f9798cf8b1c153a4bb4f9178cf59', '2519754f77ea67e5d7211cd1414698f465aacebb',\nTIMESTAMP'2011-06-24 22:09:14', TIMESTAMP'2011-06-24 22:09:14', null, null, null, ?)\nActiveRecord::ActiveRecordError: ORA-00904: \"TOTO\": invalid identifier\n \n: INSERT INTO users (login, name, email, crypted_password, salt, \ncreated_at, updated_at, remember_token, remember_token_expires_at, toto, id)\nVALUES('admin', 'Administrator', '', 'bba4c8a0f808f9798cf8b1c153a4bb4f9178cf59', \n'2519754f77ea67e5d7211cd1414698f465aacebb', TIMESTAMP'2011-06-24 22:09:14', TIMESTAMP'2011-06-24 22:09:14', null, null, null, ?)\n</code></pre>\n<p>To fix this issue, the rights of the <code>sonarqube</code> Oracle user must be decreased to remove read access on the other <code>USERS</code> table(s).</p>\n<h3>Failed to connect to the Marketplace via proxy</h3>\n<p>Double check that settings for proxy are correctly set in <code>$SONARQUBE_HOME/conf/sonar.properties</code>.\nNote that if your proxy username contains \"\" (backslash), then it should be escaped - for example username \"domain\\user\" in file should look like:</p>\n<pre><code>http.proxyUser=domain\\\\user\n</code></pre>\n<p>For some proxies, the exception \"java.net.ProtocolException: Server redirected too many times\" might mean an incorrect username or password has been configured.</p>\n<h3>Exception java.lang.RuntimeException: can not run elasticsearch as root</h3>\n<p>SonarQube starts an Elasticsearch process, and the same account that is running SonarQube itself will be used for the Elasticsearch process. Since Elasticsearch cannot be run as <code>root</code>, that means SonarQube can't be either. You must choose some other, non-<code>root</code> account with which to run SonarQube, preferably an account dedicated to the purpose.</p>","fields":{"slug":"/setup/install-server/"}}},{"node":{"html":"<h2>Running SonarQube as a Service on Windows</h2>\n<h3>Install or Uninstall NT Service (may have to run these files via Run As Administrator):</h3>\n<pre><code>%SONARQUBE_HOME%/bin/windows-x86-64/InstallNTService.bat\n%SONARQUBE_HOME%/bin/windows-x86-64/UninstallNTService.bat\n</code></pre>\n<h3>Start or Stop the Service:</h3>\n<pre><code>%SONARQUBE_HOME%/bin/windows-x86-64/StartNTService.bat\n%SONARQUBE_HOME%/bin/windows-x86-64/StopNTService.bat\n</code></pre>\n<p><strong>Note:</strong> <code>%SONARQUBE_HOME%/bin/windows-x86-64/StopNTService.bat</code> does a graceful shutdown where no new analysis report processing can start, but the tasks in progress are allowed to finish. The time a stop will take depends on the processing time of the tasks in progress. You'll need to kill all SonarQube processes manually to force a stop.</p>\n<h2>Running SonarQube Manually on Linux</h2>\n<h3>Start or Stop the Instance</h3>\n<pre><code>Start:\n$SONAR_HOME/bin/linux-x86-64/sonar.sh start\n\nGraceful shutdown:\n$SONAR_HOME/bin/linux-x86-64/sonar.sh stop\n\nHard stop:\n$SONAR_HOME/bin/linux-x86-64/sonar.sh force-stop\n</code></pre>\n<p><strong>Note:</strong> Stop does a graceful shutdown where no new analysis report processing can start, but the tasks in progress are allowed to finish. The time a stop will take depends on the processing time of the tasks in progress. Use force stop for a hard stop. </p>\n<h2>Running SonarQube as a Service on Linux with SystemD</h2>\n<p>On Unix system using SystemD, you can install SonarQube as a service. You cannot run SonarQube as <code>root</code> in 'nix systems. Ideally, you will created a new account dedicated to the purpose of running SonarQube.\nLet's suppose:</p>\n<ul>\n<li>The user used to start the service is <code>sonarqube</code></li>\n<li>The group used to start the service is <code>sonarqube</code></li>\n<li>The Java Virtual Machine is installed in <code>/opt/java/</code></li>\n<li>SonarQube has been unzipped into <code>/opt/sonarqube/</code></li>\n</ul>\n<p>Then create the file <code>/etc/systemd/system/sonarqube.service</code> <em>based on</em> the following </p>\n<pre><code>[Unit]\nDescription=SonarQube service\nAfter=syslog.target network.target\n\n[Service]\nType=simple\nUser=sonarqube\nGroup=sonarqube\nPermissionsStartOnly=true\nExecStart=/bin/nohup /opt/java/bin/java -Xms32m -Xmx32m -Djava.net.preferIPv4Stack=true -jar /opt/sonarqube/lib/sonar-application-7.4.jar\nStandardOutput=syslog\nLimitNOFILE=65536\nLimitNPROC=8192\nTimeoutStartSec=5\nRestart=always\nSuccessExitStatus=143\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p><strong>Note</strong></p>\n<ul>\n<li>Because the sonar-application jar name ends with the version of SonarQube, you will need to adjust the <code>ExecStart</code> command accordingly on install and at each upgrade.</li>\n<li>The SonarQube data directory, <code>/opt/sonarqube/data</code>, and the extensions directory, <code>/opt/sonarqube/extensions</code> should be owned by the <code>sonarqube</code> user. As a good practice, the rest should be owned by <code>root</code></li>\n</ul>\n<p>Once your <code>sonarqube.service</code> file is created and properly configured, run:</p>\n<pre><code>sudo systemctl enable sonarqube.service\nsudo systemctl start sonarqube.service\n</code></pre>\n<h2>Running SonarQube as a Service on Linux with initd</h2>\n<p>The following has been tested on Ubuntu 8.10 and CentOS 6.2.</p>\n<p>Create the file /etc/init.d/sonar with this content:</p>\n<pre><code>#!/bin/sh\n#\n# rc file for SonarQube\n#\n# chkconfig: 345 96 10\n# description: SonarQube system (www.sonarsource.org)\n#\n### BEGIN INIT INFO\n# Provides: sonar\n# Required-Start: $network\n# Required-Stop: $network\n# Default-Start: 3 4 5\n# Default-Stop: 0 1 2 6\n# Short-Description: SonarQube system (www.sonarsource.org)\n# Description: SonarQube system (www.sonarsource.org)\n### END INIT INFO\n \n/usr/bin/sonar $*\n</code></pre>\n<p>Register SonarQube at boot time (RedHat, CentOS, 64 bit):</p>\n<pre><code>sudo ln -s $SONAR_HOME/bin/linux-x86-64/sonar.sh /usr/bin/sonar\nsudo chmod 755 /etc/init.d/sonar\nsudo chkconfig --add sonar\n</code></pre>\n<p>Once registration is done, run:</p>\n<pre><code>sudo service sonar start\n</code></pre>\n<h2>Securing the Server Behind a Proxy</h2>\n<p>This section helps you configure the SonarQube Server if you want to run it behind a proxy. This can be done for security concerns or to consolidate multiple disparate applications.</p>\n<h3>Server Configuration</h3>\n<p>To run the SonarQube server over HTTPS, you must build a standard reverse proxy infrastructure.</p>\n<p>The reverse proxy must be configured to set the value <code>X_FORWARDED_PROTO: https</code> in each HTTP request header. Without this property, redirection initiated by the SonarQube server will fall back on HTTP.</p>\n<h3>Using an Apache Proxy</h3>\n<p>We assume that you've already installed Apache 2 with module mod<em>proxy, that SonarQube is running and available on `<a href=\"http://private\">http://private</a></em>sonar<em>host:sonar</em>port/<code>and that you want to configure a Virtual Host for</code>www.public_sonar.com`.</p>\n<p>At this point, edit the HTTPd configuration file for the <code>www.public_sonar.com</code> virtual host. Include the following to expose SonarQube via <code>mod_proxy</code> at <code>http://www.public_sonar.com/</code>:</p>\n<pre><code>ProxyRequests Off\nProxyPreserveHost On\n&#x3C;VirtualHost *:80>\n  ServerName www.public_sonar.com\n  ServerAdmin admin@somecompany.com\n  ProxyPass / http://private_sonar_host:sonar_port/\n  ProxyPassReverse / http://www.public_sonar.com/\n  ErrorLog logs/somecompany/sonar/error.log\n  CustomLog logs/somecompany/sonar/access.log common\n&#x3C;/VirtualHost>\n</code></pre>\n<p>Apache configuration is going to vary based on your own application's requirements and the way you intend to expose SonarQube to the outside world. If you need more details about Apache HTTPd and mod_proxy, please see <a href=\"http://httpd.apache.org\">http://httpd.apache.org</a>.</p>\n<h3>Using Nginx</h3>\n<p>We assume that you've already installed Nginx, that you are using a Virtual Host for www.somecompany.com and that SonarQube is running and available on <code>http://sonarhost:sonarport/</code>.</p>\n<p>At this point, edit the Nginx configuration file. Include the following to expose SonarQube at <a href=\"http://www.somecompany.com/\">http://www.somecompany.com/</a>:</p>\n<pre><code># the server directive is nginx's virtual host directive\nserver {\n  # port to listen on. Can also be set to an IP:PORT\n  listen 80;\n \n  # sets the domain[s] that this vhost server requests for\n  server_name www.somecompany.com;\n \n  location / {\n    proxy_pass http://sonarhost:sonarport;\n  }\n}\n</code></pre>\n<p>Nginx configuration will vary based on your own application's requirements and the way you intend to expose SonarQube to the outside world. If you need more details about Nginx, please see <a href=\"https://www.nginx.com/resources/admin-guide/reverse-proxy/\">https://www.nginx.com/resources/admin-guide/reverse-proxy/</a>.</p>\n<p>Note that you may need to increase the max URL length since SonarQube requests can have URLs longer than 2048.</p>\n<h3>Using IIS</h3>\n<p>Please see: <a href=\"http://blog.jessehouwing.nl/2016/02/configure-ssl-for-sonarqube-on-windows.html\">http://blog.jessehouwing.nl/2016/02/configure-ssl-for-sonarqube-on-windows.html</a></p>\n<p>Note that the setup described in this blog post is not approprite for SAML through IIS.</p>","fields":{"slug":"/setup/operate-server/"}}},{"node":{"html":"<p><em>High Availability and cluster scalability are features of the <a href=\"https://redirect.sonarsource.com/editions/datacenter.html\">Data Center Edition</a>.</em></p>\n<p>Once the <a href=\"/SonarQubeChineseDoc8.1/setup/install-cluster/\">SonarQube cluster is installed</a>, you have a High Availability configuration that allows your SonarQube instance to stay up and running even if there is a crash or failure in one of the cluster's nodes. Your SonarQube cluster is also scalable, and you can add application nodes to increase your computing capabilities.</p>\n<h2>Start, Stop, or Upgrade the Cluster</h2>\n<h3>Start the Cluster</h3>\n<p>To start a cluster, you need to follow these steps in order:</p>\n<ol>\n<li>Start the search nodes</li>\n<li>Start the application nodes</li>\n</ol>\n<h3>Stop the Cluster</h3>\n<p>To stop a cluster, you need to follow these steps in order:</p>\n<ol>\n<li>Stop the application nodes</li>\n<li>Stop the search nodes</li>\n</ol>\n<h3>Upgrade SonarQube</h3>\n<ol>\n<li>Stop the cluster.</li>\n<li>Upgrade SonarQube on all nodes (application part, plugins, JDBC driver if required) following the usual upgrade procedure but without triggering the /setup phase.</li>\n<li>Once all nodes have the same binaries: restart the cluster.</li>\n<li>At this point, only one of the application nodes is up. Try to access <code>node_ip:port/setup</code> on each application node, and trigger the setup operation on the one that responds.</li>\n</ol>\n<h2>Start or Stop a Node</h2>\n<p>You can start or stop a single node in the same way as starting and stopping an instance using a single server. By default, it's a graceful shutdown where no new analysis report processing can start, but the tasks in progress are allowed to finish.</p>\n<h2>Install or Upgrade a Plugin</h2>\n<ol>\n<li>Stop the application nodes.</li>\n<li>\n<p>Install or upgrade the plugin on the application nodes.</p>\n<ul>\n<li>If upgrading, remove the old version.</li>\n<li>You don't need to install plugins on search nodes.</li>\n</ul>\n</li>\n<li>Restart the application nodes.</li>\n</ol>\n<h2>Scalability</h2>\n<p>You have the option of adding application nodes (up to 10 total application nodes) to your cluster to increase computing capabilities. </p>\n<h3>Adding an Application Node</h3>\n<p>To add an Application Node:</p>\n<ol>\n<li>\n<p>Configure your new application node in sonar.properties. The following is an example of the configuration to be added to sonar.properties for a sixth application node (server6, ip6) in a cluster with the default five servers:</p>\n<p><strong>server6</strong></p>\n<pre><code>...\nsonar.cluster.enabled=true\nsonar.cluster.hosts=ip1,ip2,ip6\nsonar.cluster.search.hosts=ip3,ip4,ip5\nsonar.cluster.node.type=application\nsonar.auth.jwtBase64Hs256Secret=YOURGENERATEDSECRET\n...\n</code></pre>\n</li>\n<li>\n<p>Update the configuration of the preexisting nodes to include your new node. </p>\n<p>While you don't need to restart the cluster after adding a node, you should ensure the configuration is up to date on all of your nodes to avoid issues when you eventually do need to restart.</p>\n</li>\n</ol>\n<h3>Removing an Application Node</h3>\n<p>When you remove an application node, make sure to update the configuration of the remaining nodes. Much like adding a node, while you don't need to restart the cluster after removing a node, you should ensure the configuration is up to date on all of your nodes to avoid issues when you eventually do need to restart.</p>\n<h2>Monitoring</h2>\n<p>CPU and RAM usage on each node have to be monitored separately with an APM. </p>\n<p>In addition, we provide a Web API <em>api/system/health</em> you can use to validate that all of the nodes in your cluster are operational.  </p>\n<ul>\n<li>GREEN: SonarQube is fully operational</li>\n<li>YELLOW: SonarQube is usable, but it needs attention in order to be fully operational</li>\n<li>RED: SonarQube is not operational</li>\n</ul>\n<p>To call it from a monitoring system without having to give admin credentials, it is possible to setup a System Passcode through the property <code>sonar.web.systemPasscode</code>. This must be configured in <em>$SONARQUBE-HOME/conf/sonar.properties</em>.</p>\n<h3>Cluster Status</h3>\n<p>On the System Info page at <strong>Administration > System</strong>, you can check whether your cluster is running safely (green) or has some nodes with problems (orange or red).</p>\n<h3>Maximum Pending Time for Tasks</h3>\n<p>On the global Background Tasks page at <strong>Administration > Projects > Background Tasks</strong>, you can see the number of <strong>pending</strong> tasks as well as the maximum <strong>pending time</strong> for the tasks in the queue. This shows the pending time of the oldest background task waiting to be processed. You can use this to evaluate if it might be worth configuring additional Compute Engine workers (Enterprise Edition) or additional nodes (Data Center Edition) to improve SonarQube performance. </p>\n<h2>Compute Engine Workers</h2>\n<p>If you change the number of <a href=\"/SonarQubeChineseDoc8.1/instance-administration/compute-engine-performance/\">Compute Engine workers</a> in the UI, you must restart each application node to have the change take effect.</p>\n<h2>Project Move</h2>\n<p>When the <a href=\"/SonarQubeChineseDoc8.1/instance-administration/project-move/\">Project Move</a> feature is used in a DC installation:</p>\n<ul>\n<li>Projects are exported on only one of the application nodes </li>\n<li>The archive of the exported projects must be copied to all the applications nodes in the target server</li>\n</ul>\n<h2>Configuration details</h2>\n<p>Start with the <a href=\"/SonarQubeChineseDoc8.1/setup/install-cluster/\">default configuration</a>; it's good in most cases. The details below are only needed in specific cases.</p>\n<p><a href=\"https://hazelcast.org/\">Hazelcast</a> is used to manage the communication between the nodes of the cluster. You don't need to install it yourself, it's provided out of the box.</p>\n<p>The following properties may be defined in the <em>$SONARQUBE-HOME/conf/sonar.properties</em> file of each node in a cluster. When defining a property that contains a list of hosts (<code>*.hosts</code>) the port is not required if the default port was not overridden in the configuration.</p>\n<h3>All nodes</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default</th>\n<th>Required</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.cluster.enabled</code></td>\n<td>Set to <code>true</code> in each node to activate the cluster mode</td>\n<td><code>false</code></td>\n<td>yes</td>\n</tr>\n<tr>\n<td><code>sonar.cluster.name</code></td>\n<td>The name of the cluster. <strong>Required if multiple clusters are present on the same network.</strong> For example this prevents mixing Production and Preproduction clusters. This will be the name stored in the Hazelcast cluster and used as the name of the Elasticsearch cluster.</td>\n<td><code>sonarqube</code></td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>sonar.cluster.search.hosts</code></td>\n<td>Comma-delimited list of search hosts in the cluster. Each item in the list must contain the port if the default <code>sonar.search.port</code> value is not used. Item format is <code>sonar.search.host</code> or <code>sonar.search.host:sonar.search.port</code>.</td>\n<td></td>\n<td>yes</td>\n</tr>\n<tr>\n<td><code>sonar.cluster.node.name</code></td>\n<td>The name of the node that is used on Elasticsearch and stored in Hazelcast member attribute (NODE_NAME) for sonar-application</td>\n<td><code>sonarqube-{UUID}</code></td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>sonar.cluster.node.type</code></td>\n<td>Type of node: either <code>application</code> or <code>search</code></td>\n<td></td>\n<td>yes</td>\n</tr>\n<tr>\n<td><code>sonar.cluster.node.host</code></td>\n<td>IP address of the network card that will be used by Hazelcast to communicate with the members of the cluster. If not specified, the first interface will be chosen (note that loopback interfaces won't be selected)</td>\n<td></td>\n<td>no</td>\n</tr>\n</tbody>\n</table>\n<h3>Application nodes</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Required</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.cluster.hosts</code></td>\n<td>Comma-delimited list of all <strong>application</strong> hosts in the cluster. This value must contain <strong>only application hosts</strong>. Each item in the list must contain the port if the default <code>sonar.cluster.node.port</code> value is not used. Item format is <code>sonar.cluster.node.host</code> or <code>sonar.cluster.node.host:sonar.cluster.node.port</code>.</td>\n<td>yes</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.cluster.node.port</code></td>\n<td>The Hazelcast port for communication with each application member of the cluster. Default: <code>9003</code></td>\n<td>no</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.cluster.node.web.port</code></td>\n<td>Hazelcast port for communication with the WebServer process. Port must be accessible to all other search and application nodes. If not specified, a dynamic port will be chosen and all ports must be open among the nodes.</td>\n<td>no</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.cluster.node.ce.port</code></td>\n<td>Hazelcast port for communication with the ComputeEngine process. Port must be accessible to all other search and application nodes. If not specified, a dynamic port will be chosen and all ports must be open among the nodes.</td>\n<td>no</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sonar.auth.jwtBase64Hs256Secret</code></td>\n<td>Required for authentication with multiple web servers. It is used to keep user sessions opened when they are redirected from one web server to another by the load balancer. See <em>$SONARQUBE-HOME/conf/sonar.properties</em>) for details about how to generate this secret key.</td>\n<td>yes</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Search nodes</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default</th>\n<th>Required</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.search.host</code></td>\n<td>Listening IP. IP must be accessible to all other search and application nodes.</td>\n<td><code>127.0.0.1</code></td>\n<td>yes</td>\n</tr>\n<tr>\n<td><code>sonar.search.port</code></td>\n<td>Listening port. Port must be accessible to all other search and application nodes.</td>\n<td><code>9001</code></td>\n<td>yes</td>\n</tr>\n<tr>\n<td><code>sonar.search.initialStateTimeout</code></td>\n<td>The timeout for the Elasticsearch nodes to elect a master node. The default value will be fine in most cases, but in a situation where startup is failing because of a timeout, this may need to be adjusted. The value must be set in the format: <code>{integer}{timeunit}</code>. Valid <code>{timeunit}</code> values are: <code>ms</code> (milliseconds); <code>s</code> (seconds); <code>m</code> (minutes); <code>h</code> (hours); <code>d</code> (days); <code>w</code> (weeks)</td>\n<td>cluster: 120s; standalone: 30s</td>\n<td>no</td>\n</tr>\n</tbody>\n</table>\n<h2>Limitations</h2>\n<ul>\n<li>Cluster downtime is required for SonarQube upgrades or plugin installations.</li>\n<li>All application nodes must be stopped when installing, uninstalling or upgrading a plugin.</li>\n<li>Plugins are not shared, it means if you install/uninstall/upgrade a given plugin in one application node, you need to perform the same actions on the other application node.</li>\n<li>There is no way to perform actions on the cluster from a central app - all operations must be done manually on each node of the cluster.</li>\n</ul>\n<h2>Frequently Asked Questions</h2>\n<h3>Does Elasticsearch discover automatically other ES nodes?</h3>\n<p>No. Multicast is disabled. All hosts (IP+port) must be listed.</p>\n<h3>Can different nodes run on the same machine?</h3>\n<p>Yes, but the best is to have 5 machines to be really resilient to failures.</p>\n<h3>Can the members of a cluster be discovered automatically?</h3>\n<p>No, all nodes must be configured in <em>$SONARQUBE-HOME/conf/sonar.properties</em></p>","fields":{"slug":"/setup/operate-cluster/"}}},{"node":{"html":"<h3>Get Started in Two Minutes</h3>\n<p>To give the SonarQube Platform a quick try, follow the <a href=\"/SonarQubeChineseDoc8.1/setup/get-started-2-minutes/\">Get Started in Two Minutes Guide</a>.</p>\n<h3>Install a Production Instance</h3>\n<p>To install a production instance, read the <a href=\"/SonarQubeChineseDoc8.1/requirements/requirements/\">Requirements</a>, and then follow the <a href=\"/SonarQubeChineseDoc8.1/setup/install-server/\">Installation Guide</a>.</p>\n<h3>After the Installation</h3>\n<p>After your server is up and running, you'll need to install one or more <a href=\"https://docs.sonarqube.org/display/SCAN\">SonarScanners</a> on the machines where analysis will be performed.</p>\n<h3>Upgrade your Production Instance</h3>\n<p>To upgrade your production instance, read the <a href=\"/SonarQubeChineseDoc8.1/setup/upgrading/\">Upgrade Guide</a> and the relevant, version-specific upgrade notes.</p>","fields":{"slug":"/setup/overview/"}}},{"node":{"html":"<h2>Checking the logs</h2>\n<p>If you're having trouble starting your server for the first time (or any subsequent time!) the first thing to do is check your server logs. You'll find them in <code>$SONARQUBE_HOME/logs</code>:</p>\n<ul>\n<li>sonar.log - Log for the main process. Holds general information about startup and shutdown. You'll get overall status here but not details. Look to the other logs for that.</li>\n<li>web.log - Information about initial connection to the database, database migration and reindexing, and the processing of HTTP requests. This includes database and search engine logs related to those requests.</li>\n<li>ce.log - Information about background task processing and the database and search engine logs related to those tasks.</li>\n<li>es.log - Ops information from the search engine, such as Elasticsearch startup, health status changes, cluster-, node- and index-level operations, etc.</li>\n</ul>\n<h2>Understanding the logs</h2>\n<p>When there's an error, you'll very often find a stacktrace in the logs. If you're not familiar stacktraces, they can be intimidatingly tall walls of incomprehensible text. As a sample, here's a fairly short one:</p>\n<pre><code>java.lang.IllegalStateException: Unable to blame file **/**/foo.java\n    at org.sonarsource.scm.git.JGitBlameCommand.blame(JGitBlameCommand.java:128)\n    at org.sonarsource.scm.git.JGitBlameCommand.access$000(JGitBlameCommand.java:44)\n    at org.sonarsource.scm.git.JGitBlameCommand$1.call(JGitBlameCommand.java:112)\n    at org.sonarsource.scm.git.JGitBlameCommand$1.call(JGitBlameCommand.java:109)\n    at java.util.concurrent.FutureTask.run(Unknown Source)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n    at java.lang.Thread.run(Unknown Source)\nCaused by: java.lang.NullPointerException\n    at org.eclipse.jgit.treewalk.filter.PathFilter.create(PathFilter.java:77)\n    at org.eclipse.jgit.blame.BlameGenerator.&#x3C;init>(BlameGenerator.java:161)\n    at org.eclipse.jgit.api.BlameCommand.call(BlameCommand.java:203)\n    at org.sonarsource.scm.git.JGitBlameCommand.blame(JGitBlameCommand.java:126)\n    ... 7 more\n</code></pre>\n<p>Unless you wrote the code that produced this error, you really only care about:</p>\n<ul>\n<li>the first line, which ought to have a human-readable message after the colon. In this case, it's Unable to blame file <code>**/**/foo.java</code></li>\n<li>and any line that starts with <code>Caused by:</code>. There are often several <code>Caused by</code> lines, and indentation makes them easy to find as you scroll through the error. Be sure to read each of these lines. Very often one of them - the last one or next to last one - contains the real problem.</li>\n</ul>\n<h2>Recovering from Elasticsearch read-only indices</h2>\n<p>You may encounter issues with Elasticsearch (ES) indices becoming locked in read-only mode. ES requires free disk space available and implements a safety mechanism to prevent the disk from being flooded with index data that:</p>\n<ul>\n<li><strong>For non-DCE</strong> –  locks all indices in read-only mode when the 95% used disk usage watermark is reached.  </li>\n<li><strong>For DCE</strong> – locks all or some indices in read-only mode when one or more node reaches the 95% used disk usage watermark.</li>\n</ul>\n<p>ES shows warnings in the logs as soon as disk usage reaches 85% and 90%. At 95% usage and above, indices turning read-only causes errors in the web and compute engine.</p>\n<p>Freeing disk space will <em>not</em> automatically make the indices return to read-write. To make indices read-write, you also need to:</p>\n<ul>\n<li><strong>For non-DCE</strong> – restart SonarQube.</li>\n<li><strong>For DCE</strong> – restart <em>ALL</em> application nodes (the first application node restarted after all have been stopped will make the indices read-write).  </li>\n</ul>\n<p>SonarQube's built-in resilience mechanism allows SonarQube to eventually recover from the indices being behind data in the DB (this process can take a while).</p>\n<p>If you still have inconsistencies, you'll need to rebuild the indices (this operation can take a long time depending on the number of issues and components):</p>\n<p><strong>non-DCE:</strong>  </p>\n<ol>\n<li>Stop SonarQube  </li>\n<li>Delete the data/es6 directory  </li>\n<li>Restart SonarQube  </li>\n</ol>\n<p><strong>DCE:</strong>  </p>\n<ol>\n<li>\n<p>Stop the whole cluster (ES and application nodes)  </p>\n</li>\n<li>\n<p>Delete the data/es6 directory on each ES node  </p>\n</li>\n<li>\n<p>Restart the whole cluster  </p>\n</li>\n</ol>\n<p><strong>Note:</strong> See <a href=\"/SonarQubeChineseDoc8.1/setup/operate-cluster/\">Configure &#x26; Operate a Cluster</a> for information on stopping and starting a cluster.</p>","fields":{"slug":"/setup/troubleshooting/"}}},{"node":{"html":"<p>Upgrading across multiple, non-LTS versions is handled automatically. However, if you have an LTS version in your migration path, you must first migrate to this LTS and then migrate to your target version.</p>\n<p>Example 1 : 5.1 -> 7.0, migration path is 5.1 -> 5.6.7 LTS -> 6.7.x LTS -> 7.0\nExample 2 : 6.2 -> 6.7, migration path is 6.2 -> 6.7.x LTS (where x is the latest patch available for 6.7 - you don't need to install all the intermediary patches, just take the latest)</p>\n<h2>Upgrade Guide</h2>\n<p>This is a generic upgrade guide. Carefully read the <a href=\"/SonarQubeChineseDoc8.1/setup/upgrade-notes/\">Release Upgrade Notes</a> of your target version and of any intermediate version(s).</p>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p><strong>Planning to Upgrade to a Commercial Edition?</strong><br>\nIf you are moving to 6.7 LTS and installing a Commercial Edition, please read this <a href=\"https://docs.sonarqube.org/display/SONARQUBE67/SonarSource+Editions\">documentation</a>.</p></div></div>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>Before you start, back up your SonarQube Database. Upgrade problems are rare, but you'll want the backup if anything does happen.</p></div></div>\n<ol>\n<li>Download and unzip the SonarQube distribution of your edition in a fresh directory, let's say <code>$NEW_SONARQUBE_HOME</code></li>\n<li>Manually install the non-default plugins that are compatible with your version of SonarQube. Use the <a href=\"https://docs.sonarqube.org/display/PLUG/Plugin+Version+Matrix\">Compatibility Matrix</a> to ensure that the versions you install are compatible with your server version. Note that the most recent versions of all SonarSource code analyzers available in your edition are installed by default. Simply copying plugins from the old server to the new is not recommended; incompatible or duplicate plugins could cause startup errors.</li>\n<li>Update the contents of <code>sonar.properties</code> and <code>wrapper.conf</code> files (in <code>$NEW_SONARQUBE_HOME/conf</code>) with the settings of the related files in the <code>$OLD_SONARQUBE_HOME/conf</code> directory (web server URL, database, ldap settings, etc.). Do not copy-paste the old files.\nIf you are using the Oracle DB, copy its JDBC driver into <code>$NEW_SONARQUBE_HOME/extensions/jdbc-driver/oracle</code></li>\n<li>Stop your old SonarQube Server</li>\n<li>Start your new SonarQube Server</li>\n<li>Browse to <code>http://yourSonarQubeServerURL/setup</code> and follow the setup instructions</li>\n<li>Reanalyze your projects to get fresh data</li>\n</ol>\n<h2>Additional Information</h2>\n<h3>Oracle Clean-up</h3>\n<p>Starting with version 6.6, there's an additional step you may want to perform if you're using Oracle. On Oracle, the database columns to be dropped are now marked as UNUSED and are not physically dropped anymore. To reclaim disk space, Oracle administrators must drop these unused columns manually. The SQL request is <code>ALTER TABLE foo DROP UNUSED COLUMNS</code>. The relevant tables are listed in the system table <code>all_unused_col_tabs</code>.</p>\n<h3>Additional Database Maintenance</h3>\n<p>Refreshing your database's statistics and rebuilding your database's indices are recommended once the technical upgrade is done (just before the very last step).</p>\n<p>For PostgreSQL, that means executing <code>VACUUM FULL</code>. According to the PostgreSQL documentation:</p>\n<pre><code>In normal PostgreSQL operation, tuples that are deleted or obsoleted by an update are not physically removed from their table; they remain present until a VACUUM is done.\n</code></pre>\n<h3>Scanner Update</h3>\n<p>When upgrading SonarQube, you should also make sure you’re using the latest versions of the SonarQube scanners to take advantage of features and fixes on the scanner side. Please check the documentation pages of the Scanners you use for the most recent version compatible with SonarQube and your build tools.</p>\n<h3>SonarQube as a Linux or Windows Service</h3>\n<p>If you use external configuration, such as a script or Windows Service to control your server, you'll need to update it to point to <code>$NEW_SONARQUBE_HOME</code>.</p>\n<p>In case you used the InstallNTService.bat to install SonarQube as a Windows Service, run the $OLD<em>SONARQUBE</em>HOME/bin/.../UninstallNTService.bat before running the InstallNTService.bat of the $NEW<em>SONARQUBE</em>HOME.</p>\n<h2>Release Upgrade Notes</h2>\n<p>Usually SonarQube releases come with some specific recommendations for upgrading from the previous version. You should read the upgrade notes for each version between your current version and the target version.</p>","fields":{"slug":"/setup/upgrading/"}}},{"node":{"html":"<h2>Release 8.2 Upgrade Notes</h2>\n<p><strong>PostgreSQL 12.1 support</strong><br>\nSonarQube 8.2+ now support PostgreSQL 9.3 - 12.</p>\n<p><a href=\"https://jira.sonarsource.com/secure/ReleaseNote.jspa?projectId=10930&#x26;version=15301\">Full Release Notes</a></p>\n<h2>Release 8.1 Upgrade Notes</h2>\n<p><strong>Short-lived and Long-lived branches are now just branches</strong><br>\nThe concept for branches is now simplified, with a single way to handle all of them. (<a href=\"https://jira.sonarsource.com/browse/MMF-1786\">MMF-1786</a>).</p>\n<ul>\n<li>Analysis is the same for all branches. The parameter <code>sonar.branch.target</code> is no longer used and can be removed.</li>\n<li>All branches behave as previous Long-lived branches: all measures are available. The New Code period is configurable and starts by default after the first analysis. The Quality Gate check applies on all conditions.</li>\n<li>As a consequence, branches that were previously Short-Lived branches may display incomplete measures before they are analyzed again. With the first analysis, measures on New Code and the Quality Gate status may change.</li>\n<li>New housekeeping settings replace the Long-lived branch pattern and allow you to choose the branches which should be kept when inactive.</li>\n<li>Detection of new issues in branches and PRs is simplified. The list of issues reported as new may change slighlty. (<a href=\"https://jira.sonarsource.com/browse/SONAR-12627\">SONAR-12627</a>).</li>\n</ul>\n<p><strong>Configuration of Pull Request decoration</strong><br>\nThe configuration of Pull Request decoration changes. Previous settings are replaced by a new configuration in the UI. Also, decoration of Pull Requests now supports multiple instances of a same ALM provider in Enterprise Edition and above. (<a href=\"https://jira.sonarsource.com/browse/MMF-1814\">MMF-1814</a>).</p>\n<p><strong>Deprecated web services and parameters dropped</strong><br>\nSome Web services and parameters which were deprecated in 6.x versions have been dropped, including some related to Quality Profiles. See Full Release Notes for more info.</p>\n<p><a href=\"https://jira.sonarsource.com/secure/ReleaseNote.jspa?projectId=10930&#x26;version=15243\">Full Release Notes</a></p>\n<h2>Release 8.0 Upgrade Notes</h2>\n<p><strong>GitHub, LDAP, and SAML authentication now built in</strong><br>\nGitHub, LDAP, and SAML authentication is now built in. If you were using the authentication plugins (sonar-ldap, sonar-auth-github, and sonar-auth-saml), you need to remove them from SonarQube before upgrading. (<a href=\"https://jira.sonarsource.com/browse/SONAR-12471\">SONAR-12471</a>).</p>\n<p><strong>GitLab Authentication now available</strong><br>\nGitLab OAuth2 authentication is now available in all editions. If you were using the community plugin, you need to remove it from SonarQube before upgrading. The configured variable of the plugin will be migrated, so the authentication will work without having to rewrite the configuration. Due to changes in group mapping, GitLab subgroups mapped using the community plugin will need to be renamed in SonarQube for the mapping to work. (<a href=\"https://jira.sonarsource.com/browse/SONAR-12460\">SONAR-12460</a>).</p>\n<p><strong>New Code Period values simplified</strong>\nIt's now easier to set your New Code Period in the UI. With the new settings, specific analysis has replaced setting the New Code Period to a specific date or version. If you were using a specific date or version for your New Code Period, now you'll need to use a specific analysis. See the <a href=\"/SonarQubeChineseDoc8.1/project-administration/new-code-period/\">Setting Your New Code Period</a> for more info. (<a href=\"https://jira.sonarsource.com/browse/MMF-1579\">MMF-1579</a>).  </p>\n<p><a href=\"https://jira.sonarsource.com/secure/ReleaseNote.jspa?projectId=10930&#x26;version=14962\">Full Release Notes</a></p>\n<h2>Release 7.9.1 LTS Upgrade Notes</h2>\n<p><strong>Upgrade on Microsoft SQL Server fixed</strong><br>\nUpgrade failure and performance issues with Microsoft SQL Server have been fixed (<a href=\"https://jira.sonarsource.com/browse/SONAR-12260\">SONAR-12260</a>, <a href=\"https://jira.sonarsource.com/browse/SONAR-12251\">SONAR-12251</a>).</p>\n<p><strong>Pylint execution on Windows fixed</strong><br>\nAutomatic execution of Pylint during python analysis on Windows has been fixed. Note that automatic execution of pylint during analysis remains deprecated on all OSes. (<a href=\"https://jira.sonarsource.com/browse/SONAR-12274\">SONAR-12274</a>).</p>\n<p><a href=\"https://jira.sonarsource.com/secure/ReleaseNote.jspa?projectId=10930&#x26;version=15029\">Full Release Notes</a></p>\n<h2>Release 7.9 LTS Upgrade Notes</h2>\n<p><strong>Upgrade can fail on Microsoft SQL Server</strong><br>\nMigration from SonarQube v6.7.x to v7.9 fails on Microsoft SQL Server (<a href=\"https://jira.sonarsource.com/browse/SONAR-12260\">SONAR-12260</a>). </p>\n<p><strong>MySQL No Longer Supported</strong><br>\nSonarQube no longer supports MySQL. To migrate from MySQL to a supported database, see the free <a href=\"https://github.com/SonarSource/mysql-migrator\">MySQL Migrator tool</a>.</p>\n<p><strong>Java 11 Required</strong><br>\nThe SonarQube server now requires Java 11. Analyses may continue to use Java 8 if necessary.</p>\n<p><strong>Pylint should be run manually</strong><br>\nRunning Pylint automatically during python analysis has been deprecated. Additionally, it is broken in this version on Windows. If needed, Pylint must be run ahead of time and the resulting report passed in to analysis. </p>\n<p><a href=\"https://jira.sonarsource.com/secure/ReleaseNote.jspa?projectId=10930&#x26;version=14945\">Full Release Notes</a></p>\n<h2>Release 7.8 Upgrade Notes</h2>\n<p><strong>MySQL Deprecation and Migration</strong><br>\nThis is the last version that will support MySQL. To migrate from MySQL to a supported database, see the free <a href=\"https://github.com/SonarSource/mysql-migrator\">MySQL Migrator tool</a>.</p>\n<p><strong>Elasticsearch bootstrap checks enforced</strong><br>\nSonarQube will now fail to start if Elasticsearch's bootstrap checks fail. That means you may need to <a href=\"/SonarQubeChineseDoc8.1/requirements/requirements/\">adjust the maximum number of open files and processes</a> for the SonarQube user as part of this upgrade (<a href=\"https://jira.sonarsource.com/browse/SONAR-11264\">SONAR-11264</a>). </p>\n<p><strong>Scanner version compatibility</strong><br>\nOnly the following scanner versions are compatible with SonarQube 7.8:</p>\n<ul>\n<li>SonarQube Scanner CLI 2.9+</li>\n<li>SonarQube Scanner Maven 3.3.0.603+</li>\n<li>SonarQube Scanner Gradle 2.3+</li>\n</ul>\n<p><strong>Analysis fails with old branch parameter</strong>\n<code>sonar.branch</code> was deprecated in 6.7. With this version analysis fails when it is used. Where it is still in use, simply remove the <code>sonar.branch</code> property and update your <code>sonar.projectKey</code> value to <code>key:branch</code>.</p>\n<p><strong>Notifications changes</strong><br>\nSeveral changes have been made to notificatons. The notifications algorithm has been replaced with one that offers better performance during background task processing. Issue change notifications spawned by analysis or bulk change now generate only one email per event rather than one email per issue. The ability to subscribe globally to new issues notifications and notifications for issues resolved as False Positive or Won't fix has been dropped, as have all such subscriptions. Issue-related notifications on PRs have also been dropped.</p>\n<p><strong>Webhook payloads now signed</strong><br>\nIt is now possible to verify that webhook payloads actually come from SonarQube via the <code>X-Sonar-Webhook-HMAC-SHA256</code> HTTP header. (<a href=\"https://jira.sonarsource.com/browse/SONAR-12000\">SONAR-12000</a>)</p>\n<p><strong>Graceful shutdown</strong><br>\nThe SonarQube server now shuts down gracefully. I.E. it completes any currently-processing background tasks before shutting down. This may mean that shutdown takes longer than previously. (<a href=\"https://jira.sonarsource.com/browse/SONAR-12043\">SONAR-12043</a>)</p>\n<p><strong>Duplication density correction</strong><br>\nA bug affecting the calculation of duplication density has been fixed. Each project's duplication density value will likely rise at the next analysis, possibly affecting Quality Gate status. (<a href=\"https://jira.sonarsource.com/browse/SONAR-12188\">SONAR-12188</a>)</p>\n<p><strong>Additional authentication methods embedded</strong><br>\nThe SAML and GitHub Authentication plugins are now embedded in all editions (<a href=\"https://jira.sonarsource.com/browse/SONAR-11894\">SONAR-11894</a>)</p>\n<p><strong>Deprecated web services dropped</strong><br>\nWeb services that were deprecated in 5.x versions have been dropped. (<a href=\"https://jira.sonarsource.com/browse/SONAR-11876\">SONAR-11876</a>)</p>\n<p><a href=\"https://jira.sonarsource.com/secure/ReleaseNote.jspa?projectId=10930&#x26;version=14939\">Full Release Notes</a></p>\n<h2>Release 7.7 Upgrade Notes</h2>\n<p><strong>Deprecated parameters dropped</strong><br>\n<code>sonar.language</code>, and  <code>sonar.profile</code>, both deprecated since 4.5, are dropped in this version as is <code>sonar.analysis.mode</code>, which as been deprecated since 6.6. These now-unrecognized parameters will simply be ignored, rather than failing analysis.</p>\n<p><strong>PR decoration below GitHub Enterprise 2.14 swapped for GitHub checks</strong><br>\nThis version adds support for GitHub Enterprise (GHE) checks, which were introduced in GHE 2.14, and drops support for PR decoration in GHE versions prior to 2.14. To use the new checks implementation, an application will need to be created in GHE, and further configuration will be required via the SonarQube UI. (<a href=\"/SonarQubeChineseDoc8.1/instance-administration/github-application/\">Details in the docs.</a>.)</p>\n<p><strong>ElasticSearch update requires index rebuild, potentially more filespace</strong><br>\nWhile it is generally possible to keep ElasticSearch indices in an upgrade (see <a href=\"/SonarQubeChineseDoc8.1/setup/install-server/\">Configuring the Elasticsearch storage path</a>), this version's upgrade of ElasticSearch will force all indices to be rebuilt. Additionally, more filespace may be required for this version's data (<a href=\"https://jira.sonarsource.com/browse/SONAR-11826\">SONAR-11826</a>).</p>\n<p><strong>32-bit architecture support dropped</strong><br>\nSupport for 32-bit architectures has been dropped as part of this version's upgrade of ElasticSearch, and those scripts removed from the distributions. </p>\n<p><strong>Deprecated metrics dropped</strong><br>\nSeveral deprecated (<a href=\"https://jira.sonarsource.com/browse/SONAR-11794\">SONAR-1794</a>) or obsolete (<a href=\"https://jira.sonarsource.com/browse/SONAR-11664\">SONAR-11664</a>) metrics have been dropped from the platform.</p>\n<p><a href=\"https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&#x26;version=14848\">Full Release Notes</a></p>\n<h2>Release 7.6 Upgrade Notes</h2>\n<p><strong>Quality Gates Simplified</strong><br>\nQuality Gates have been streamlined to remove a number of confusing options. Conditions previously using the \"on new code\" checkbox will be migrated to On New Code metrics. For example, a condition previously using the overall Coverage metric with the \"on new code\" checkbox enabled will be migrated to a condition using the Coverage on New Code metric. The ability to set Warning conditions has been dropped, as have some metric/operator conditions have been removed. Conditions using dropped options will be removed in the upgrade. (<a href=\"https://jira.sonarsource.com/browse/MMF-473\">MMF-473</a>)</p>\n<p><strong>Concept of module removed from the UI</strong><br>\nThis version drops the concept of module from the interface. There is no longer a homepage presentation for any level below the project itself. Additionally, the presentation of the project has been updated in the Measures and Code pages to display the project tree as it is in the file system. For the most part (see below) analysis of multi-module projects will continue to work as it has.</p>\n<p><strong>Multi-Module analysis properties removed</strong><br>\nMulti-module analysis configuration may need to be changed (<a href=\"https://jira.sonarsource.com/browse/MMF-365\">MMF-365</a>):</p>\n<ul>\n<li>When exclusions based on file paths are specified in the analysis properties at project level, those file paths must be relative to the project / analysis root. Paths specified at project level will continue to be re-applied at module level but will raise a warning. This backward-compatibile behavior is considered deprecated and will be dropped in a future version. </li>\n<li>Specifying source encoding, and issue inclusions / exclusions at module level is no longer supported.</li>\n</ul>\n<p><strong>Incompatibility with Findbugs plugin version 3.9.1 and earlier</strong><br>\nThis version embeds SonarHTML, which analyzes both <code>.html</code> and <code>.jsp</code> files. Because of this change, the community plugin Findbugs versions 3.9.1 and earlier are incompatible with SonarQube 7.6+ (<a href=\"https://jira.sonarsource.com/browse/MMF-1567\">MMF-1567</a>).</p>\n<p><a href=\"https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&#x26;version=14693\">Full Release Notes</a></p>\n<h2>Release 7.5 Upgrade Notes</h2>\n<p><strong>More Issues Backdated</strong><br>\nAdditional cases of issue backdating have been added, so fewer genuinely old issues will be reported in the New Code period (<a href=\"https://jira.sonarsource.com/browse/MMF-1287\">MMF-1287</a>)</p>\n<p><strong>Two Vulnerabilities Patched</strong><br>\nAn open redirect vulnerability on login was corrected (<a href=\"https://jira.sonarsource.com/browse/SONAR-11475\">SONAR-11475</a>).</p>\n<p>An XSS vulnerability in custom project links was also patched. (<a href=\"https://jira.sonarsource.com/browse/SONAR-11506\">SONAR-11506</a>).</p>\n<p><strong>Deadlock Fixed</strong><br>\nThe deadlock that could occur with the combination of </p>\n<ul>\n<li>SQL Server</li>\n<li>Multiple workers</li>\n<li>Analysis of projects and portfolios  </li>\n</ul>\n<p>has been fixed (<a href=\"https://jira.sonarsource.com/browse/SONAR-11467\">SONAR-11467</a>).</p>\n<p><strong>DB Connection Pool Defaults Restored</strong><br>\nDatabase connection pool defaults have been restored to their pre-SonarQube 7.4 values. They were inadvertently affected by a change of connection pooling in 7.4 (<a href=\"https://jira.sonarsource.com/browse/SONAR-11539\">SONAR-11539</a>). </p>\n<p><strong>Database Name in JDBC URL Now Case-Sensitive</strong>\nFor MSSQL users, a driver upgrade rendered the database name case-sensitive in the JDBC URL (<a href=\"https://jira.sonarsource.com/browse/SONAR-11443\">SONAR-11443</a>).</p>\n<p><a href=\"https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&#x26;version=14693\">Full Release Notes</a></p>\n<h2>Release 7.4 Upgrade Notes</h2>\n<p><strong>Analysis Failure on Invalid New Code Period</strong><br>\nAnalysis will fail if the New Code Period (see below) is not set to one of:</p>\n<ul>\n<li>valid, in-the-past date</li>\n<li>positive integer (number of days)</li>\n<li><code>previous_version</code></li>\n<li>the version string of an existing snapshot  </li>\n</ul>\n<p>For more, see <a href=\"https://jira.sonarsource.com/browse/SONAR-10555\">SONAR-10555</a></p>\n<p><strong>New Create Portfolios and Create Applications permissions</strong><br>\nTwo distinct new create permissions have been added. Users who have any creation permission will see a new \"+\" item in the top menu giving access to these permissions. For more, see the Global Permissions topic in <a href=\"/SonarQubeChineseDoc8.1/instance-administration/security/\">Security</a> </p>\n<p><strong>Issues from third party Roslyn analyzers</strong><br>\nAnalyzing a C# / VB.NET solution now automatically imports issues found by attached Roslyn analyzers into SonarQube, and no longer suppresses them from the MSBuild output. The Quality Gate status of projects may be impacted.</p>\n<p><strong>More memory may be needed for analysis</strong><br>\nChanges in the advanced security analysis available in Developer Edition and above may mean that a larger heap is needed during analysis.</p>\n<p><strong>Analysis warnings in UI</strong><br>\nSome <code>WARN</code> messages generated during analysis are now available via the UI (<a href=\"https://jira.sonarsource.com/browse/MMF-1244\">MMF-1244</a>). More messages will be available as new versions of language analyzers are released.</p>\n<p><strong>\"Leak\" replaced with \"New Code\"</strong><br>\nWording has been updated throughout the interface to replace \"Leak\" and \"Leak Period\" with \"New Code\" and \"New Code Period\".</p>\n<p><a href=\"https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&#x26;version=14549\">Full release notes</a></p>\n<h2>Release 7.3 Upgrade Notes</h2>\n<p><strong>New \"Administer Security Hotspots\" Permission</strong><br>\nDuring the upgrade, the new \"Administer Security Hotspots\" permission is granted to all users/groups who already have the \"Administer Issues\" permission.</p>\n<p><strong>Expanded Compute Engine Logs</strong><br>\nStarting with this version, Compute Engine logs will be more verbose. These logs are rotated automatically, but on a daily basis, not based on file size. </p>\n<p><strong>PostgreSQL &#x3C; 9.3 No Longer Supported</strong><br>\nSonarQube 7.3+ only supports PostgreSQL 9.3 to 10. SonarQube will not start if you are using a lower version of PostgreSQL.</p>\n<p><strong>Some 3rd-party Plugins Incompatible</strong><br>\nAPIs deprecated before SonarQube 5.6 are dropped in this version, making some third-party plugins incompatible. It is always advised to check plugin compatibility in the Plugin Version Matrix with each new upgrade, and more so for this version. </p>\n<p><a href=\"https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&#x26;version=14464\">Full release notes</a></p>\n<h2>Release 7.2 Upgrade Notes</h2>\n<p><strong>License Incompatibility</strong><br>\n<strong>Users coming from 6.7.5 must not upgrade to this version.</strong> Your license will be incompatible. Instead, if you seek an upgrade to an intermediate version before the next L.T.S. version, you must start from 7.3 or higher.</p>\n<p><strong>Pull Request Analysis</strong><br>\nPull Requests are now a first class citizen feature in SonarQube for Developer, Enterprise and Data Center Edition users.</p>\n<p>If you are using GitHub, you need to be sure to NOT have the GitHub Plugin in your SONARQUBE_HOME/extensions/plugins directory.</p>\n<p><strong>New Edition Packaging</strong><br>\nSonarSource Commercial Editions are now distributed individually, so you directly get the features and functionalities that match your needs. This means that upgrade/downgrade from one edition to another is no longer possible within the SonarQube Marketplace. In order to use a different edition you must download its dedicated package, and have a license ready for using that edition.</p>\n<p><strong>Deprecated Features</strong><br>\nSonarQube 7.2 is the last version supporting PostgreSQL &#x3C; 9.3. Starting from SonarQube 7.3 the minimal supported version of PostgreSQL will be 9.3: SONAR-10668</p>\n<p><a href=\"https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&#x26;version=14213\">Full release notes</a></p>\n<h2>Release 7.1 Upgrade Notes</h2>\n<p><strong>License Incompatibility</strong><br>\n<strong>Users coming from 6.7.5 must not upgrade to this version.</strong> Your license will be incompatible. Instead, if you seek an upgrade to an intermediate version before the next L.T.S. version, you must start from 7.3 or higher.</p>\n<p><strong>Live Portfolios</strong><br>\nPortfolio measures are now updated without having to explicitly trigger recalculation. As a result, the \"views\" scanner task no longer has any effect, and will fail with a clear error message. </p>\n<p><strong>Deprecated Features</strong><br>\nSupport for MySQL is deprecated for all editions below Data Center Edition (see below).</p>\n<p><strong>Dropped Features</strong>  </p>\n<ul>\n<li>Support for MySQL in Data Center Edition.</li>\n<li>The \"accessors\" metric, which was deprecated in SonarQube 5.0.</li>\n</ul>\n<p><a href=\"https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&#x26;version=14178\">Full release notes</a></p>\n<h2>Release 7.0 Upgrade Notes</h2>\n<p><strong>License incompatibility</strong><br>\n<strong>Users coming from 6.7.5 must not upgrade to this version.</strong> Your license will be incompatible. Instead, if you seek an upgrade to an intermediate version before the next L.T.S. version, you must start from 7.3 or higher.</p>\n<p><strong>Measures: Live Update</strong><br>\nProject measures, including the Quality Gate status, are computed without having to trigger another code scan when issue changes may impact them.</p>\n<p><strong>Built-In Read-Only Quality Gate</strong><br>\nIn order to make clear the default, minimum and recommended criteria Quality Gates, the \"Sonar way\" Quality Gate is now read-only, and the default if one is not already set. It may be updated automatically at each upgrade of SonarQube.</p>\n<p><strong>Dropped Features</strong><br>\nIt's no longer possible to unset the default Quality Gate. </p>\n<p><a href=\"https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&#x26;version=14041\">Full release notes</a></p>\n<h2>Release 6.7.5 Upgrade Notes</h2>\n<p><strong>Commercial Edition Must Be Upgraded</strong><br>\nBecause a new server identifier will be generated at upgrade to this version, startup will fail unless you upgrade your commercial edition to the latest compatible version. I.E. don't just copy over your edition plugins from one instance to the next, but make sure to download the latest edition bundle.</p>\n<p><strong>SonarLint Must Be Upgraded</strong><br>\nAnalyzers provided as part of a commercial package will be disabled in old versions of SonarLint. SonarLint users must upgrade to the latest available version:</p>\n<ul>\n<li>SonarLint for Eclipse: 3.3+.</li>\n<li>SonarLint for IntelliJ: 3.1+</li>\n</ul>\n<p><strong>Multi-Version Upgrade</strong><br>\nDon't forget to read all the intermediate upgrade notes if you're upgrading more than a single version.</p>\n<p><a href=\"https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&#x26;version=14467\">Full release notes</a></p>\n<h2>Release 6.7 Upgrade Notes</h2>\n<p><strong>Drop of Issues Report</strong><br>\nThe deprecated Issues Report feature has been removed.</p>\n<p><a href=\"https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&#x26;version=13972\">Full release notes</a></p>","fields":{"slug":"/setup/upgrade-notes/"}}},{"node":{"html":"<p><em>Portfolios and Applications are available as part of the <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">Enterprise Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em></p>\n<h2>Permissions</h2>\n<p>Users with the Create Portfolios or Create Applications permission have access to the creation interfaces from the \"+\" item in the top menu.  </p>\n<p>Global Administrators  have access to the overall Portfolio and Application administration interface at <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/extension/governance/views_console\">Administration > Configuration > Portfolios</a></strong>. From this page, Portfolios and Applications can be created and edited. </p>\n<p>Users of either type can edit an individual Portfolio or Application definition from the lower-level <strong>Administration > Edit Definition</strong> interface.</p>\n<p>Global Administrators also have access to the Projects Management page at <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/projects_management\">Administration > Projects > Management</a></strong>. Changing the selection mechanism on this page to “Portfolios” or “Applications” lets you manage the Portfolios or Applications of your SonarQube instance. The dropdown menu to the right of each item lets you edit permissions, apply Permission Templates or restore access to a Portfolio or Application.</p>\n<h2>Populating Portfolios</h2>\n<p>Once your Portfolio exists, you can populate it with any mix of projects, Applications, and sub-portfolios. Applications may only be populated with projects.</p>\n<h2>Adding a Sub-portfolio</h2>\n<p>To add a sub-portfolio, click on “Add Portfolio” at the top of the third column, and choose:</p>\n<ul>\n<li><strong>Standard</strong> - This option allows you to create a new sub-Portfolio from scratch. Once created, you can add projects, applications, and more layers of sub-portfolios.</li>\n<li><strong>Local Reference</strong> - This option allows you to reference an existing Portfolio/Application as a sub-portfolio. Once added, it is not editable here, but must be chosen in the left-most column to be edited.</li>\n</ul>\n<h2>Adding Projects to a Portfolio</h2>\n<p>To add projects directly to a Portfolio or standard sub-Portfolio first make sure the correct item is selected, then choose the <strong>Project selection mode</strong>:</p>\n<ul>\n<li><strong>Manual</strong> – choose the projects individually.</li>\n<li><strong>Tags</strong> - select one or more project tags. Projects with those tags will automatically be included.</li>\n<li><strong>Regular Expression</strong> – specify a regular expression and projects with a matching name OR key will be included.</li>\n<li><strong>All Remaining Projects</strong> – choose this option to add all projects not already included in this Portfolio (directly or via sub-Portfolio).</li>\n</ul>\n<h2>Adding Applications to a Portfolio</h2>\n<p>To add an Application to a Portfolio, first make sure your Application is <a href=\"/SonarQubeChineseDoc8.1/user-guide/applications/\">already created</a>. Then:</p>\n<ol>\n<li>Navigate to the Portfolios configuration page by going to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admint#/admin/extension/governance/views_console/\">Administration > Configuration > Portfolios</a></strong>.</li>\n<li>Select the Portfolio where you want to add your Application</li>\n<li>Click <strong>Add Portfolio</strong></li>\n<li>Select <strong>Local Reference</strong></li>\n<li>Choose your Application from the drop-down list and click <strong>Add</strong>.</li>\n</ol>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p><strong>Project unicity under a portfolio</strong><br/><br/>\nProjects, applications and sub-portfolios can only appear once in any given hierarchy in order to avoid magnifying their impacts on aggregated ratings. The portfolio configuration interface has some logic to prevent obvious duplications (e.g. manually adding the same project), however in case of more subtle duplications (e.g. due to regex, or other bulk definition), then the calculation of that portfolio will fail with a helpful error message.</p></div></div>\n<h2>Populating Applications</h2>\n<p>Once your Application exists, you can populate it with manually-selected projects. By default, the configuration interface shows the list of projects currently selected for the application. To add additional projects, choose the \"Unselected\" or \"All\" filter.</p>\n<h2>Creating Application Branches</h2>\n<p>Once your Application is populated with projects, you can create application branches by choosing branches from the application's component projects. This option is available in the Application's <strong>Administration > Edit Definition</strong> interface, or from the global administration interface.</p>\n<h2>Calculation</h2>\n<p>By default, Applications and Portfolios are queued to be recalculated after each analysis of an included project. For each relevant Portfolio and Application, a “Background Task” is created, and you can follow the progress on each in the <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/background_tasks\">Administration > Projects > Background Tasks</a></strong> by looking at the logs available for each item.</p>\n<p>If you're having performance issues related to automatic recalculation of large portfolios, you can specify the hour(s) at which you want them to be recalculated at <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=portfolios\">Administration > Portfolios > Recalculation</a></strong>. Portfolios are queued to be recalculated at the beginning of the hour(s) that you specify.</p>","fields":{"slug":"/project-administration/configuring-portfolios-and-applications/"}}},{"node":{"html":"<p>One of the most powerful features of SonarQube is that it shows you not just your project health today, but how it has changed over time. It does that by selectively keeping data from previous analyses (see <a href=\"/SonarQubeChineseDoc8.1/instance-administration/housekeeping/\">Housekeeping</a>). It doesn't keep all previous analyses - that would bloat the database. Similarly, for the analyses it does keep, SonarQube doesn't keep all the data. Once a project snapshot moves from the \"Last analysis\" (i.e. the most recent) to being part of the project's history, data below the project level is purged - again to keep from bloating the database.</p>\n<p>Typically these aren't things you need to even think about; SonarQube just handles them for you. But occasionally you may need to remove a bad snapshot from a project's history or change the housekeeping algorithms.</p>\n<h2>Managing History</h2>\n<p>Occasionally, you may need to manually delete a project snapshot, whether because the wrong quality profile was used, or because there was a problem with analysis, and so on. Note that the most recent snapshot (labeled \"Last snapshot\") can never be deleted.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p><strong>About deleting snapshots</strong><br/><br/>\nDeleting a snapshot is a 2-step process:<br/><br/></p><ul>\n<li>The snapshot must first be removed from the project history by clicking on Delete snapshot. It won't be displayed anymore on this History page but will still be present in the database.</li>\n<li>The snapshot is actually deleted during the next project analysis.</li>\n</ul></div></div>\n<p>At project level, from the front page <strong>Activity</strong> list, choose <strong>Show More</strong> to see the full activity list.</p>\n<p>For every snapshot, it is possible to manually:</p>\n<ul>\n<li>Add, rename or remove a version</li>\n<li>Add, rename or remove an event</li>\n<li>Delete the snapshot</li>\n</ul>","fields":{"slug":"/project-administration/managing-project-history/"}}},{"node":{"html":"<p><em>Portfolio PDFs are available as part of the <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">Enterprise Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em></p>\n<p>A user with administrative rights on a portfolio can configure email distribution of the PDF. From a Portfolio Home Page go to <strong>Administration > Executive Report</strong>.</p>\n<h3>Frequency</h3>\n<p>You can tune the email frequency of the PDF Report. The possible values are:</p>\n<ul>\n<li>Daily: report is sent during the first portfolio calculation of the day (if any)</li>\n<li>Weekly: report is sent during the first portfolio calculation of the week (if any) from Monday</li>\n<li>Monthly (default): report is sent during the first portfolio calculation of the month (if any), starting from the first day of the current month</li>\n</ul>\n<h3>Other Recipients</h3>\n<p>If people without SonarQube accounts want to receive the PDF, you can feed the administrative \"Other Recipients\" field with their email addresses.</p>","fields":{"slug":"/project-administration/portfolio-pdf-configuration/"}}},{"node":{"html":"<p>If SonarQube's results aren't relevant, no one will want to use it. That's why precisely configuring what to analyze for each project is a very important step. Doing so allows you to remove noise, like the issues and duplications marked on generated code, or the issues from rules that aren't relevant for certain types of objects.</p>\n<p>SonarQube gives you several options for configuring exactly what will be analyzed. You can</p>\n<ul>\n<li>completely ignore some files or directories</li>\n<li>exclude files/directories from Issues detection (specific rules or all of them) but analyze all other aspects</li>\n<li>exclude files/directories from Duplications detection but analyze all other aspects</li>\n<li>exclude files/directories from Coverage calculations but analyze all other aspects</li>\n</ul>\n<p>You can make these changes globally or at a project level. At both levels, the navigation path is  <strong>Administration > General Settings > Analysis Scope</strong>.</p>\n<h2>Patterns</h2>\n<p>Paths are relative to the project base directory. The following wildcards can be used:</p>\n<ul>\n<li><code>*</code>\t- Match zero or more characters  </li>\n<li><code>**</code> - Match zero or more directories  </li>\n<li><code>?</code> - Match a single character  </li>\n</ul>\n<p>Relative paths are based on the fully qualified name of the component.</p>\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Matches</th>\n<th>Does not match</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>**/*Bean.java</code></td>\n<td>org/sonar.api/MyBean.java <br/> org/sonar/util/MyOtherBean.java</td>\n<td>org/sonar/util/MyDTO.java</td>\n</tr>\n<tr>\n<td><code>**/*Bean?.java</code></td>\n<td>org/sonar/util/MyOtherBean1.java</td>\n<td>org/sonar/util/MyOtherBean.java <br/> org/sonar.api/MyBean.java <br/> org/sonar/util/MyDTO.java</td>\n</tr>\n<tr>\n<td><code>org/sonar/*</code></td>\n<td>org/sonar/MyClass.java <br/> org/sonar/MyOtherClass.java</td>\n<td>org/sonar/util/MyClassUtil.java</td>\n</tr>\n<tr>\n<td><code>org/sonar/**/*</code></td>\n<td>org/sonar/MyClass.java <br/> org/sonar/MyOtherClass.java <br/> org/sonar/util/MyClassUtil.java</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Ignore Files</h2>\n<p>We recommend that you exclude generated code, source code from libraries, etc. There are four different ways to narrow your analysis to the source code that will be relevant to the development team. You can combine them all together to tune your analysis scope. Additionally, we automatically exclude from analysis the files described in your projects' <code>.gitignore</code> files. This behavior can be disabled. See <code>sonar.scm.exclusions.disabled</code> in the <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">Analysis Parameters</a> page for details.</p>\n<h3>Source Directories</h3>\n<p>Set the <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">sonar.sources</a> property to limit the scope of the analysis to certain directories.</p>\n<h3>File Suffixes</h3>\n<p>Most language plugins offer a way to restrict the scope of analysis to files matching a set of extensions. Go to <strong>Administration > General Settings > [Language]</strong> to set the File suffixes property.</p>\n<h3>Choosing Files</h3>\n<p>Your first line of defence having a well-defined set of files in your analysis is your <code>sonar.sources</code> value. For projects built and analyzed with Maven, Gradle, or MSBuild, this value is defined automatically with a generally thorough, yet sane value. For other projects, you want to make sure <code>sonar.sources</code> is set to your project <em>sub-directory</em> that actually contains your source files. Setting it to <code>.</code> will cast a wider net than most people intend.</p>\n<p><img src=\"/images/sources.jpg\" alt=\"Set sonar.sources to the project sub-directory that contains your source files\"></p>\n<p>Once you've got all the files <em>in</em> your analysis that you want, it's time to look at whether you have any files you'd rather leave <em>out</em> of your analysis, such as JavaScript libraries, and generated files. Those can be handled with Exclusions. Specifying an exclusion means that everything under your <code>sonar.sources</code> directory will be included in analysis <em>except</em> the files with paths that match your exclusion regular expression.</p>\n<p><img src=\"/images/exclusions.jpg\" alt=\"Use exclusions to keep libraries and generated files out of analysis\"></p>\n<p>To use exclusions to analyze everything but the specified files, go to <strong>Administration > General Settings > Analysis Scope > Files</strong>.</p>\n<ul>\n<li><strong>Source File Exclusions</strong> (<code>sonar.exclusions</code>) - to exclude source code files</li>\n<li><strong>Test File Exclusions</strong> (<code>sonar.test.exclusions</code>) - to exclude test files</li>\n</ul>\n<p>The vast majority of needs are met simply by setting <code>sonar.sources</code> carefully. Most other needs are met with the addition of a few simple exclusions. In a few corner cases, it is necessary to be explicit about what's <em>included</em> in analysis and leave out everything else, but that is not the normal case, and setting inclusions should not be the first thing you try when configuring a new project.</p>\n<p><img src=\"/images/inclusions.jpg\" alt=\"Use inclusions in the rare case that you want to analyze only a subset of files\"></p>\n<p>To use exclusions to analyze <em>only</em> the specified subset(s) of files in <code>sonar.sources</code>, go to <strong>Administration > General Settings > Analysis Scope > Files</strong>.</p>\n<ul>\n<li><strong>Source File Inclusions</strong> (<code>sonar.inclusions</code>)</li>\n<li><strong>Test File Inclusions</strong> (<code>sonar.test.inclusions</code>)</li>\n</ul>\n<p>You can set these properties at both the project and global levels.</p>\n<p>See the Patterns section below for more details on the syntax to use in these inputs.</p>\n<h2>Ignore Issues</h2>\n<p>You can have SonarQube ignore issues on certain components and against certain coding rules. Go to <strong>Administration > General Settings > Analysis Scope > Issues</strong>.</p>\n<p>Note that the properties below can only be set through the web interface because they are multi-valued.</p>\n<h3>Ignore Issues on Files</h3>\n<p>You can ignore all issues on files that contain a block of code matching a given regular expression.</p>\n<p>Example:</p>\n<ul>\n<li><em>Ignore all issues in files containing \"@javax.annotation.Generated\"</em><br>\n<code>@javax\\.annotation\\.Generated</code></li>\n</ul>\n<h3>Ignore Issues in Blocks</h3>\n<p>You can ignore all issues on specific blocks of code, while continuing to scan and mark issues on the remainder of the file. Blocks to be ignored are delimited by start and end strings which can be specified by regular expressions (or plain strings).</p>\n<p>Notes:</p>\n<ul>\n<li>If the first regular expression is found but not the second one, the end of the file is considered to be the end of the block.</li>\n<li>Regular expressions are not matched on a multi-line basis.</li>\n</ul>\n<h3>Ignore Issues on Multiple Criteria</h3>\n<p>You can ignore issues on certain components and for certain coding rules. To list a specific rule, use the fully qualified rule ID.</p>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>You can find the fully qualified rule ID on the Rule definition.</p></div></div>\n<p>Examples:</p>\n<ul>\n<li><em>Ignore all issues on all files</em><br>\nKEY = <code>*</code><br>\nPATH = <code>**/*</code></li>\n<li><em>Ignore all issues on COBOL program \"bank/ZTR00021.cbl\"</em><br>\nKEY = <code>*</code><br>\nPATH = <code>bank/ZTR00021.cbl</code>  </li>\n<li><em>Ignore all issues on classes located directly in the Java package \"com.foo\", but not in its sub-packages</em><br>\nKEY = <code>*</code><br>\nPATH = <code>com/foo/*</code></li>\n<li><em>Ignore all issues against coding rule \"cpp:Union\" on files in the directory \"object\" and its sub-directories</em><br>\nKEY = <code>cpp:Union</code><br>\nPATH = <code>object/**/*</code>  </li>\n</ul>\n<h3>Restrict Scope of Coding Rules</h3>\n<p>You can restrict the application of a rule to only certain components, ignoring all others.</p>\n<p>Examples:</p>\n<ul>\n<li><em>Only check the rule \"Magic Number\" on \"Bean\" objects and not on anything else</em><br>\nKEY = <code>checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck</code><br>\nPATH = <code>**/*Bean.java</code></li>\n<li><em>Only check the rule \"Prevent GO TO statement from transferring control outside current module on COBOL programs\" located in the directories \"bank/creditcard\" and \"bank/bankcard\". This requires two criteria to define it:</em><br>\nKEY #1 = <code>cobol:COBOL.GotoTransferControlOutsideCurrentModuleCheck</code><br>\nPATH #1 = <code>bank/creditcard/**/*</code><br>\nKEY #2 = <code>cobol:COBOL.GotoTransferControlOutsideCurrentModuleCheck</code><br>\nPATH #2 = <code>bank/bankcard/**/*</code></li>\n</ul>\n<h2>Ignore Duplications</h2>\n<p>You can prevent some files from being checked for duplications.</p>\n<p>To do so, go to <a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings\">Administration > General Settings > Analysis Scope > Duplications</a> and set the <em>Duplication Exclusions</em> property. See the Patterns section for more details on the syntax.</p>\n<h2>Ignore Code Coverage</h2>\n<p>You can prevent some files from being taken into account for code coverage by unit tests.</p>\n<p>To do so, go to <strong>Administration > General Settings > Analysis Scope > Code Coverage</strong> and set the <em>Coverage Exclusions</em> property. See the Patterns section for more details on the syntax.</p>","fields":{"slug":"/project-administration/narrowing-the-focus/"}}},{"node":{"html":"<p>By focusing on code that's been added or changed in your New Code Period, you can set consistent quality requirements and expectations on all new code. With this focus, your new code will be issue-free and you'll clean up the code you encounter along the way. For more information on the New Code Period, see the <a href=\"/SonarQubeChineseDoc8.1/user-guide/clean-as-you-code/\">Clean as You Code</a> page.</p>\n<p>You can set a New Code Period at the global, project, or branch level.</p>\n<h2>Setting a global New Code Period</h2>\n<p>Your global New Code Period will be the default for your projects. You can set the global New Code Period at <a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=new_code_period/\"><strong>Administration > Configuration > General Settings > New Code Period</strong></a>.  </p>\n<p>You can set the global New Code Period to the following:</p>\n<ul>\n<li><strong>Previous Version</strong> – The New Code Period defaults to <strong>Previous version</strong> which shows any changes made in your project's current version. This works well for projects with regular versions or releases.</li>\n<li><strong>Number of days</strong> – You can specify a number of days for a floating New Code Period. For example, setting <strong>Number of Days</strong> to 30 creates a floating New Code Period beginning 30 days from the current date.</li>\n</ul>\n<h2>Setting a project-level New Code Period</h2>\n<p>You can override the global New Code Period by setting a project-level New Code Period from the project page at <strong>Administration > New Code Period</strong>. For <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>, this will be the default New Code Period for all of the project's branches.</p>\n<p>You can set a project's New Code Period to the following:</p>\n<ul>\n<li>\n<p><strong>Previous Version</strong> – Set the New Code Period to show any changes made in your project's current version. This works well for projects with regular versions or releases.</p>\n</li>\n<li>\n<p><strong>Number of days</strong> – Specify a number of days for a floating New Code Period. For example, setting <strong>Number of Days</strong> to 30 creates a floating New Code Period beginning 30 days from the current date.</p>\n</li>\n<li>\n<p><strong>Specific analysis</strong> – Choose a previous analysis as your New Code Period. The New Code Period will show any changes made since that analysis. </p>\n<p><strong>Note:</strong> For Community Edition, you can set the New Code Period to a specific past analysis at the project-level because Community Edition doesn't support multiple branches. <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a> let you set the New Code Period to a specific analysis at the branch level. Each branch can be set to one of the branch's specific past analyses. See the following section for information on setting a branch-level New Code Period. </p>\n</li>\n</ul>\n<h3>Setting a branch-level New Code Period</h3>\n<p><em>Branch analysis is available as part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a>.</em><br>\nFor projects with multiple branches, you can set a New Code Period for each branch from the <strong>Actions</strong> column of the branches table on the project's <strong>New Code Period</strong> settings page.</p>\n<p>You can set a branch's New Code Period to the following:</p>\n<ul>\n<li><strong>Previous Version</strong> – Set the New Code Period to show any changes made in your branch's current version. This works well for branches with regular versions.</li>\n<li><strong>Number of days</strong> – Specify a number of days for a floating New Code Period. For example, setting <strong>Number of Days</strong> to 30 creates a floating New Code Period beginning 30 days from the current date.</li>\n<li><strong>Specific analysis</strong> – Choose a specific past analysis of the branch as the New Code Period. The New Code Period will show any changes made since that analysis.</li>\n</ul>","fields":{"slug":"/project-administration/new-code-period/"}}},{"node":{"html":"<h2>Tags</h2>\n<p>Project tags allow you to categorize and group projects for easier selection on the <strong>Projects</strong> page. Project tags can be administered from the project home page. Administrators will see a dropdown menu indicator next to the project's list of current tags (or next to the \"No tags\" indicator). If the tag you want isn't visible in the dropdown, use the built in \"search\" input to find what you're looking for or create it on the fly.</p>\n<h2>Administration Items</h2>\n<p>Project administration is accessible through the <strong>Administration</strong> menu of each project.  </p>\n<p>Only project administrators can access project's settings (see <a href=\"/SonarQubeChineseDoc8.1/instance-administration/security/\">Authorization</a>).</p>\n<h3>Adding a Project</h3>\n<p>A project is automatically added at its first analysis. Note that you can also <a href=\"/SonarQubeChineseDoc8.1/project-administration/project-existence/\">provision projects</a>.</p>\n<h3>Analysis Report Processing</h3>\n<p>A project-level Background Tasks page is available at <strong>Administration > Background Tasks</strong> to allow project administrators to check their projects' processing. It offers analysis report details and logs.</p>\n<h3>Deleting a Project</h3>\n<h4>Deleting a Single Project</h4>\n<p>You can delete a project through <strong>Administration > Deletion</strong>.</p>\n<h4>Deleting Multiple Projects</h4>\n<p>You can also delete multiple projects simultaneously from the global <strong>Administration > Projects > Management</strong>.</p>\n<h3>Updating the Project Key</h3>\n<p>The project key can be updated (without losing the history on the project) at <strong>Administration > Update Key</strong>.</p>\n<p>The new key must contain at least one non-digit character. Allowed characters are: 'a' through 'z', 'A' through 'Z', '-' (dash), '_' (underscore), '.' (dot), ':' (colon) and digits '0' to '9'.</p>\n<h3>Default Issue Assignee</h3>\n<p>When new issues are created during an analysis, they are assigned to the last committer where the issue was raised. When it is not possible to identify the last committer, issues can be assigned to a default assignee, at ]Administration  > General Settings > Issues](/#sonarqube-admin#/admin/settings).</p>\n<h3>Setting Quality Gate and Quality Profiles</h3>\n<p>Project administrators can select which ...</p>\n<ul>\n<li>Quality profiles (go to <strong>Administration  > Quality Profiles</strong>)</li>\n<li>Quality gate (go to <strong>Administration  > Quality Gate</strong>)</li>\n</ul>\n<p>... to use on their project.</p>\n<h3>Setting Exclusions</h3>\n<p>See <a href=\"/SonarQubeChineseDoc8.1/project-administration/narrowing-the-focus/\">Narrowing the Focus</a>.</p>\n<h3>Customizing Links</h3>\n<p>On top of standard links which may only be set as <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">Analysis Parameters</a>, additional custom links can be added through the web interface (under <strong>Administration > Links</strong>). Those links will then be displayed in the <a href=\"/SonarQubeChineseDoc8.1/user-guide/project-page/\">Project Page</a>.</p>","fields":{"slug":"/project-administration/project-settings/"}}},{"node":{"html":"<p>Webhooks notify external services when a project analysis is complete. An HTTP POST request including a JSON payload is sent to each URL. URLs may be specified at both the project and global levels. Project-level specification does not replace global-level webhooks. All hooks at both levels are called.</p>\n<p>The HTTP(S) call:</p>\n<ul>\n<li>is made regardless of the status of the Background Task</li>\n<li>includes a JSON document as payload, using the POST method</li>\n<li>has a content type of \"application/json\", with UTF-8 encoding</li>\n</ul>\n<h2>Configuration</h2>\n<p>You can configure up to 10 webhooks in in <strong>Administration > Webhooks</strong>.</p>\n<p>An additional set of 10 webhooks can be configured at the global level in <strong>Administration > Configuration > Webhooks</strong>.</p>\n<p>If configured, all 20 will be executed.</p>\n<h2>Delivery and Payload</h2>\n<h3>Delivery</h3>\n<p>The Webhook administration console shows the result and timestamp of the most recent delivery of each webhook with the payload available via the list icon. Results and payloads of earlier deliveries are available from the tools menu to the right of each webhook.</p>\n<p>Response records are purged after 30 days.</p>\n<p>The URL must respond within 10 seconds or the delivery is marked as failed.</p>\n<h3>Payload</h3>\n<p>An HTTP header \"X-SonarQube-Project\" with the project key is sent to allow quick identification of the project involved.</p>\n<p>The Payload is a JSON document which includes:</p>\n<ul>\n<li>when the analysis was performed: see \"analysedAt\"</li>\n<li>the identification of the project analyzed: see \"project\"</li>\n<li>each Quality Gate criterion checked and its status: see \"qualityGate\"</li>\n<li>the Quality Gate status of the project: see \"qualityGate.status\"</li>\n<li>the status and the identifier of the Background Task : see \"status\" and \"taskId\"</li>\n<li>user-specified properties: see \"properties\"</li>\n</ul>\n<h4>Example</h4>\n<pre><code>{\n    \"serverUrl\": \"http://localhost:9000\",\n    \"taskId\": \"AVh21JS2JepAEhwQ-b3u\",\n    \"status\": \"SUCCESS\",\n    \"analysedAt\": \"2016-11-18T10:46:28+0100\",\n    \"revision\": \"c739069ec7105e01303e8b3065a81141aad9f129\",\n    \"project\": {\n        \"key\": \"myproject\",\n        \"name\": \"My Project\",\n        \"url\": \"https://mycompany.com/sonarqube/dashboard?id=myproject\"\n    },\n    \"properties\": {\n    },\n    \"qualityGate\": {\n        \"conditions\": [\n            {\n                \"errorThreshold\": \"1\",\n                \"metric\": \"new_security_rating\",\n                \"onLeakPeriod\": true,\n                \"operator\": \"GREATER_THAN\",\n                \"status\": \"OK\",\n                \"value\": \"1\"\n            },\n            {\n                \"errorThreshold\": \"1\",\n                \"metric\": \"new_reliability_rating\",\n                \"onLeakPeriod\": true,\n                \"operator\": \"GREATER_THAN\",\n                \"status\": \"OK\",\n                \"value\": \"1\"\n            },\n            {\n                \"errorThreshold\": \"1\",\n                \"metric\": \"new_maintainability_rating\",\n                \"onLeakPeriod\": true,\n                \"operator\": \"GREATER_THAN\",\n                \"status\": \"OK\",\n                \"value\": \"1\"\n            },\n            {\n                \"errorThreshold\": \"80\",\n                \"metric\": \"new_coverage\",\n                \"onLeakPeriod\": true,\n                \"operator\": \"LESS_THAN\",\n                \"status\": \"NO_VALUE\"\n            }\n        ],\n        \"name\": \"SonarQube way\",\n        \"status\": \"OK\"\n    }\n}\n</code></pre>\n<h2>Securing your webhooks</h2>\n<p>After you've configured your server to receive payloads, you want to be sure that the payloads you receive are initiated by SonarQube and not by hackers. You can do this by validating a hash signature that ensures that requests originate from SonarQube. </p>\n<h3>Setting your secret</h3>\n<p>To set your secret in SonarQube:</p>\n<ol>\n<li>From the project or organization where you're securing your webhooks, navigate to the webhooks settings at <strong>Administration > webhooks</strong></li>\n<li>You can either click <strong>Create</strong> to create a new webhook or click an existing webhook's settings drop-down and click <strong>Update</strong>.</li>\n<li>Enter a random string in the <strong>Secret</strong> text box. This is used as the key to generate the HMAC hex digest value in the <code>X-Sonar-Webhook-HMAC-SHA256</code> header.</li>\n<li>Click <strong>Update</strong>. </li>\n</ol>\n<h3>Validating SonarQube Payloads</h3>\n<p>After setting your secret, it's used by SonarQube to create a hash signature with each payload that's passed using the <code>X-Sonar-Webhook-HMAC-SHA256</code> HTTP header. The header value needs to match the signature you are expecting to receive. SonarQube uses a HMAC lower-case SHA256 digest to compute the signature of the request body. Here's some sample Java code for your server:</p>\n<pre><code>private static boolean isValidSignature(YourHttpRequest request) {\n  String receivedSignature = request.getHeader(\"X-Sonar-Webhook-HMAC-SHA256\");\n  // See Apache commons-codec\n  String expectedSignature = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, \"your_secret\").hmacHex(request.getBody())\n  return Objects.equals(expectedSignature, receivedSignature);  \n}\n</code></pre>\n<p>If the signatures don't match, then the payload should be ignored.</p>\n<h2>Additional parameters</h2>\n<p>A basic authentication mechanism is supported by providing user/password in the URL of the Webhook such as <code>https://myLogin:myPassword@my_server/foo</code>.</p>\n<p>If you provide additional properties to your SonarScanner using the pattern <code>sonar.analysis.*</code>, these properties will be automatically added to the section \"properties\" of the payload.</p>\n<p>For example these additional parameters:</p>\n<pre><code>sonar-scanner -Dsonar.analysis.buildNumber=12345\n</code></pre>\n<p>Would add this to the payload:</p>\n<pre><code>\"properties\": {\n  \"sonar.analysis.buildNumber\": \"12345\"\n}\n</code></pre>","fields":{"slug":"/project-administration/webhooks/"}}},{"node":{"html":"<p>Typically, projects are created during their first analysis and never deleted (because old software never dies). For atypical situations, there is the page at <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/projects_management/\">Administration > Projects > Management</a></strong>, which allows you to manage project existence.</p>\n<h2>How do I provision a project before its first analysis?</h2>\n<p>Provisioning a project allows you to declare and configure it (define permissions, set quality profiles, etc.) before running the first analysis. To be able to provision projects, you have to be logged in and be granted the Provision Projects permission.</p>\n<p>To provision a new project either use the '+' menu in the top menu or if you have global administration privileges, go to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/projects_management/\">Administration > Projects > Management</a></strong> and click on <strong>Create Project</strong>. The only required information is the key and the name of your project.</p>\n<p>Once the project is provisioned, you can configure it (define permissions, set quality profiles, etc.), and when you're finished with the configuration, you can simply run the project's first analysis.</p>\n<p>You can also provision and configure projects using the Web API.</p>\n<h2>How do I find provisioned projects (that haven't been analyzed yet)?</h2>\n<p>The <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/projects_management/\">Projects Management</a></strong> search interface includes a toggle to allow you to narrow your results on this page to only projects that have never been analyzed. From there you can deal with them on this page as a set, or click through to the individual project homepages for individual attention and administration.</p>\n<h2>How do I lock down permissions on a project? (Private vs Public)</h2>\n<p>By default, any newly created project will be considered \"Public\". It means every SonarQube user, authenticated or not, will be able to:</p>\n<ul>\n<li><strong>Browse</strong>: Access a project, browse its measures, issues and perform some issue edits (confirm/resolve/reopen, assignment, comment).</li>\n<li><strong>See Source Code</strong>: View the project's source code.</li>\n</ul>\n<p>If you want to be sure only a limited list of Groups and Users can see the project, you need to mark it Private. Once a project is private you will be able to define which Groups and Users can <strong>Browse</strong> the project or <strong>See Source Code</strong>.</p>\n<p>If you want all newly created projects to be considered \"Private\", you can change the default visibility in <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/projects_management/\">Administration > Projects > Management</a></strong>.</p>\n<h2>How do I delete projects?</h2>\n<p>A project may be deleted individually from the Administration page of the project. See Project Settings for more details. To delete projects in bulk, use <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/projects_management/\">Administration > Projects > Management</a></strong>. Here you can select the projects to delete. A deleted project is gone for good, there is no way to undo this action.</p>\n<h2>How do I find projects that are no longer analyzed?</h2>\n<p>The <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/projects_management/\">Projects Management</a></strong> search interface includes a date picker to help you find all projects last analyzed before your specified date. From there you can deal with them on this page as a set, or click through to the individual project homepages for individual attention and administration.</p>","fields":{"slug":"/project-administration/project-existence/"}}},{"node":{"html":"<h2>什麼是乾淨的寫程式碼?</h2>\n<p>乾淨的寫程式碼是一種能提升程式碼品質的方法，它消除了傳統方法帶來的許多挑戰。身為\n一名開發人員，您將專注於以高標準撰寫新程式碼並且為它負責。SonarQube 能提供讓您\n設定高標準的工具，並且讓您為達到那些標準而感到自豪。</p>\n<h2>專注於 新程式碼（New Code）</h2>\n<p>用乾淨程式碼撰寫方式，您應該一直專注在 新程式碼（New Code）上（在新 程式碼週期（New Code Period）間新增或更改的程式碼）並且確認\n您寫的程式碼是乾淨且安全的。</p>\n<p>新程式碼週期 可於不同層級上被設定（全域、專案、與 <a href=\"https://redirect.sonarsource.com/editions/developer.html\">開發人員版本</a>\n或 <a href=\"https://www.sonarsource.com/plans-and-pricing/\">更高級版本</a>）。依據您設定的層級，您可以依您的狀況調整適當的「新程式碼週期」起始時間。</p>\n<p>有關「新程式碼週期」及其設定的更多資訊，請查看 <a href=\"/SonarQubeChineseDoc8.1/project-administration/new-code-period/\">設定新程式碼週期</a>。</p>\n<h2>個人的責任</h2>\n<p>有乾淨的程式碼撰寫，您將不再為他人的程式碼負責。您擁有自己新程式碼的品質與保障。如果您新增了 問題（Issue），SonarQube 會自動指派給您，\n讓您可以維護自己的程式碼。</p>\n<p>有關「問題」與它們如何被指派的更多資訊，請查看 <a href=\"/SonarQubeChineseDoc8.1/user-guide/issues/\">問題（Issue）</a> 文件。</p>\n<h2>品質門檻（Quality Gates）</h2>\n<p>「品質門檻」是一組能告訴您專案是否可以被釋出了的情況。使用乾淨的程式碼撰寫，\n您的品質門檻應該要：</p>\n<ul>\n<li><strong>聚焦於新程式碼指標</strong> – 當您的「品質門檻」聚焦於新程式碼指標（像是內建的 Sonar way 品質門檻），新的功能將會被乾淨的交付。\n只要您的品質門檻是綠燈，您的發布將會持續改善。</li>\n<li><strong>高標準的制定與執行</strong> – 當一些標準於新的程式碼上被制訂與執行，您不會擔心舊程式碼沒有達到那些標準並且需要整理其他人的程式碼。\n您可以為 <em>您的</em> 程式碼有達到高標準而驕傲。當一個專案沒有達到這些高標準時，它不會通過品質門檻，很顯然的，它還不能被發布。</li>\n</ul>\n<p>有關「品質門檻」與確認「品質門檻」是否有在執行您的標準的更多資訊，請查看 <a href=\"/SonarQubeChineseDoc8.1/user-guide/quality-gates/\">品質門檻</a> 文件。</p>\n<h2>合併請求（Pull Request）之分析</h2>\n<p>您可以用「合併請求」分析和修飾來確保您的程式碼符合標準。合併請求分析使您可以在 SonarQube 使用者介面中\n查看「合併請求」裡的「品質門檻」（Quality Gates）。您接著可以直接在 ALM 的介面中\n使用 SonarQube 問題來裝飾「合併請求」。</p>\n<p>有關設置「合併請求」分析和裝飾的更多資訊，請查看 <a href=\"/SonarQubeChineseDoc8.1/analysis/pull-request/\">合併請求</a> 文件。</p>","fields":{"slug":"/user-guide/clean-as-you-code/"}}},{"node":{"html":"<p><em>應用程序作為<a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">企業版</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">更高版本</a>的一部分提供。</em></p>\n<h2>使用應用（Application）</h2>\n<p>應用 是多個專案的集合專案。假設您有一組專案由於技術上的原因被拆分，但是它們共享一個生命週期；它們在開發過程中會有直接交流，並且會一起被發布。有了 應用，它們可以在 SonarQube 中被視為一個單獨的實體，具有統一的專案主頁、問題（Issue）列表、度量（Measures）空間，且最重要的：品質門檻（Quality Gate）。</p>\n<h3>應用（Application）vs. 專案集（Portfolio）</h3>\n<p>應用 和 專案集 都是專案的集合，但是它們的目標不相同，因此用不同的形式表示。專案集 被設計為非常高階的執行結果概要，該概要顯示了僅有些許相關的一組專案在質量方面的表現，以及走向為何。應用 使您可以將一組專案視為一個較大的整體專案。例如，由於 應用 中的所有專案都是一起發布的，因此如果其中一個專案不可發布，則所有專案都不可發布，並且 應用 的綜合  品質門檻 為您提供了所有專案中必須修正的內容的即時摘要，以便您發布這組專案。</p>\n<h2>應用（Application）設定</h2>\n<p>在全域 專案集（Portfolio）管理界面中可創建和編輯 應用： <strong>管理（Administration）> 配置（Configuration）> 專案集（Portfolios）</strong>。更多資訊，請參見 <a href=\"/SonarQubeChineseDoc8.1/project-administration/configuring-portfolios-and-applications/\">設置專案集和應用</a>。應用 必須先由具有全域管理權限的用戶建立，但是在設置後，可以將單個 應用 的管理委派給其他用戶。</p>\n<h3>增加 應用（Application）數據</h3>\n<p>每次對一個專案進行分析之後，應用 都會被自動重新計算。如果要立即（重新）計算，則擁有對應 應用 管理權限的用戶可以使用 應用 層級 <strong>管理（Administration）> 編輯定義（Edit Definition）</strong> 界面中的 <strong>重新計算（Recompute）</strong> 按鈕。全域 專案集 管理界面：<strong>管理（Administration）> 配置（Configuration）> 專案集（Portfolios）</strong> 使您能夠立即將所有 應用 和 專案集 排進重新計算之佇列。</p>\n<h2>應用（Application）和 分支（Branch）分析</h2>\n<p>分支可於 應用 中使用。它們使您可以統計 應用 中的所有 分支 的專案。</p>\n<p><strong>注意:</strong> 避免在 應用 中添加可能被刪除的分支，以防止 應用 狀態出現問題。</p>\n<p>設置完 應用 後，擁有對應 應用 之管理權限的任何人都可以在 <strong>管理（Administration）> 編輯定義（Edit Definition）</strong> 界面中手動建立一個新 分支。也可以從全域的 <strong>管理（Administration）> 配置（Configuration）> 專案集（Portfolios）</strong> 界面中管理 分支。對於每個 應用 分支，您可以選擇應該包括哪個專案分支，或該專案是否應該在分支中顯示。</p>","fields":{"slug":"/user-guide/applications/"}}},{"node":{"html":"<p>「專案活動」頁面提供了詳盡的專案分析列表（遵照 <a href=\"/SonarQubeChineseDoc8.1/instance-administration/housekeeping/\">Housekeeping</a>），並且具有顯示時間變化下專案度量（project measures）的功能。</p>\n<p>專案活動頁面上的圖表可以幫助您理解您選擇的衡量標準（可多達 3 種）彼此間的演變。在圖表上懸停滑鼠游標，會顯示測量與特定分析相關的數值和事件。</p>\n<h2>事件</h2>\n<p>下列為 4 種事件：</p>\n<ul>\n<li>品質門檻：已更改 <a href=\"/SonarQubeChineseDoc8.1/user-guide/quality-gates/\">quality gate</a> 的狀態。</li>\n<li>分析：已更改用於分析專案的（品質規則組合 <a href=\"/SonarQubeChineseDoc8.1/instance-administration/quality-profiles/\">quality profile</a>）；已編輯品質規則組合；或已使用其他品質規則組合分析項目。</li>\n<li>版本：已更新專案的版本。</li>\n<li>其它：已手動建置事件。見 <a href=\"/SonarQubeChineseDoc8.1/project-administration/managing-project-history/\">Managing History</a>。</li>\n</ul>\n<p>事件會顯示在 <a href=\"/SonarQubeChineseDoc8.1/user-guide/project-page/\">project front page</a> 及專案活動頁面裡。 </p>","fields":{"slug":"/user-guide/activity-history/"}}},{"node":{"html":"<p>標籤是對規則和問題進行分類的一種方法。問題規則地繼承了引發它們的標籤。有些標籤僅適用於特定語言，但更多的標籤卻是跨語言的。使用者可以加入標籤至規則與問題中，但多數的規則都已具有現成的標籤。以下是部份內建規則標籤含義的列表：</p>\n<p><em>注意：以下的連結 <a href=\"https://rules.sonarsource.com\">rules.sonarsource.com</a> 已針對 Java 語法進行篩選</em></p>\n<ul>\n<li><a href=\"https://rules.sonarsource.com/java/tag/brain-overload\">大腦超載（brain-overload）</a>：一時間有太多事情需要記住。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/bad-practice\">壞習慣（bad-practice）</a>：程式照著設計方向撰寫，但其設計方式實質上被廣泛認為是一個壞主意。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/cert\">憑證（cert）</a>：與 <a href=\"https://www.securecoding.cert.org/confluence/x/BgE\">憑證</a> 中的標準有關。目前有三種 CRET 標準：<a href=\"https://www.securecoding.cert.org/confluence/x/HQE\">C</a>、<a href=\"https://www.securecoding.cert.org/confluence/x/fQI\">C++</a> 和 <a href=\"https://www.securecoding.cert.org/confluence/x/Ux\">Java</a>。其中許多規則並不只限定於特定語言，而是良好的程式撰寫習慣。這就是為什麼您會在非 C、C++ 或 Java 的規則上看到這些標籤的原因。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/clumsy\">笨拙（clumsy）</a>：可以更清楚、簡潔地完成某件事，卻使用額外的步驟完成。（例如：對字串使用 .toString() 語法）。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/confusing\">模糊（confusing）</a>：將使程式維護人員花費較多的時間在理解程式碼，而不是由程式的實際作用來證明其合理性。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/convention\">慣例（convention)</a>：程式碼慣例（coding convention）；通常格式化（typically formatting）；命名（naming）；空白字元（whitespace）等。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/cwe\">通用缺陷列表 CWE</a>：與 <a href=\"http://cwe.mitre.org/\">通用缺陷列表（Common Weakness Enumeration）</a> 中的規則相關。有關 CWE 和一般與安全相關的規則的更多信息，請參見 <a href=\"/SonarQubeChineseDoc8.1/user-guide/security-rules/\">安全相關規則（Security-related rules）</a>。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/design\">設計（design）</a>：與程式碼設計有關的問題。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/lock-in\">鎖（lock-in）</a>：使用於特定環境的功能。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/misra\">misra</a>：與 <a href=\"http://www.misra.org.uk/\">MISRA</a> 標準中之規則相關。儘管 MISRA 規則主要是與 C 和 C++ 相關，但其中許多的規則並不只適用於特定語言（例如：不以浮點數作為迴圈計數器（loop counter）使用，而是良好的程式撰寫習慣。這就是為什麼您會在非 C 或 C++ 的規則上看到這些標籤的原因。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/owasp\">開放式Web應用程式安全項目（owasp）</a>：與 <a href=\"https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\">OWASP Top Ten</a> 中的安全標準規則有關。注意，OWASP Top Ten 是一系列高階漏洞的列表，它演變成許多潛在規則。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/pitfall\">陷阱（pitfall）</a>：當下沒有錯誤，但是未來可能會出問題；先前設下的陷阱可能會使將來落入圈套，並弄亂程式碼。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/sans-top25\">sans-top25</a>：與 <a href=\"http://www.sans.org/top25-software-errors/\">SANS 25 個最常見的軟體錯誤</a> 以及安全性相關。須注意的是，SANS TOP 25 的列表是直接取自 CWE。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/suspicious\">可疑（suspicious）</a>：無法保證這是一個<strong>程式錯誤</strong>，但看起來卻十分地可疑。至少應該對程式碼進行檢查，且為了清楚起見可以嘗試對其進行重構。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/unpredictable\">不可預測（unpredictable）</a>：程式碼在當前條件下可能會正常工作，但如果條件發生變化，則可能會失敗。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/unused\">未使用（unused）</a>：未用碼（unused code），例如：一個從未使用過的私有變數。</li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/user-experience\">使用者體驗（user-experience）</a>：在技術層面上，您的程式碼沒有錯誤，但這可能導致部份或全部的使用者對您感到厭惡。</li>\n</ul>","fields":{"slug":"/user-guide/built-in-rule-tags/"}}},{"node":{"html":"<h2>架構（Architecture）</h2>\n<table>\n<thead>\n<tr>\n<th>概念</th>\n<th>定義</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>分析儀</td>\n<td>一個分析程式碼以計算<strong>快照（snapshots）</strong>的客戶端應用程式。</td>\n</tr>\n<tr>\n<td>資料庫</td>\n<td>儲存組態檔（configuration）和<strong>快照（snapshots）</strong>。</td>\n</tr>\n<tr>\n<td>伺服器</td>\n<td>用於瀏覽<strong>快照（snapshot）</strong>數據並進行組態檔（configuration）更改的 Web 介面。</td>\n</tr>\n</tbody>\n</table>\n<p>另請參見 <a href=\"/SonarQubeChineseDoc8.1/architecture/architecture-integration/\">SonarQube Platform Overview</a>。</p>\n<h2>品質（Quality）</h2>\n<table>\n<thead>\n<tr>\n<th>概念</th>\n<th>定義</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>程式錯誤（Bug）</td>\n<td>代表程式碼中有問題。如果這個問題還沒發生，它非常可能在最壞的時機出現。這問題需要在今天解決。</td>\n</tr>\n<tr>\n<td>代碼異味（Code Smell）</td>\n<td>程式碼中羽可維護性相關的問題。維護人員將會花費更多的時間在程式碼修改上，為了讓程式碼照著原意保留。最糟糕的是，維護人員會對程式碼的狀態感到困，以至於可能在進行修改時引入其他錯誤。</td>\n</tr>\n<tr>\n<td>成本（Cost）</td>\n<td>請參閱修復費用</td>\n</tr>\n<tr>\n<td>負債（Debt）</td>\n<td>請參閱技術負債（Technical Debt）</td>\n</tr>\n<tr>\n<td>問題（Issue）</td>\n<td>如果一段程式碼不符合規則，則會在<strong>快照（snapshot）</strong>上記錄問題。可以在原始檔案（source file）或單元測試文件（unit test file）上記錄問題。共有 3 種類型的問題：<strong>程式錯誤（Bugs）</strong>, <strong>代碼異味（Code Smells）</strong>和<strong>漏洞（Vulnerabilities）</strong></td>\n</tr>\n<tr>\n<td>測量（Measure）</td>\n<td>給予文件或專案在給定時間內的<strong>度量（metric）</strong>值。例如，MyClass 類別中的 125 行程式碼或 myProject 專案中重複的程式碼密度為 30.5％。</td>\n</tr>\n<tr>\n<td>度量（Metric）</td>\n<td>一種測量方式。度量隨著時間的變化可以有變化的值或<strong>測量值（measures）</strong>。舉例：程式碼行數、複雜度等。度量可以是 <em>定性的（qualitative）</em>（對元件給予品質指示、重複程式碼的 EG 密度（E.G. density）或執行程式的覆蓋率等）或 <em>定量的(quantitative)</em> （對元件不給予品質指示、EG 的程式碼行數、複雜度等。）</td>\n</tr>\n<tr>\n<td>新程式碼期限（New Code Period）</td>\n<td>在這段時間內，您將密切關注程式碼中新問題的發生。理想情況下，這是從<code>先前版本</code>開始的，但是如果您不使用類似 Maven 的版本控制工具，則可能需要設定一個相對隨意的時間週期，例如 21 天或自某個特定日期開始。</td>\n</tr>\n<tr>\n<td>品質規則組合（Quality Profile）</td>\n<td>一套<strong>規則（rules）</strong>。每個<strong>快照（snapshot）</strong>均基於單個品質規則組合。另請參閱 <a href=\"/SonarQubeChineseDoc8.1/instance-administration/quality-profiles/\">品質規則組合（Quality Profile）</a></td>\n</tr>\n<tr>\n<td>規則（Rule）</td>\n<td>應遵循的撰寫程式碼標準或慣例。不遵守程式碼撰寫規則會導致<strong>程式錯誤（Bugs）</strong>、<strong>漏洞（Vulnerabilities）</strong>、<strong>安全熱點（Security Hotspots）</strong>和<strong>代碼異味（Code Smells）</strong>。規則可以檢查程式碼檔或單元測試的品質。</td>\n</tr>\n<tr>\n<td>修復成本（Remediation Cost）</td>\n<td>解決漏洞和可靠性問題所需的估計時間。</td>\n</tr>\n<tr>\n<td>快照（Snapshot）</td>\n<td>在給定時間針對給予專案的一組<strong>測量值（measures）</strong>和<strong>問題（Issue）</strong>。將為每個分析生成快照。</td>\n</tr>\n<tr>\n<td>安全熱點（Security Hotspot）</td>\n<td>需要手動檢查的安全敏感程式碼片段。通過查看，您會發現沒有威脅，或者存在需要修復的易受攻擊的程式碼。</td>\n</tr>\n<tr>\n<td>技術負債（Technical Debt）</td>\n<td>解決所有可維護性問題（Maintainability Issues）／代碼異味（code smells）所需的估計時間。</td>\n</tr>\n<tr>\n<td>漏洞（Vulnerability）</td>\n<td>與安全相關的問題，代表攻擊者的後門。另請參閱 <a href=\"/SonarQubeChineseDoc8.1/user-guide/security-rules/\">安全性相關的規則（Security-related rules）</a>.</td>\n</tr>\n</tbody>\n</table>","fields":{"slug":"/user-guide/concepts/"}}},{"node":{"html":"<p>在執行分析時，SonarQube會在每次其中一段程式碼違反編碼規則時提出一個問題。通過項目中每種語言的關聯性<a href=\"/SonarQubeChineseDoc8.1/instance-administration/quality-profiles/\">質量配置文件</a>來定義編碼的規則。</p>\n<h3>問題標籤(Issue Types)</h3>\n<p>以下有三種不同問題的標籤:</p>\n<ol>\n<li><strong>錯誤</strong> – 編碼的錯誤將損毀你的程式碼，需要立即的修復。</li>\n<li><strong>漏洞</strong> – 使程式碼中出現一個容易受到攻擊的點。</li>\n<li><strong>程式碼氣味</strong> – 屬於一種可維護性問題，會使你的程式碼混亂且難以維護。</li>\n</ol>\n<h3>問題的嚴重性</h3>\n<p>每個問題都可能為以下五種不同嚴重層度之一：</p>\n<ol>\n<li><strong>阻礙</strong><br>\n錯誤高機率會影響運作中的應用程序行為：內存洩漏，未關閉的JDBC連接，...。必須立即修復代碼。</li>\n<li><strong>嚴重</strong><br>\n錯誤低機率會影響生產的應用程序行為，也可能是表示安全漏洞的問題：沒有抓取到的區塊，SQL注入...。必須立即檢查代碼。</li>\n<li><strong>主要</strong><br>\n質量缺陷嚴重影響開發人員的程式撰寫：未發現的片段程式碼，重複的區塊，未使用的參數，...。</li>\n<li><strong>次要</strong><br>\n質量缺陷會稍微影響開發人員的程式撰寫：每行書寫不應太長，“switch”語句應至少包含3種情況，...。</li>\n<li><strong>訊息</strong><br>\n發現錯誤或質量缺陷並提醒。</li>\n</ol>\n<p>在理想情況下，團隊不會提出任何新的問題（任何新的技術債務）。<a href=\"https://sonarlint.org\">SonarLint</a>可以為開發人員提供幫助，因為其具有在將程式碼推回SCM前於本地先進行分析來檢查程式碼的功能；但就現實而言，並不是每次都能在沒有任何新技術債務的情況下進行編碼，甚至根本不值得這麼做。</p>\n<p>所以也衍生出新的問題。</p>\n<h2>理解問題的上下文</h2>\n<p>有些時候，只要指出問題所在便不言而喻了，舉例來說，如果您的團隊已經同意使用init-lower中的camelCase變量的命名約定，並且在<code>My_variable</code>上出現了問題，那麼您不需要太多的上下文就可以了解問題。但在其他情況下，了解為何問題會發生才是更加重要的。這就是SonarQube不僅能主要幫忙指出發生的位置（顯示發出消息的位置），還能次要幫忙找出發布位置的原因。例如，次要找出問題位置利用增加方法的認知複雜度來標記方法中的一段程式碼。</p>\n<p>但有時候，僅提供重要位置的簡易長篇敘述不足以理解問題。例如，當空指引與程式碼的路徑無關時，你真正需要的是問題方向。每個方向都是一個次要的標記來顯示可能發生問題的程式碼的確切路徑位置。而且由於程式碼中可能有多個路徑，例如這些路徑上沒有釋放出資源，所以 SonarQube需支援多個路徑方向。</p>\n<h2>問題的生命週期</h2>\n<h3>身分</h3>\n<p>在創建後，問題的方向將連貫在一個生命週期，並採取以下五個可能狀態之一:</p>\n<ul>\n<li><strong>公開</strong> - 在一個新的問題上設置SonarQube。</li>\n<li><strong>已確認</strong> - 手動設定表示為有效問題。</li>\n<li><strong>已解決</strong> - 手動設定表示在下一次分析必須解決問題。</li>\n<li><strong>重新開啟</strong> - 當尚未找到實際解決問題方法時，由SonarQube自動設置。</li>\n<li><strong>已關閉</strong> - 由SonarQube自動設置為自動創建問題。</li>\n</ul>\n<h3>決議</h3>\n<p>已解決的問題將具有以下兩種解決方法之一：</p>\n<ul>\n<li><strong>固定</strong> - 當後續分析顯示問題已得到糾正或文件不再可用時自動設置（從項目中刪除，排除或重命名)。</li>\n<li><strong>刪除</strong> - 當相關規則不再可長期使用時自動設置。該規則可能無法使用，因為有可能該規則已從“質量配置文件”中刪除或因為基礎的外掛程式已被卸載。</li>\n</ul>\n<p>解決的問題將具有以下兩種解決方法之一:</p>\n<ul>\n<li><strong>誤報</strong> - 手動。</li>\n<li><strong>無須修復</strong> - 手動。</li>\n</ul>\n<h3>問題的工作流程</h3>\n<p>在以下的情況下，問題將自動關閉（狀態：已關閉）:</p>\n<ul>\n<li>已確認解決（任何狀態）的問題=>解決方案：已修復。</li>\n<li>因為相關的編碼規則已被停用或不再可用（即：外掛程式已被刪除），造成問題不再存在=>解決方案：已刪除。</li>\n</ul>\n<p>在以下情況下，問題將自動重新打開（狀態：重新打開）:</p>\n<ul>\n<li>將問題手動分析為固定(但解決方案並非誤報(False positive))在通過後續分析會顯示仍然存在。</li>\n</ul>\n<h2>了解哪些問題是\"新問題\"</h2>\n<p>為了確定問題的創建日期，在每次分析過程中都會執行算法以確認該問題是新的問題還是先前就存在的問題。此算法依賴於內容的註記(# hashes)（不包括空格）來報告問題所在的行。 對於多行問題，使用第一行的標記(hash)。對於每個文件（在檢測到文件重命名之後），該算法將採用先前分析的問題基本列表，並新的分析來嘗試將這些問題與原始問題列表報告進行匹配。該算法嘗試先使用最強的證據進行匹配，然後回下降到比較弱的啟發式算法。</p>\n<ul>\n<li>如果問題基於相同的規則，相同的行號和相同的行哈希（但不一定具有相同的消息）> 吻合。</li>\n<li>檢測文件中的區塊移動，如果問題出在同一行（移動）上並且在同一規則上（但不一定帶有相同消息）> 吻合。</li>\n<li>根據相同的規則，具有相同的消息和相同的行註記（但不一定具有相同的行）> 吻合。</li>\n<li>根據相同的規則，相同的訊息和相同的行號（但不一定具有相同的行註記）> 吻合。</li>\n<li>根據相同的規則並具有相同的行註記（但不是同一條訊息，也不是同一行）> 吻合。</li>\n<li>是否有配對到<strong>已關閉</strong>的問題 > 匹配並重新開啟。</li>\n</ul>\n<p>修復並關閉獨一(Unmatched)的\"基本\"問題。</p>\n<p>新的獨一(Unmatched)的\"原始\"問題。</p>\n<h2>了解問題的追溯</h2>\n<p>如上面所述，一旦確定這一個問題為\"新的問題\"，下一個問題就是發出該新問題的日期。例如，如果它在程式碼中已經存在很長一段時間了，但因為增加了新規則使其在最新一次的分析中才被發現，那該怎麼辦？ 是該提供上次更新的日期，還是首次分析時發現的日期？也就是說，它應該被追溯嗎？如果該行的最後更改日期可用(這需要<a href=\"/SonarQubeChineseDoc8.1/%20analysis%20/%20scm-integration%20/\">SCM的集成</a>)，則在某些情況下，該問題將被追溯：</p>\n<ul>\n<li>在對計畫或分支進行首次分析時。</li>\n<li>當文件中的規則是新的規則時(激活了一個新規則或已激活一個之前停用的規則)。</li>\n<li>當分析儀器剛升級完成時(因為可以得到更智能的施作規則)。</li>\n<li>為外部規則時。</li>\n</ul>\n<p>就結果而論，追溯可能會將新提出的問題排除在新法規期限之外。</p>\n<h2>自動分配問題</h2>\n<h3>針對錯誤、漏洞、程式碼氣味</h3>\n<p>如果可以將提交者與SonarQube用戶產生關聯，在問題線上，新的問題將自動分配給分析中的最後一個提交者。請注意，若問題在任何高於文件等級處，例如:目錄/項目，將無法進行自動分配。</p>\n<h3>用戶相關</h3>\n<p>登錄及信箱的關聯是自動生成的。也就是說，如果用戶使用她的電子郵件地址進行提交，並且該電子郵件地址是她的SonarQube個人資料的一部分，那麼在她是最後提交者時，新的問題將出現再問題線上並自動分配給她。</p>\n<p>其他關連可以在用戶的個人資料端以手動方式設定(有關更多信息，請參見授權中的“ SCM帳戶\")。</p>\n<h3>已知的限制</h3>\n<p>如果與登錄相關的問題所含字元超過問題作者所允許的255個字元，那作者將被留白。</p>\n<h2>問題的編輯</h2>\n<p>SonarQube中處理問題的工作流程可以幫助你管理問題。以下有七種你可以針對問題的操作(注意!並不是在程式碼中進行修復):註解，分配，確認，更新嚴重性，解決，無需解決和誤報。</p>\n<p>這些操作分為以下三類，第一類為\"技術審查\"。</p>\n<h3>技術審查</h3>\n<p>“確認”，“誤報”，“無需解決”，“更新嚴重性”和“解決”，這些操作均屬於此類別，用於對問題進行了假設性的初步審核以驗證其有效性。假設現在進行對最新一次審查期間所增加的技術性債務-不論是一天、一周、又或是一次完整的衝刺，你遇上任何一個新問題並決定一個方法:</p>\n<ul>\n<li><strong>確認</strong> - 通過確認問題，您基本上可以確認並說出“是的，這是一個問題”。這樣做會將問題從“發現”的狀態更新到“已確認”。</li>\n<li><strong>誤報</strong> - 透過閱讀問題的上下文後，你確認該問題在任何狀況下都不會是一個問題，你可將其註記為誤報並繼續執行程式。這個動作需要有“管理問題”項目的權限。</li>\n<li><strong>無需解決</strong> - 透過閱讀問題的上下文後，你確認這是一個有效的問題但並非需要解決，換句話說，這個問題已經確認是技術債務，所以你可以將其標示為無需解決並繼續執行程式。這個動作需要有“管理問題”項目的權限。</li>\n<li><strong>更新嚴重性</strong> - 這是前兩個選項的中立，是的，這是一個問題，但並不是規則中所認定的嚴重性而要解決的問題。也有可能是這個問題比事實上更加糟糕，你可以使用任何方式來以自己的感覺更新對該問題的嚴重性。這個動作需要有“管理問題”項目的權限。</li>\n<li><strong>解決</strong> - 如果你認為你可以修正這個被發現的問題，你可以解決它。如果你是對的，在下次分析時會將問題移至默認端；如果你是錯的，這個問題狀態將再次出現。</li>\n</ul>\n<p>如果您傾向於將很多問題標記為“誤報”或“無法解決”，則意味著某些編碼規目前不適用您現在的情況。所以，你可以在質量配置上完全關閉他們或排除問題來縮小規則的準確度，使其無法用於特定區域(或專案類別)。同樣的，做出太多更新嚴重性應該題示你是否需要更新你配置文件上的規則。</p>\n<p>在您編輯問題時，相關指標（例如新錯誤）將自動更新，如果質量檢驗方式有相關，其狀態也會自動更新。</p>\n<h3>配置</h3>\n<p>經過技術審查後，就能決定該給誰來解決問題了；在默認情況下，他們會將問題提交給問題線上的最後一位提交者(在問題發生時)，但你也可以決定將它們重新分配給你自己或其他人。如果受理人有註冊到這個通知時，他將接收到分配工作所顯示全部問題位置的信件通知，包括“我的帳戶”區域中的“我的問題”列表中。</p>\n<h3>一般</h3>\n<p>在問題的生命週期中，您可以隨時發表評論，該評論用於顯示正在運行日誌中問題的詳細信息。你可以編輯或刪除您的評論。</p>\n<p>您還可以編輯問題的標籤。 雖然問題會繼承創建時規則給予的標籤，但是在問題上設定的標籤是可編輯的。 具有項目瀏覽權限的用戶可以隨意創建、添加和刪除標籤。</p>\n<p>儘管問題最初是從相關的規則所繼承的，但因問題上的標籤並不會與規則處進行同步，因此將標籤添加到規則的行為不會將這些標籤加入規則問題之中。</p>\n<h3>批量修改</h3>\n<p>使用搜索問題的結果窗格中的“批量修改”選項，可以一次對多個問題同時進行更改，甚至更多動作。</p>\n<h2>清除已解決的問題</h2>\n<p>一般情況下，已解決的問題將保留30天。 有關更多詳細信息，請參見<a href=\"/SonarQubeChineseDoc8.1/instance-administration/housekeeping/\">記憶體整理(Housekeeping)</a>。</p>","fields":{"slug":"/user-guide/issues/"}}},{"node":{"html":"<h2>全域（Global）</h2>\n<table>\n<thead>\n<tr>\n<th>快捷鍵</th>\n<th>Action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>s</code></td>\n<td>開啟搜尋欄</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>開啟幫助</td>\n</tr>\n</tbody>\n</table>\n<h2>程式碼頁面（Code Page）</h2>\n<table>\n<thead>\n<tr>\n<th>快捷鍵</th>\n<th>執行動作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>↑</code> <code>↓</code></td>\n<td>選擇文件                                     　</td>\n</tr>\n<tr>\n<td><code>→</code></td>\n<td>開啟文件                                     　</td>\n</tr>\n<tr>\n<td><code>←</code></td>\n<td>返回列表                       　　　　　　 　　</td>\n</tr>\n</tbody>\n</table>\n<h2>問題頁面（Issues Page）</h2>\n<table>\n<thead>\n<tr>\n<th>快捷鍵</th>\n<th>執行動作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>↑</code> <code>↓</code></td>\n<td>上下瀏覽問題　　　　　</td>\n</tr>\n<tr>\n<td><code>→</code></td>\n<td>從問題列表至原始碼　　　　　　　　　　　　　　　　</td>\n</tr>\n<tr>\n<td><code>←</code></td>\n<td>返回列表                       　　　　　　　　　</td>\n</tr>\n<tr>\n<td><code>alt</code> + <code>↑</code> <code>↓</code></td>\n<td>瀏覽問題位置　　　　　　　　　</td>\n</tr>\n<tr>\n<td><code>alt</code> + <code>←</code> <code>→</code></td>\n<td>切換流量（flows）　　</td>\n</tr>\n<tr>\n<td><code>f</code></td>\n<td>進行問題過度</td>\n</tr>\n<tr>\n<td><code>a</code></td>\n<td>分配問題                                  　　　</td>\n</tr>\n<tr>\n<td><code>m</code></td>\n<td>將問題分配給當前使用者              　　　　　　　</td>\n</tr>\n<tr>\n<td><code>i</code></td>\n<td>更改問題的嚴重性                      　　　　　</td>\n</tr>\n<tr>\n<td><code>c</code></td>\n<td>評論問題                                 　　　</td>\n</tr>\n<tr>\n<td><code>ctrl</code> + <code>enter</code></td>\n<td>提交評論                                　　　　</td>\n</tr>\n<tr>\n<td><code>t</code></td>\n<td>更改問題標籤                        　　　　　</td>\n</tr>\n</tbody>\n</table>\n<h2>測量頁面（Measures Page）</h2>\n<table>\n<thead>\n<tr>\n<th>快捷鍵</th>\n<th>執行動作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>↑</code> <code>↓</code></td>\n<td>選擇文件                                     　</td>\n</tr>\n<tr>\n<td><code>→</code></td>\n<td>開啟文件                                     　</td>\n</tr>\n<tr>\n<td><code>←</code></td>\n<td>返回列表                       　　　　　　 　　</td>\n</tr>\n</tbody>\n</table>\n<h2>規則頁面（Rules Page）</h2>\n<table>\n<thead>\n<tr>\n<th>快捷鍵</th>\n<th>執行動作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>↑</code> <code>↓</code></td>\n<td>上下瀏覽規則        　　　　　　</td>\n</tr>\n<tr>\n<td><code>→</code></td>\n<td>從規則列表至規則詳細訊息</td>\n</tr>\n<tr>\n<td><code>←</code></td>\n<td>返回列表              　</td>\n</tr>\n</tbody>\n</table>","fields":{"slug":"/user-guide/keyboard-shortcuts/"}}},{"node":{"html":"<p>專案首頁（Project Hompepage）是顯示以下內容的入口：</p>\n<ul>\n<li>專案的可發布狀態</li>\n<li>專案現在的品質狀態</li>\n<li>自上次 <a href=\"/SonarQubeChineseDoc8.1/user-guide/clean-as-you-code/\">新程式碼週期（New Code Period）</a>以來的產品品質</li>\n</ul>\n<p>專案也面能回答以下兩個問題：</p>\n<ul>\n<li>我今天可以發布我的專案嗎？</li>\n<li>如果不行，我應該怎麼改進才能讓專案通過 品質門檻（Quality Gate）？</li>\n</ul>\n<h2>我今天可以發布我的專案嗎？</h2>\n<p>既然 <a href=\"/SonarQubeChineseDoc8.1/user-guide/quality-gates/\">品質門檻（Quality Gate）</a>是您最強而有效的品質保證策略，那麼此頁首要顯示專案的「品質門檻」通過狀態。如果通過了，便會顯示「完全通過」（all-clear）的綠燈。</p>\n<p>如果沒有過，則可以透過詳細訊息與深入分析來了解哪邊出了問題，每個錯誤情況都有一個區塊，顯示當前專案的值為何以及應該是什麼。像往常一樣，您可以透過點擊當前值以取得更深入的分析。</p>\n<h2>我應該先解決什麼？</h2>\n<p>由於改善專案品質的最佳方式為在新的問題根深蒂固前找出並解決，專案的首先可看見以 新程式碼週期（New Code Period）中心，在專案首頁的右側以黃色明示。在專案空間頁顯示有關鍵指標的高階摘要，包括當前值以及「新程式碼週期」的值。</p>\n<p>在 品質門檻（Quality Gate）底下分別在 可靠性（Reliability）、安全性（Security）、可維護性（Maintainability）顯示有舊與新問題的數量。點擊頁面上的任何物件都會帶您進入 度量頁面（Measures Page）或是 問題（Issues Page）的詳細資訊。</p>\n<p>開發人員必須做的最重要的是確認、審查，及修正那些黃區裡的新 問題（Issues），並且確保新的程式碼有被測試所涵蓋以防未來重蹈覆轍。無論過去引入了多少個「問題」或總體上沒有多少測試內容，對新添加的「問題」的關注都將確保與您先前在生產中發布的版本相比，情況不會惡化。</p>\n<p>那麼，您應該先解決哪些問題：錯誤（Bugs）、漏洞（Vulnerabilities），或是 程式碼壞味道（Code Smells）？答案取決於您問題的性質。假設您在重複5次的程式碼塊中遇到問題，並且在此重複的程式碼塊中有3個 錯誤 和5個安全問題。最好的方法可能是先修復重複項，然後在新集中的位置解決 錯誤 和 漏洞，而不是將它們修正5次。</p>\n<p>這就是為甚麼你應該在解決新 問題 前，先審查它們。</p>\n<h2>我該如何．．．</h2>\n<h3>我該如何看見較低階的專案措施？</h3>\n<p>專案級 <strong>度量（Measures）</strong> 菜單項將帶您到專用子空間，在其中您可以查看所有專案度量。選擇一種 度量 以獲取更多詳細信息。每種 度量 均可以列表及樹狀圖顯示，樹狀圖可用於百分比和等級。</p>\n<h3>我該如何查看專案中的所有 問題（Issue）？</h3>\n<p>專案級別的 <strong>問題</strong> 選單項目將帶您到特定專案的 問題 頁面，您可以在其中執行所有在更高級別中可做的相同操作。\n在此頁面上，可以藉由在 <strong>創建日期（Creation Date）</strong> 介面中選擇 新程式碼（New Code），輕鬆地將列表縮減至 新程式碼週期（New Code Period）產生的 新問題。</p>\n<h3>我該如何查看專案架構與程式碼？</h3>\n<p>專案級別的 <strong>程式碼（Code）</strong> 選單項目將帶您到專案架構的大綱。點入後可查看目錄中的文件，然後選擇一個文件以查看其程式碼。</p>\n<p>如果您的專案太大，無法輕鬆透過點入閱覽，則此頁面上的搜索功能會有所幫助。主選單中的全域搜索會取得整個 SonarQube 實例的結果，而 程式碼（Code）頁面 上的搜索僅限於當前專案中的文件和目錄。</p>\n<h3>我該如何查閱專案的 活動（Activity）/ 歷史紀錄（History）？</h3>\n<p>專案級別的 <strong>活動（Activity）</strong> 選單項目將帶您進入對專案自在 SonarQube 中建立以來，執行的程式碼掃描結果的完整列表。在那裡，您可以追蹤 品質們檻（Quality Gate）的發展與更改，以及了解何時掃描了給定版本的程式碼。</p>\n<h3>我該如何輕鬆的看專案中的風險？</h3>\n<p>視覺化使您可以比較專案中元件，並且快速發現那些表現出最大風險的部分。 <strong>活動（Activity）</strong>　頁面提供了幾個預設的視覺化選項，並且您還可以使用自訂的指標來建立 自訂視覺化選項（Custom visualizations）。</p>\n<h3>我該如何讓同行知道我程式碼的「健康」狀況？</h3>\n<p>如果您的專案是公開可見的，則可以在外部工具和網站中使用 原生專案徽章（native Project Badges）進一步提升其狀態。公共專案首頁上的「獲取專案徽章」按鈕使您可以選擇/微調徽章，並為其提供網址。</p>","fields":{"slug":"/user-guide/project-page/"}}},{"node":{"html":"<h2>Overview</h2>\n<p>質量門檻(quality gates)是在組織中實施質量策略的最佳方法。</p>\n<p>在那裡可以回答一個問題：我可以今天將專案交付生產嗎？</p>\n<p>為了回答這個問題，您可以根據測量專案的測量閾值定義一組布林條件。例如：</p>\n<ul>\n<li>沒有新的阻止程序問題</li>\n<li>新的程式碼的代碼覆蓋率大於 80%</li>\n<li>Etc.</li>\n</ul>\n<p>理想情況下，所有專案都將通過相同的質量門檻進行驗證，但這並不一定總是可行的。 例如，您可能會發現：</p>\n<ul>\n<li>技術實現因一個應用程式不同（對於Web或Java應用程式，您可能不需要在新程式碼上具有相同的代碼覆蓋率）</li>\n<li>您想確保對某些應用程式（例如內部框架）有更嚴格的要求</li>\n<li>Etc.</li>\n</ul>\n<p>這就是為什麼您可以定義任意數量的質量門檻的原因。 質量門檻是在頂部菜單的“質量門檻”頁面中定義和管理的。</p>\n<h2>使用最佳質量門檻配置</h2>\n<p>質量門檻“Sonar way”由SonarSource提供，預設情況下處於開通狀態，被視為內建的，因此是只讀的。 它代表了我們對實現“即用即編碼”概念的最佳方法的看法。 在每個SonarQube版本中，我們都會根據SonarQube的功能自動調整此默認質量門檻。</p>\n<p>三種指標可讓您強制執行給定的可靠性等級, 安全性和可維護性，不僅是整體的，而且還包括新程式碼。 建議使用這些度量標準，並將它們作為預設質量門檻的一部分。 我們強烈建議您調整自己的質量門檻，以用它們使開發人員在其專案頁面上查看他們的質量門檻時得到更清晰的回饋。</p>\n<p>也不要忘記高質量的門檻條件必須使用微分值。例如：檢查絕對值是沒有意義的，像是程式碼行數大於1000。</p>\n<h3>推薦的質量門檻</h3>\n<p>對於大多數專案，建議使用“Sonar way`”內建質量門檻，假如專注於保持新程式碼的整潔，而不是花費大量精力來修復舊程式碼，它已經被設置為預設配置文件。</p>\n<h2>質量門檻狀態</h2>\n<p>當前狀態是顯示在“專案”頁面的頂部：</p>\n<p><img src=\"/images/quality-gate-status.jpeg\" alt=\"Quality Gate Status\"></p>\n<h2>質量門檻失敗時得到通知</h2>\n<p>借助通知機制，可以在質量門檻失敗時通知用戶。 為此，請為所有專案或您感興趣的一組專案訂閱“新質量門檻狀態”通知。</p>\n<h2>安全</h2>\n<p>任何用戶（甚至是匿名用戶）都可以訪問質量門檻。所有用戶都可以查看質量門檻的各個方面。</p>\n<p>要進行更改（建立，編輯或刪除），必須給予用戶“管理質量配置文件和Gates權限。</p>\n<p><strong>專案管理員</strong>可以選擇與他/她的專案相關聯的質量門檻。有關更多信息，請參見專案設置。</p>\n<h2>定義質量門檻</h2>\n<p>要管理質量門檻，請轉到** [質量門檻]（/＃sonarqube＃/ quality_gates）**（頂部菜單欄）。</p>\n<p>每個質量門檻條件是以下各項的組合：</p>\n<ul>\n<li>措施</li>\n<li>比較運算符</li>\n<li>錯誤值</li>\n</ul>\n<p>例如，條件可能是：</p>\n<ul>\n<li>措施：阻止程序問題</li>\n<li>比較運算符：></li>\n<li>錯誤值：0</li>\n</ul>\n<p>可以這樣表示：沒有阻塞問題。</p>","fields":{"slug":"/user-guide/quality-gates/"}}},{"node":{"html":"<h2>複雜度(Complexity)</h2>\n<p><strong>複雜度</strong> (<code>complexity</code>)<br>\n它根據程式碼中路徑數量而計算出的循環複雜度。每當函數的控制流程分裂時，複雜度就會增加1。每個方法的最小複雜度為1。由於關鍵字和功能的不同，這種計算會因為不同的程式語言而略有不同。</p>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>特定語言的詳細訊息</h2><table>\n<thead>\n<tr>\n<th>語言</th>\n<th>筆錄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ABAP</td>\n<td>使用以下關鍵字將複雜度加1: <code>AND</code>, <code>CATCH</code>, <code>CONTINUE</code>, <code>DO</code>, <code>ELSEIF</code>, <code>IF</code>, <code>LOOP</code>, <code>LOOPAT</code>, <code>OR</code>, <code>PROVIDE</code>, <code>SELECT…ENDSELECT</code>, <code>TRY</code>, <code>WHEN</code>, <code>WHILE</code></td>\n</tr>\n<tr>\n<td>C/C++/Objective-C</td>\n<td>複雜度加1: function definitions, <code>while</code>, <code>do while</code>, <code>for</code>, <code>throw</code> statements, <code>switch</code>, <code>case</code>, <code>default</code>, <code>&#x26;&#x26;</code> operator, <code>||</code> operator, <code>?</code> ternary operator, <code>catch</code>, <code>break</code>, <code>continue</code>, <code>goto</code>.</td>\n</tr>\n<tr>\n<td>COBOL</td>\n<td>下列命令使複雜度增加一倍（在剪貼簿中使用時除外）: <code>ALSO</code>, <code>ALTER</code>, <code>AND</code>, <code>DEPENDING</code>, <code>END_OF_PAGE</code>, <code>ENTRY</code>, <code>EOP</code>, <code>EXCEPTION</code>, <code>EXIT</code>, <code>GOBACK</code>, <code>CONTINUE</code>, <code>IF</code>, <code>INVALID</code>, <code>OR</code>, <code>OVERFLOW</code>, <code>SIZE</code>, <code>STOP</code>, <code>TIMES</code>, <code>UNTIL</code>, <code>USE</code>, <code>VARYING</code>, <code>WHEN</code>, <code>EXEC CICS HANDLE</code>, <code>EXEC CICS LINK</code>, <code>EXEC CICS XCTL</code>, <code>EXEC CICS RETURN</code></td>\n</tr>\n<tr>\n<td>Java</td>\n<td>關鍵字增加複雜度: <code>if</code>, <code>for</code>, <code>while</code>, <code>case</code>, <code>catch</code>, <code>throw</code>, <code>&#x26;&#x26;</code>, <code>||</code>, <code>?</code></td>\n</tr>\n<tr>\n<td>JavaScript, PHP</td>\n<td>複雜度每增加一: function (即非抽象和非匿名的建構子、函數、過程或方法), <code>if</code>, short-circuit (AKA lazy) logical conjunction (<code>&#x26;&#x26;</code>), short-circuit (AKA lazy) logical disjunction (<code>||</code>), ternary conditional expressions, loop, <code>case</code> clause of a <code>switch</code> statement, <code>throw</code> and <code>catch</code> statement, <code>go to</code> statement (only for PHP)</td>\n</tr>\n<tr>\n<td>PL/I</td>\n<td>以下關鍵字將複雜度加一: <code>PROC</code>, <code>PROCEDURE</code>, <code>GOTO</code>, <code>GO TO</code>, <code>DO</code>, <code>IF</code>, <code>WHEN</code>, <code>|</code>, <code>!</code>, <code>|=</code>, <code>!=</code>, <code>&#x26;</code>, <code>&#x26;=</code></td>\n</tr>\n<tr>\n<td>PL/SQL</td>\n<td>複雜度加一: the main PL/SQL anonymous block (not inner ones), create procedure, create trigger, procedure<em>definition, basic loop statement, when</em>clause<em>statement (the “when” of simple</em>case<em>statement and searched</em>case<em>statement), continue</em>statement, cursor<em>for</em>loop<em>statement, continue</em>exit<em>when</em>clause (The “WHEN” part of the continue and exit statements), exception<em>handler (every individual “WHEN”), exit</em>statement, for<em>loop</em>statement, forall<em>statement, if</em>statement, elsif<em>clause, raise</em>statement, return<em>statement, while</em>loop<em>statement, and</em>expression (“and” reserved word used within PL/SQL expressions), or<em>expression (“or” reserved word used within PL/SQL expressions), when</em>clause<em>expression (the “when” of simple</em>case<em>expression and searched</em>case_expression)</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td>複雜度加一: 方法或建構子聲明(Sub, Function), <code>AndAlso</code>, <code>Case</code>, <code>Continue</code>, <code>End</code>, <code>Error</code>, <code>Exit</code>, <code>If</code>, <code>Loop</code>, <code>On Error</code>, <code>GoTo</code>, <code>OrElse</code>, <code>Resume</code>, <code>Stop</code>, <code>Throw</code>, <code>Try</code>.</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><strong>認知複雜度</strong> (<code>cognitive_complexity</code>)<br>\n了解程式碼的控制流程有多麼困難。有關用於計算此標準的數學模型的完整說明，請參見<a href=\"https://www.sonarsource.com/resources/white-papers/cognitive-complexity.html\">認知複雜性白皮書</a>。</p>\n<hr>\n<h2>重複性(Duplications)</h2>\n<p><strong>重複的區域</strong> (<code>duplicated_blocks</code>)<br>\n重複區域的行數。</p>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>特定語言的詳細訊息</h2><p>對於被視為重複區域的程式碼:</p><p>非Java專案:  </p><ul>\n<li>至少有100個連續且重複的token</li>\n<li>這些token至少應分散在:</li>\n<li>30行的COBOL程式碼內</li>\n<li>20行的ABAP程式碼內</li>\n<li>10行的其他語言程式碼內</li>\n</ul><p>Java專案:<br>\n無論token和行的數量如何，應至少有10個連續且重複的statement。在檢測重複性時，縮排和字串的差異可被忽略。</p></div></div>\n<p><strong>重複的文件</strong> (<code>duplicated_files</code>)<br>\n重複涉及到的文件數。</p>\n<p><strong>重複的行數</strong> (<code>duplicated_lines</code>)<br>\n重複涉及到的行數。</p>\n<p><strong>重複的行數 (%)</strong> (<code>duplicated_lines_density</code>)<br>\n= <code>duplicated_lines</code> / <code>lines</code> * 100</p>\n<hr>\n<h2>問題(Issues)</h2>\n<p><strong>新問題</strong> (<code>new_violations</code>)<br>\n新程式內首次提出的問題數量。</p>\n<p><strong>新的xxx問題</strong> (<code>new_xxx_violations</code>)<br>\n新程式內首次提出的xxx問題數量，其中xxx是以下項之一: <code>blocker</code>, <code>critical</code>, <code>major</code>, <code>minor</code>, <code>info</code>。</p>\n<p><strong>問題</strong> (<code>violations</code>)<br>\n所有問題的總數。</p>\n<p><strong>xxx的問題</strong> (<code>xxx_violations</code>)<br>\nxxx的問題總數，其中xxx是以下項之一: <code>blocker</code>, <code>critical</code>, <code>major</code>, <code>minor</code>, <code>info</code>。</p>\n<p><strong>誤報問題</strong> (<code>false_positive_issues</code>)<br>\n標記為誤報的問題總數。</p>\n<p><strong>開放式問題</strong> (<code>open_issues</code>)<br>\n處於「開放」狀態的問題總數。</p>\n<p><strong>已確認的問題</strong> (<code>confirmed_issues</code>)<br>\n處於「已確認」狀態的問題總數。</p>\n<p><strong>重新開放的問題</strong> (<code>reopened_issues</code>)<br>\n處於「重新開放」狀態的問題總數。</p>\n<hr>\n<h2>可維護性(Maintainability)</h2>\n<p><strong>程式碼異味</strong> (<code>code_smells</code>)<br>\n有程式碼異味問題總數。</p>\n<p><strong>新的程式碼異味</strong> (<code>new_code_smells</code>)<br>\n首次提出的程式碼異味問題總數。</p>\n<p><strong>可維護性等級</strong> (<code>sqale_rating</code>)<br>\n(前SQALE評級)\n給專案的評級與技術債務比率(Technical Debt Ratio)有關。默認的「可維護性等級」標準為:</p>\n<p>A=0-0.05, B=0.06-0.1, C=0.11-0.20, D=0.21-0.5, E=0.51-1</p>\n<p>可維護性等級量表可以通過以下方式替代性表示:</p>\n<ul>\n<li>若未解決的補救成本小於5％(包含)進入應用程式的時間則評為A級</li>\n<li>若未解決的補救成本介於6％到10％進入應用程式的時間則評為B級</li>\n<li>若未解決的補救成本介於11％到20％進入應用程式的時間則評為C級</li>\n<li>若未解決的補救成本介於21％到50％進入應用程式的時間則評為D級</li>\n<li>若未解決的補救成本超過50%以上(不含)進入應用程式的時間則評為E級</li>\n</ul>\n<p><strong>技術債務</strong> (<code>sqale_index</code>)<br>\n努力修復所有程式碼異味。該標準以分鐘為單位存儲在資料庫中。以天為單位顯示值時，假設一天為8小時。</p>\n<p><strong>新程式的技術債務</strong> (<code>new_technical_debt</code>)<br>\n努力修復在新程式內首次提出的所有程式怪味道。</p>\n<p><strong>技術債務比率</strong> (<code>sqale_debt_ratio</code>)<br>\n開發軟體的成本與修復軟體的成本之間的比率。此技術債務比率公式為:<br>\n<code>Remediation cost / Development cost</code><br>\n可以重述為:<br>\n<code>Remediation cost / (Cost to develop 1 line of code * Number of lines of code)</code><br>\n開發一行程式碼的成本值為0.06天。</p>\n<p><strong>新程式碼的技術債務比率</strong> (<code>new_sqale_debt_ratio</code>)<br>\n在新程式內更改程式碼的開發成本和與其相關的問題之成本間的比率。</p>\n<hr>\n<h2>質量門(Quality Gates)</h2>\n<p><strong>質量門狀態</strong> (<code>alert_status</code>)<br>\n與您的專案關聯的質量門狀態。可能的值為: <code>ERROR</code>, <code>OK</code>\n(自7.6起已刪除WARN值)</p>\n<p><strong>質量門詳細訊息</strong> (<code>quality_gate_details</code>)<br>\n對於質量門的所有條件，您都知道哪個條件失敗了，哪個不是。</p>\n<hr>\n<h2>可靠性(Reliability)</h2>\n<p><strong>Bugs</strong> (<code>bugs</code>)<br>\nBugs的問題數量。</p>\n<p><strong>新的漏洞</strong> (<code>new_bugs</code>)<br>\n新的漏洞的問題數量。</p>\n<p><strong>可靠性度等級</strong> (<code>reliability_rating</code>)<br>\nA = 0個Bugs<br>\nB = 至少1個次要的Bugs\nC = 至少1個主要的Bugs<br>\nD = 至少1個嚴重的Bugs<br>\nE = 至少1個阻止程式運行的Bugs</p>\n<p><strong>可靠性補救措施</strong> (<code>reliability_remediation_effort</code>)<br>\n努力解決所有Bug的問題。該標準以分鐘存儲在資料庫中。以天為單位顯示值時，假設一天為8小時。</p>\n<p><strong>新程式碼的可靠性補救工作</strong> (<code>new_reliability_remediation_effort</code>)<br>\n與可靠性補救措施相同，但在新程式內更改程式碼。</p>\n<hr>\n<h2>安全性(Security)</h2>\n<p><strong>漏洞</strong> (<code>vulnerabilities</code>)<br>\n有漏洞的問題之數量。</p>\n<p><strong>新漏洞</strong> (<code>new_vulnerabilities</code>)<br>\n新的有漏洞的問題之數量。</p>\n<p><strong>安全等級</strong> (<code>security_rating</code>)<br>\nA = 0個漏洞\nB = 至少1個次要的漏洞\nC = 至少1個重大的漏洞\nD = 至少1個嚴重的漏洞\nE = 至少1個阻止程式運行的漏洞</p>\n<p><strong>安全補救措施</strong> (<code>security_remediation_effort</code>)<br>\n努力解決所有有漏洞的問題。該項標準以分鐘存儲在資料庫中。以天為單位顯示值時，假設一天為8小時。</p>\n<p><strong>對新程式碼的安全補救措施</strong> (<code>new_security_remediation_effort</code>)<br>\n與安全補救措施相同，但在新程式內更改程式碼。</p>\n<p><strong>安全熱點</strong> (<code>security_hotspots</code>)\n安全熱點數量</p>\n<p><strong>新的安全熱點</strong> (<code>new_security_hotspots</code>)\n新的安全熱點數量</p>\n<p><strong>安全審查等級</strong> (<code>security_review_rating</code>)</p>\n<p>每1000行程式碼處於「正在審閱」狀態的安全熱點數的比率。</p>\n<p>A = 0–3 每1000行程式碼「審核」和「審核中」安全熱點\nB = >3–10\nC = >10–15\nD = >15–25\nE = >25  </p>\n<hr>\n<h2>大小(Size)</h2>\n<p><strong>類別</strong> (<code>classes</code>)<br>\n類別的數量 (包含隱藏類別、物件、列舉和註解)。</p>\n<p><strong>註解行數</strong> (<code>comment_lines</code>)<br>\n含註解或註解掉的程式碼的行數。</p>\n<p>不重要的註解行（空註解行，僅包含特殊字符的註解行等）不會增加註釋行數。</p>\n<p>以下程式碼包含9行註釋行：</p>\n<pre><code>/**                                    +0 => 空註解行\n *                                     +0 => 空註解行\n * This is my documentation            +1 => 重要註解行\n * although I don't                    +1 => 重要註解行\n * have much                           +1 => 重要註解行\n * to say                              +1 => 重要註解行\n *                                     +0 => 空註解行\n ***************************           +0 => 非重要註解行\n *                                     +0 => 空註解行\n * blabla...                           +1 => 重要註解行\n */                                    +0 => 空註解行\n  \n/**                                    +0 => 空註解行\n * public String foo() {               +1 => 註解掉的程式碼\n *   System.out.println(message);      +1 => 註解掉的程式碼\n *   return message;                   +1 => 註解掉的程式碼\n * }                                   +1 => 註解掉的程式碼\n */                                    +0 => 空註解行\n</code></pre>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>特定語言的詳細訊息</h2><table>\n<thead>\n<tr>\n<th>語言</th>\n<th>筆錄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>COBOL</td>\n<td>包含以下說明的行被視為註解和程式碼行： <code>AUTHOR</code>, <code>INSTALLATION</code>, <code>DATE-COMPILED</code>, <code>DATE-WRITTEN</code>, <code>SECURITY</code>.</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>文件標頭不算作註解行（因為它們通常定義許可證）。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><strong>註解 (%)</strong> (<code>comment_lines_density</code>)<br>\n註解行的密度 = 註解行數 / (程式碼的行數 + 註解行數) * 100</p>\n<p>使用以下的公式：</p>\n<ul>\n<li>50％表示程式碼行數等於註解行數</li>\n<li>100％表示文件僅包含註解</li>\n</ul>\n<p><strong>目錄</strong> (<code>directories</code>)<br>\n目錄數。</p>\n<p><strong>文件</strong> (<code>files</code>)<br>\n文件數。</p>\n<p><strong>行數</strong> (<code>lines</code>)<br>\n物理行數（enter鍵數量）。</p>\n<p><strong>程式碼行數</strong> (<code>ncloc</code>)<br>\n包含至少一個字元的物理行數，該字元既不是空格，也不是列表或註解的一部分。</p>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>特定語言的詳細訊息</h2><table>\n<thead>\n<tr>\n<th>語言</th>\n<th>筆錄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>COBOL</td>\n<td>生成的程式碼和預處理指令（SKIP1，SKIP2，SKIP3，COPY，EJECT，REPLACE）不計為程式碼行數。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><strong>每種語言的程式碼行數</strong> (<code>ncloc_language_distribution</code>)<br>\n按語言分佈的程式碼的非註解行數。</p>\n<p><strong>函式</strong> (<code>functions</code>)<br>\n函式的數量。根據語言的不同，函式可以是函數、方法或段落。</p>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>特定語言的詳細訊息</h2><table>\n<thead>\n<tr>\n<th>語言</th>\n<th>筆錄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>COBOL</td>\n<td>為段落的數量。</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>anonymous classes中的方法將被忽略。</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td>Accesors不被視為方法。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><strong>專案</strong> (<code>projects</code>)<br>\n一個作品集的專案數量。</p>\n<p><strong>Statements</strong> (<code>statements</code>)<br>\nstatement的數量。</p>\n<hr>\n<h2>測試(Tests)</h2>\n<p><strong>條件覆蓋率</strong> (<code>branch_coverage</code>)<br>\n在包含一些布林表達式的每一行程式碼中，條件覆蓋率僅回答以下問題：「每個布林表達式都被評估為true和false嗎？」。這是在單元測試執行期間遵循的流量控制結構中可能條件的密度。</p>\n<p><code>條件覆蓋率 = (CT + CF) / (2*B)</code>   </p>\n<ul>\n<li>CT = 至少被評估一次為「true」的條件</li>\n<li>CF = 至少被評估一次為「false」的條件</li>\n<li>B = 條件總數</li>\n</ul>\n<p><strong>新程式碼的條件覆蓋</strong> (<code>new_branch_coverage</code>)<br>\n條件覆蓋範圍相同，但僅限於新的/更新過的原始碼。</p>\n<p><strong>條件覆蓋命中率</strong> (<code>branch_coverage_hits_data</code>)<br>\n覆蓋條件清單。</p>\n<p><strong>條件行數</strong> (<code>conditions_by_line</code>)<br>\n條件的行數。</p>\n<p><strong>條件覆蓋行數</strong> (<code>covered_conditions_by_line</code>)<br>\n條件覆蓋的行數。</p>\n<p><strong>覆蓋範圍</strong> (<code>coverage</code>)<br>\n它是線路覆蓋和條件覆蓋的混合。它的目標是為以下問題提供更準確的答案：「單元測試已覆蓋了多少原始碼？」。</p>\n<p><code>覆蓋範圍 = (CT + CF + LC)/(2*B + EL)</code>  </p>\n<ul>\n<li>CT = 至少被評估一次為「true」的條件</li>\n<li>CF = 至少被評估一次為「false」的條件</li>\n<li>LC = 覆蓋行數 = lines<em>to</em>cover - uncovered_lines</li>\n<li>B = 條件總數</li>\n<li>EL = 可執行的行數(<code>lines_to_cover</code>)</li>\n</ul>\n<p><strong>新程式碼的覆蓋範圍</strong> (<code>new_coverage</code>)<br>\n與覆蓋範圍相同，但僅限於新的或更新過的原始碼。</p>\n<p><strong>Line coverage</strong> (<code>line_coverage</code>)<br>\n在給定的程式碼中，Line coverage僅回答以下問題：「在執行單元測試期間是否已執行了此程式碼行？」。它是單元測試中被覆蓋的行數之密度：</p>\n<p><code>Line coverage = LC / EL</code>  </p>\n<ul>\n<li>LC = 被覆蓋的行數(<code>lines_to_cover</code> - <code>uncovered_lines</code>)</li>\n<li>EL = 可執行的總行數(<code>lines_to_cover</code>)</li>\n</ul>\n<p><strong>新程式碼的Line coverage</strong> (<code>new_line_coverage</code>)<br>\n與Line coverage相同，但僅限於新的或更新過的原始碼。</p>\n<p><strong>Line coverage比率</strong> (<code>coverage_line_hits_data</code>)<br>\n被覆蓋的行數之列表。</p>\n<p><strong>Lines to cover</strong> (<code>lines_to_cover</code>)<br>\n單元測試中可以覆蓋的程式碼行數（空行或完整的註解行不能被視為Lines to cover）。</p>\n<p><strong>新程式碼的Lines to cover</strong> (<code>new_lines_to_cover</code>)<br>\n與Lines to cover相同，但僅限於新的或更新過的原始碼的行。</p>\n<p><strong>跳過的單元測試數</strong> (<code>skipped_tests</code>)<br>\n跳過的單元測試的數量。</p>\n<p><strong>未覆蓋條件數</strong> (<code>uncovered_conditions</code>)<br>\n單元測試中未覆蓋的條件數。</p>\n<p><strong>新程式碼未覆蓋條件數</strong> (<code>new_uncovered_conditions</code>)<br>\n與未覆蓋條件數相同，但僅限於新的或更新過的原始碼。</p>\n<p><strong>未覆蓋行數</strong> (<code>uncovered_lines</code>)<br>\n單元測試中未覆蓋的程式碼行數。</p>\n<p><strong>新程式碼未覆蓋行數</strong> (<code>new_uncovered_lines</code>)<br>\n與未覆蓋行數相同，但僅限於新的或更新過的原始碼。</p>\n<p><strong>單元測試</strong> (<code>tests</code>)<br>\n單元測試數。</p>\n<p><strong>單元測試時間</strong> (<code>test_execution_time</code>)<br>\n執行所有單元測試所需的時間。</p>\n<p><strong>單元測試錯誤</strong> (<code>test_errors</code>)<br>\n失敗的單元測試數。</p>\n<p><strong>單元測試失敗</strong> (<code>test_failures</code>)<br>\n因意外異常而失敗的單元測試數。</p>\n<p><strong>單元測試成功密度(%)</strong> (<code>test_success_density</code>)<br>\n<code>測試成功密度 = (單元測試 - (單元測試錯誤 + 單元測試失敗)) / 單元測試 * 100</code></p>","fields":{"slug":"/user-guide/metric-definitions/"}}},{"node":{"html":"<p><em>作品集（Portfolios）是 <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">企業版</a> 和 <a href=\"https://www.sonarsource.com/plans-and-pricing/\">以下版本</a> 的一部分。</em></p>\n<h3>作品集首頁</h3>\n<p>作品集首頁是一個可以讓經理和技術領導者監督他們專案可發布性的中心。可發佈性是基於品質門檻（quality gate）：通過是可以發佈的，失敗則不行，每個作品集（Portfolios）首頁都有提供作品集（Portfolios）中所有專案可發佈性的匯總視圖。</p>\n<p>在這頁的頂在這頁的頂部，你可以輕鬆的查看整個作品集（Portfolios）目前是否為可發佈的，以及是否有任何作品集（Portfolios）的專案是未通過品質門檻（quality gate）的。可靠性、安全漏洞、安全審查和可維護性等級顯示出了作品集（Portfolios）在這三個領域中整體的運行狀況，以及每個領域中表現最差的專案的指標。</p>\n<p>對於每個領域，你會看到：</p>\n<p>評級（rating）（有關如何計算的詳細信息，請參閱“指標定義”）</p>\n<ul>\n<li>評級（rating）（想知道更多如何計算的信息，請參閱 <a href=\"/SonarQubeChineseDoc8.1/user-guide/metric-definitions/\">指標定義（Metric Definitions）</a>）</li>\n<li>評級最後一次更改時的指標</li>\n<li>該領域中表現最差的專案指標</li>\n</ul>\n<h3>可發佈等級</h3>\n<p>可發佈等級是作品集（Portfolios）中得到<strong>通過（Passed）</strong>品質門檻（quality gate）的專案的比例：</p>\n<p><strong>A</strong>: > 80%<br>\n<strong>B</strong>: > 60%<br>\n<strong>C</strong>: > 40%<br>\n<strong>D</strong>: > 20%<br>\n<strong>E</strong>: &#x3C;= 20%  </p>\n<h3>可靠性、安全漏洞、安全審查和可維護性等級</h3>\n<p>作品集（Portfolios）中的可靠性、安全漏洞、安全審查和可維護性等級是根據該作品集（Portfolios）中所有專案的平均等級計算的。</p>\n<p>SonarQube將每個項目的字母評級轉換為數字（請參見下方的轉換表），計算作品集（Portfolios）中的平均專案數量，然後將該平均值轉為字母，平均值以四捨五入為基準，所以平均值如果為 2.5 將四捨五入為 3 ，得出C等級。</p>\n<p>這樣就可以在你的作品集（Portfolios）上提供可靠性、安全漏洞、安全審查和可維護性的四軸上提供「問題密度（problem density）」度量。</p>\n<p>評級轉換：</p>\n<p><strong>E</strong>: 5<br>\n<strong>D</strong>: 4<br>\n<strong>C</strong>: 3<br>\n<strong>B</strong>: 2<br>\n<strong>A</strong>: 1  </p>\n<p><em>注意：作品集（Portfolios）首頁也同樣可以用在子作品集（Sub-Portfolio）上</em></p>\n<h3>作品集（Portfolios）PDF報告</h3>\n<p>在作品集（Portfolios）首頁上方，你可以藉由右上角的「作品集（Portfolios） PDF 報告（Portfolio PDF Report）」的下拉式選單中選擇<strong>下載成 PDF 檔（Download as PDF）</strong>來下載作品（）集的 PDF 概述。例如，如果你要參加一場可能無法使用 SonarQube 的會議，這就非常便利。</p>\n<p>你可以藉由「作品集（Portfolios） PDF 報告（Portfolio PDF Report）」的下拉式選單中選擇<strong>訂閱</strong>來訂閱，即可通過電子郵件來接收 PDF。你可以透過作品集（Portfolios）和全局設定來設定報告頻率要為<strong>每天</strong>、<strong>每周</strong>或是<strong>每月</strong>。默認的頻率為每月一次。</p>\n<p><strong>注意：</strong> 僅在計算完作品集（Portfolios）後，你才會收到 PDF。</p>\n<p>在作品集（Portfolios）全局管理設定中可以創建和編輯作品集（Portfolios）：<strong>管理（Administration） > 配置（Configuration） > 作品集（Portfolios）（Portfolios）</strong>。想看更多資訊，請至 <a href=\"/SonarQubeChineseDoc8.1/project-administration/configuring-portfolios-and-applications/\">作品集（Portfolios）配置和應用程式（Configuring Portfolios and Applications）</a>。</p>","fields":{"slug":"/user-guide/portfolios/"}}},{"node":{"html":"<p><em>安全報告是 <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">企業版</a>和 <a href=\"https://www.sonarsource.com/plans-and-pricing/\">以下版本</a>的一部分。</em></p>\n<h2>安全報告可以顯示什麼？</h2>\n<p>安全報告可快速為您提供應用程序安全性的概覽，其中包括 <a href=\"https://www.owasp.org/index.php/Top_10-2017_Top_10\">OWASP 的 Top 10</a>，<a href=\"https://www.sans.org/top25-software-errors\">SANS 的 Top 25</a> 類別以及 <a href=\"http://cwe.mitre.org/\">CWE</a>-特定細節的詳細信息。</p>\n<p>安全報告由分析儀（analyzers）產生，而分析儀（analyzers）仰賴於品質配置文件（quality profiles）中啟動的規則來引發安全問題（security issues）。如果在品質配置文件（quality profiles）中啟動的規則沒有相對應於 OWASP 的類別，則不會出現與該特定類相同關的問題（issues），並且顯示的等級為 A，這並不意味著您對該類別是安全的，只是您可能需要激活更多規則（假設還存在一些其他的規則）。</p>\n<h2>安全熱點（Security Hotspot）和漏洞（Vulnerability）有什麼區別？</h2>\n<p>漏洞（Vulnerability）是程式碼中容易受到攻擊的點，安全熱點（Security Hotspot）顯示出了有安全疑慮的程式碼區段，需要對其進行手動檢查來確保敏感的程式碼區段以最安全的方式使用。安全熱點（Security Hotspot）還有助於對開發人員進行安全性訓練。</p>\n<p>更多相關的詳細信息，<a href=\"/SonarQubeChineseDoc8.1/user-guide/security-hotspots/\">安全熱點（Security Hotspots）</a>。</p>\n<h2>為什麼安全熱點（Security Hotspot）和漏洞（Vulnerability）很相似？</h2>\n<p>他們是刻意要相似的，安全熱點（Security Hotspot）規則應該包括漏洞（Vulnerability）規則的所有匹配項，和污點分析引擎無法檢測到漏洞（Vulnerability）的情況。例如，從一種語言切換為另一種語言（XML, JNI...等），使用某些第三方庫（library）將會阻止污點分析發現漏洞。漏洞（Vulnerability）規則只有在高度信任的情況下才會突出顯示安全威脅，這意味著它始終會忽略其中的一些威脅。而安全熱點（Security Hotspot）規則藉由顯示那些可能有問題潛伏的程式碼（即使它無法檢測到任何漏洞）來引導安全程式碼審查。</p>\n<h2>為什麼我看不到任何安全熱點（Security Hotspot）和漏洞（Vulnerability）？</h2>\n<p>由於以下原因，您可能看不到任何漏洞或安全熱點：</p>\n<ul>\n<li>您看不到任何東西，因為程式碼是在不使用任何有安全疑慮的API的情況下編寫的。</li>\n<li>漏洞（Vulnerability）或安全熱點（Security Hotspot）規則可使用，但未在品質配置文件（quality profiles）中啟動，因此不會引發漏洞（Vulnerability）或安全熱點（Security Hotspot）。</li>\n<li>您所用語言的分析器目前可能僅提供一些規則，而不會引發任何漏洞（Vulnerability）或僅出現少量漏洞（Vulnerability）或安全熱點（Security Hotspot）。</li>\n</ul>","fields":{"slug":"/user-guide/security-reports/"}}},{"node":{"html":"<p>｛實例｝品質模組有三種不同種類的規則：可靠性（錯誤），脆弱性（安全），以及維護性（程式碼異味）規則。但是用其他方法區分，只會有兩種種類：安全規則，以及其他剩餘的規則。這兩個種類在他們所擷取到的東西沒有太大的區別，而是在他們的出處以及加註在他們之上的標準。 </p>\n<h2>對安全性相關規則的期望</h2>\n<p>要清楚，｛實例｝語言外掛程式中實施的規則大部分標準都非常嚴格：不准有錯誤。對於一般的規則，你應該可以確信回報給你的任何問題確實是一個問題。 </p>\n<p>但是對於安全相關的規則，事情就會以一點不同了。例如，很多安全引導訴說「敏感」資料該如何被處理（例如：不做紀錄，不在未加密的情況下儲存，諸如此類。）但是由於要想在一個規則中分辨哪個資料是敏感資料與否實在不太可能，我們選擇要維持零誤報標準並且不實作安全相關的規則，抑或是以不同的標準實作安全相關的規則。 </p>\n<p>這就是為何安全相關的規則會投射出一個與你所習慣的更為寬廣的網。這個做法是該規則會標記任何有嫌疑的東西，並將它留給人工安全審查員來剔除誤報並發送真實問題進行補救。 </p>\n<p>安全疑慮熱點是一個特種的議題，它可以辨識出需要被檢視的敏感程式碼區域，確定他是否包含脆弱的程式碼。 更多資訊請見 <a href=\"/SonarQubeChineseDoc8.1/user-guide/security-hotspots/\">安全疑慮熱點</a>。</p>\n<h2>安全相關的規則從何而來？</h2>\n<p>大多數的安全相關規則源自於已經被建立的標準：<a href=\"http://cwe.mitre.org/\">CWE</a>, <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a>，以及 <a href=\"https://www.owasp.org/index.php/Top_10-2017_Top_10\">OWASP Top 10</a>. 欲找到與這些標準相關的任何規則，你可以利用不論標籤或者文字作為搜尋條件。這些規則所相關的標準都會被列在規則描述底部的 <strong>查看</strong> 區塊。 </p>\n<h3>CWE</h3>\n<p>CWE 代表通用缺陷列表。根據 CWE <a href=\"http://cwe.mitre.org/about/faq.html#A.1\">常見問題</a>：</p>\n<blockquote>\n<p>通用缺陷列表 ( CWE™ ) 是一個通用軟體弱點的正式清單或字典，軟體弱點在軟體的結構、設計、程式碼或實作會導致可利用的安全漏洞。 CWE 的創造是為了做為一個描述軟體安全弱點的共同語言；作為一個瞄準這些弱點的軟體安全工具的標準量尺；以及作為通用弱點辨識、緩和、以及預防的基準。 </p>\n</blockquote>\n<p>CWE 是弱點描述的層次結構。結構中最低階層的是叫做「弱點基礎」，描述著一個細微的弱點。在弱點基礎之上，是弱點定義與類別。一般來說，規則會連接著弱點基礎或弱點定義。 </p>\n<p>工具如果符合特定要求，即可被認證為與 <a href=\"http://cwe.mitre.org/compatible/\">CWE 兼容</a>。 要求如下：</p>\n<ul>\n<li>必須能夠利用 CWE 的辨識符號搜尋 CWE 相關規則。要在｛實例｝平台上進行此操作，只需要在規則頁面上的搜索文字框中刪除刪除 CWE 辨識符號（例如 CWE - 595 ）並進行搜尋。 </li>\n<li>規則必須準確的連接到與她們相關的 CWE 物件，如欲看到 CWE 全圖對應的｛實例｝規則，請參照規則描述底部的「查看」區塊。</li>\n<li>你必須要能夠辨識議題中與 CWE 相關的部分。要在｛實例｝平台上進行此操作，請參照相關的規則。 </li>\n<li>產品文件必須包含一份 CWE 與 CWE 兼容性的描述。 </li>\n<li>你所支援的 CWE 版本必須列出。｛實例｝語言外掛程式支援 2.8 版本。 </li>\n<li>除了可以根據 CWE 辨識碼搜尋規則，你也可以利用「CWE」規則標籤進行搜尋。</li>\n</ul>\n<p>要看到 CWE 物件覆蓋了哪些語言，請參照底下的連結： </p>\n<ul>\n<li><a href=\"https://rules.sonarsource.com/c/tag/cwe\">C</a>/<a href=\"https://rules.sonarsource.com/cpp/tag/cwe\">C++</a></li>\n<li><a href=\"https://rules.sonarsource.com/java/tag/cwe\">Java</a> </li>\n<li><a href=\"https://rules.sonarsource.com/objective-c/tag/cwe\">Objective-C</a></li>\n</ul>\n<h3>SANS Top 25</h3>\n<p><a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> 列表是由<a href=\"http://www.sans.org/\">SANS 組織</a>. 當今的 SANS 列表被分為三種種類：元件之間不安全的互動、危險的資源管理、漏洞百出的防禦。 </p>\n<p>SANS 所使用的標籤與其所對應的種類： SANS 不安全的前 25 名、 SANS 危險的前 25 名、 SANS 有漏洞的前 25 名。 </p>\n<p>要找到關於 SANS 前 25 名的規則，你可以對類別進行文字搜尋，或者對相關的 CWE 物件，或者是進行規則標籤的搜尋。 </p>\n<h3>OWASP Top 10</h3>\n<p>OWASP 代表開放式網頁應用程式安全專案。根據它的官方網站，他表示： </p>\n<blockquote>\n<p>一家全球性的 <a href=\"http://www.irs.gov/Charities-&#x26;-Non-Profits/Charitable-Organizations/Exemption-Requirements-Section-501(c)(3)-Organizations\">501(c)(3)</a> 非營利慈善組織，致力於改善軟體的安全性。我們的使命是要讓軟體的安全性 <a href=\"https://www.owasp.org/index.php/Category:OWASP_Video\">可見</a>，以便讓全世界的 <a href=\"https://www.owasp.org/index.php/Industry:Citations\">個體與組織</a> 可以對真正的軟體安全風險做出明智的決定。 </p>\n</blockquote>\n<p><a href=\"https://www.owasp.org/index.php/Top_10-2017_Top_10\">OWASP Top 10</a> 是一個列出廣泛種類弱點的列表，每一個種類可以映射到許多獨立的規則。 </p>\n<p>OWASP Top 10 所使用的標籤所對應的弱點分類： owasp-a1，owasp-a2，owasp-a3，owasp-a4，owasp-a5，owasp-a6，owasp-a7，owasp-a8，owasp-a9，owasp-a10。 </p>\n<p>要找到關於 OWASP Top 10 的規則，你可以對類別進行文字搜索，或者進行規則標籤搜尋。 </p>","fields":{"slug":"/user-guide/security-rules/"}}},{"node":{"html":"<h2>什麼是 安全疑慮熱點（Security Hotspots）？</h2>\n<p>與 漏洞 不同，安全疑慮熱點 不一定是容易受到攻擊的問題點。相反，安全疑慮熱點重點顯示了需要人工檢查的有安全疑慮的程式碼段落。經過審查，您可能會發現需要修正的漏洞也可能發現不構成威脅。</p>\n<h2>為什麼 安全疑慮熱點（Security Hotspots）很重要？</h2>\n<p>安全疑慮熱點 有助於您集中精力於檢查有安全疑慮的程式碼。通過查看 安全疑慮熱點，您可以：</p>\n<ul>\n<li><strong>解決安全問題</strong> – 審查 安全疑慮熱點 給您在 拉取請求（pull request）或發布分支前發現漏洞並且確認問題已修正的機會。</li>\n<li><strong>了解安全性</strong> – SonarQube 會向您解釋為什麼您的程式碼被標註為 安全疑慮熱點，以及與眾所皆知的攻擊或弱點（例如 SQL注入、弱密碼，或身份驗證）之間的關聯。這會幫助您知道何時在寫有安全疑慮的程式碼，且知道如何避免出現漏洞。</li>\n</ul>\n<h2>安全疑慮熱點生命週期（Security Hotspot Lifecycle）</h2>\n<p>安全疑慮熱點具有專用的生命週期，並且必須由具有「管理安全疑慮熱點（Administer Security Hotspots）」權限的人員檢查。</p>\n<h3>狀態</h3>\n<p>在整個生命週期中，安全疑慮熱點會處於以下狀態之一：</p>\n<ul>\n<li><strong>需審閱（To Review）</strong> – SonarQube 設置的新安全疑慮熱點的默認狀態。表示已報告安全疑慮熱點，需要進行檢查。</li>\n<li><strong>審查中（In Review）</strong> – 安全疑慮熱點 正被檢查，以確認程式中沒有漏洞。</li>\n<li><strong>已查閱（Reviewed）</strong> – 安全疑慮熱點 已被檢查，並且無發現安全性問題。</li>\n</ul>\n<p>只有當包含安全疑慮熱點的程式碼被刪除或禁用該規則時，該 安全疑慮熱點 才會關閉。</p>\n<h3>動作（Actions）</h3>\n<p>您可以對 安全疑慮熱點 採取以下動作：</p>\n<ul>\n<li><strong>已審核且解決（Resolve as Reviewed）</strong> – 程式碼中沒有漏洞。</li>\n<li><strong>設定為正在審查（Set as In Review）</strong> – 正在檢查是否有漏洞。</li>\n<li><strong>重置為需審查（Reset as To Review）</strong> – 安全疑慮熱點 需再分析檢查一次。</li>\n<li><strong>設為已知漏洞（Open as Vulnerability）</strong> – 程式碼中有必須被修正的漏洞。</li>\n</ul>\n<h3>工作流程</h3>\n<p>當 SonarQube 檢測到 安全疑慮熱點 時，會將它標為需審查。您可以對 安全疑慮熱點 採取一下動作：</p>\n<ul>\n<li>如果您在 安全疑慮熱點 的程式碼位置發現了漏洞，您可以設為 <strong>設為已知漏洞（Open as Vulnerability）</strong>。</li>\n<li>如果您在 安全疑慮熱點 的程式碼位置沒有找到漏洞，您可以標記為 <strong>已審核且解決（Resolve as Reviewed）</strong>。</li>\n<li>如果您想標記 安全疑慮熱點 以顯示您將要或正在審查它的漏洞，您可以 <strong>設定為正在審查（Set as In Review）</strong>。這是 工作流程 中選擇性的步驟。\n如果您將 安全疑慮熱點 已設定為 <strong>正在審查（In Review）</strong>，它可以被標記為以下兩種：</li>\n<li>如果您在 安全疑慮熱點 的程式碼位置發現了漏洞，您可以設為 <strong>設為已知漏洞（Open as Vulnerability）</strong>。</li>\n<li>如果您在 安全疑慮熱點 的程式碼位置沒有找到漏洞，您可以 <strong>標注為已審查（Resolve as Reviewed）</strong>。\n當確定安全疑慮熱點位置存在漏洞並選擇 <strong>設為已知漏洞</strong> 時，其狀態從 <strong>正在查看</strong> 或 <strong>正在查看</strong> 變為 <strong>開啟</strong>。這會將 安全疑慮熱點 轉換為 漏洞，並且上次接觸該代碼行的開發人員將收到「新問題」通知（如果她有註冊獲取該通知）。</li>\n</ul>\n<p>在 安全疑慮熱點 位置開啟漏洞後，將發生以下情況：</p>\n<ol>\n<li>將 安全疑慮熱點 分配給適當的開發人員，然後開發人員進行修復。</li>\n<li>然後，開發人員通過使用者介面將 漏洞 標記為 <strong>已審核且解決（Resolve as Reviewed）</strong>，這會將 漏洞 恢復為 安全疑慮熱點。</li>\n<li>然後，安全疑慮熱點被標記為 <strong>已審核（Reviewed ）</strong>，並且其狀態為 <strong>已修復（Fixed）</strong>。</li>\n</ol>\n<p>如果確定確實存在問題，則可以隨時重新開啟已審查的 安全疑慮熱點 作為 漏洞。</p>","fields":{"slug":"/user-guide/security-hotspots/"}}},{"node":{"html":"<p><em>SonarLint 智慧通知在 <a href=\"https://redirect.sonarsource.com/editions/developer.html\">開發者版本</a> 與其 <a href=\"https://www.sonarsource.com/plans-and-pricing/\">以上的版本</a> 都可用。</em></p>\n<p>智慧通知使開發人員在使用 SonarLint 連線模式下從｛實例｝取得 IDE 內的通知，當 ： </p>\n<ul>\n<li>在 IDE 中的 專案／解決辦法 的品質大門狀態 （失敗／成功）改變時。 </li>\n<li>一個｛實例｝分析引發了 <em>由此開發人員在 IDE 中打開的專案／解答中引入的</em> 新問題 </li>\n</ul>\n<h2>啟用／停用 通知</h2>\n<p>通知的啟用與停用都必須被個別的完成，由各個開發人員直接在 SonarLint 中設定（在 IDE 端）。 </p>\n<p>接收通知功能可以在 SonarLint 端逐個伺服器（每個實例）上配置 </p>","fields":{"slug":"/user-guide/sonarlint-notifications/"}}},{"node":{"html":"<h2>簡介</h2>\n<p>在｛實例｝中，分析器提供了在程式碼執行上的規則來產生問題。其規則有四種： </p>\n<ul>\n<li>程式碼異味（可維護性 域）</li>\n<li>錯誤（可靠性 域）</li>\n<li>漏洞（安全 域）</li>\n<li>安全疑慮熱點（安全 域）</li>\n</ul>\n<p>對於程式碼異味與錯誤，我們期望的是零錯誤回報，至少這是我們的目標，這樣一來開發人員就不用懷疑是否需要修復。 </p>\n<p>對於漏洞，目標是要上80%以上的議題為正確回報。 </p>\n<p>安全性熱點規則吸引安全性敏感的程式碼的注意，在開發人員審查之後，預計超過80%的問題會被迅速的解決為「已審查」。</p>\n<p>規則頁面是可以發現所有 已存在的規則 或 基於所提供的模板創建新規則 的入口 </p>\n<h2>規則</h2>\n<p>在預設條件下，當你進入菜單頂端的「規則」項目時，您將看到由  安裝在｛實例｝上的  分析器帶來的 。 您可以基於左側的選項面板縮小搜尋的準則： </p>\n<ul>\n<li><strong>語言</strong> ： 規則所適用的語言。</li>\n<li><strong>種類</strong> ： 錯誤、漏洞、程式碼異味或安全疑慮熱點規則。 </li>\n<li><strong>標記</strong> ： 為了分類與幫助您可以更容易地發現，為規則增加標籤是可行的。 </li>\n<li><strong>儲存庫</strong> ： 提供規則給｛實例｝的引擎／分析器。</li>\n<li><strong>預設嚴重程度</strong> ： 規則的嚴重原始程度  --- 與提供此規則的分析器所規定的一致。</li>\n<li>\n<p><strong>狀態</strong> ： 規則可以三種不同的狀態：</p>\n<ul>\n<li><strong>測試</strong> ： 該規則近期才被實施，並且我們尚未從使用者得到足夠的回饋，因此可能會存在一些錯誤的正確回報與錯誤的錯誤回報。 </li>\n<li><strong>不推薦使用</strong> ： 該規則不應該再被使用由於一個相似，但又更加的有力與準確的規則存在。 </li>\n<li><strong>預備</strong>: 該規則已經可以被應用在生產中。 </li>\n</ul>\n</li>\n<li><strong>可用自</strong> ： 當一個規則初次被加入｛實例｝中。這對列出上次實例插件的更新是很實用的。 </li>\n<li><strong>模板</strong> ： 展示允許創造客製化規則的模板（稍後此頁會敘述） </li>\n<li><strong>品質設定檔</strong> ： 從一個特定的設定檔中引入或排除。 </li>\n</ul>\n<p>如果一個品質設定檔被選定，您也可以檢視它的啟用嚴重程度以及它是否被繼承。更多資訊請看品質設定檔文件。 </p>\n<h2>詳細規則</h2>\n<p>欲看到一個規則的詳細規定，你可以選擇點選它，或者使用右箭頭的按鈕。隨著基本的規則資料，你也能夠看到是否有任何設定檔是啟用的以及它產生了多少開放問題。 </p>\n<p>以下的動作只有在擁有正確的權限下才可進行（管理品質設定檔與門檻）： </p>\n<ul>\n<li>\n<p><strong>增加／移除 標籤</strong> ： </p>\n<ul>\n<li>增加標籤在現有的規則上，或建立新的標籤，是可行的（只要在文字框輸  入時輸入一個新的名字即可）。 </li>\n<li>注意有些規則具有無法移除的內建標籤，他們的來源是提供規則的的插件。 </li>\n</ul>\n</li>\n<li>\n<p><strong>擴充描述</strong> ： </p>\n<ul>\n<li>你可以擴充規則敘述來讓使用者知道你的組織是如何使用一個特定的規則或給予一個規則更深層的敘述。 </li>\n<li>注意，被擴充的敘述將會被當成正常的規則詳細敘述提供給非管理員使用者使用。 </li>\n</ul>\n</li>\n</ul>\n<h2>規則模板與客製化規則</h2>\n<p>規則模板是由插件所提供，作為用戶在｛實例｝中定義自己的客製化規則的基礎。欲找到模板，從模板下拉選單中選擇 <strong>僅顯示模板</strong> 畫面： </p>\n<p><img src=\"/images/rule-templates.png\" alt=\"Rule templates.\"></p>\n<p>若要從模板建立一個客製化規則請點選「客製化規則」標題旁邊的 <strong>建立按鈕</strong> 並填入以下資訊： </p>\n<ul>\n<li>名稱</li>\n<li>金鑰（自動建議）</li>\n<li>描述（支援 Markdown 格式）</li>\n<li>預設危險程度</li>\n<li>狀態</li>\n<li>模板指定的參數</li>\n</ul>\n<p>透過點擊「客製化規則」區域裡的連結，你可以從一個模板導航至被它所定義的客製化規則的詳細內容。 </p>\n<p><img src=\"/images/rule-template-details.png\" alt=\"Rule template details.\"></p>\n<h3>客製化規則</h3>\n<p>你除了可以編輯或刪除以外，客製化規則跟一般的規則一樣：</p>\n<p><img src=\"/images/rules-custom.png\" alt=\"Custom rules.\"></p>\n<p><strong>注意 ：</strong> 當你刪除一個客製化規則，它並不是實際上從｛實例｝中移除實例，而是它的狀態被設成「被移除」而已。這允許與此規則相關當前的或是舊的議題被正確的顯示在｛實例｝中直到他被完全的移除。 </p>\n<h2>擴充程式設計的規則</h2>\n<p>客製化程式設計規則是可以增加的。 詳情與教學請見 <a href=\"/SonarQubeChineseDoc8.1/extend/adding-coding-rules/\">增加程式設計規則</a>。</p>\n<h2>規則種類與嚴重性</h2>\n<h3>規則是如何被分類的？</h3>\n<p>｛實例｝品質模型將規則分為四個類別 ： 錯誤、漏洞、安全熱點，以及程式碼異味。規則基於以下問題的答案被指派到各類別去。 </p>\n<p>**是否這條關於程式碼的規則很明顯是錯的或者是有很大的可能為錯誤？ **<br>\n如果答案為「是」，那他就是屬於錯誤規則。<br>\n如果不是...</p>\n<p>**是否這條關於程式碼的規則會被駭客利用？ **<br>\n如果答案為「是」，那他就是屬於漏洞規則。<br>\n如果不是...</p>\n<p><strong>是否這條關於程式碼的錯誤對於安全性是敏感的？</strong><br>\n如果答案為「是」，那他就是屬於安全疑慮熱點規則。<br>\n如果不是...</p>\n<p>**是否這個規則不屬於一個錯誤抑或是漏洞？ **<br>\n如果答案為「是」，那他就是屬於程式碼異味規則。 </p>\n<h2>嚴重程度如何分配？</h2>\n<p>分配嚴重程度給規則前，我們問更進一步的系列問題。第一個基本上是： </p>\n<p><strong>最糟糕的情況可能是甚麼？</strong></p>\n<p>在回答這個問題時，我們試著考慮莫非定律而非預測最糟狀況。 </p>\n<p>然後我們評估最糟的狀況的影響與可能性是高或低（<em>參見底下如何確定嚴重性和可能性</em>），然後將答案插入真值表：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>影響</th>\n<th>可能性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>封鎖者</td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td>最嚴重影響</td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/cross.svg\"></td>\n</tr>\n<tr>\n<td>主要影響</td>\n<td><img src=\"/images/cross.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td>次要影響</td>\n<td><img src=\"/images/cross.svg\"></td>\n<td><img src=\"/images/cross.svg\"></td>\n</tr>\n</tbody>\n</table>\n<h2>嚴重性與可能性是如何定義的？</h2>\n<p>欲分析一條規則的嚴重性，我們從最糟的事情開始 （請見上文 <em>嚴重度如何分配？</em>） 並詢問各類別特定的問題： </p>\n<h3>錯誤</h3>\n<p>影響: <strong>最糟的狀況能否造成應用程式崩潰或損毀已儲存的資料？</strong></p>\n<p>可能性: <strong>最嚴重可能發生甚麼事情？</strong></p>\n<h3>漏洞</h3>\n<p>影響: <strong>最糟的狀況的利用會不會對你的資產或你的用戶造成嚴重影響？</strong></p>\n<p>可能性: <strong>駭客能利用最糟的狀況的可能性有多大？</strong></p>\n<h3>安全疑慮熱點</h3>\n<p>安全疑慮熱點沒有被分配嚴重性因為在對它審查之前不知道是否確實有潛在的漏洞。 </p>","fields":{"slug":"/user-guide/rules/"}}},{"node":{"html":"<p>作為 SonarQube 的使用者，您擁有自己的空間，在那裡可以看到跟自己相關的事物。</p>\n<h2>配置</h2>\n<p>它為你提供以下摘要:</p>\n<ul>\n<li>你的群組</li>\n<li>你的 SCM 帳戶</li>\n</ul>\n<h2>安全</h2>\n<p>如果你未使用 LDAP 或 OAuth 的第三方身份驗證機制（GitHub, Google 帳號, ...等），則你可以在這此處更改你的密碼。此外，你也可以管理你的身分驗證權杖（authentication token）</p>\n<p>你可以根據你想要的數量創建權杖（Token）。當權杖（Token）生成後，你可以使用它對有 <a href=\"/SonarQubeChineseDoc8.1/instance-administration/security/\">執行分析</a>權限的專案進行分析</p>","fields":{"slug":"/user-guide/user-account/"}}},{"node":{"html":"<p>視覺化能幫助你深入的了解你的專案當前的狀態與歷史 。 </p>\n<h2>我該如何為多個專案或專案元件比較當前狀況 ?</h2>\n<p>透過 ” 專案 ” 空間，你可以透過數個測量準則來過濾實例中的項目。一旦你選擇了你的集合，你就不用需要盯著原始數字即可確定項目所面臨的風險。替代的是，透過數個視覺化效果 ( 專案 > 透視圖 ) 來幫助你了解每個專案在每個主軸上的相對位置： </p>\n<ul>\n<li>風險 – 可靠性與安全性等級，測試範圍，技術負債，以及程式碼行數。 </li>\n<li>可靠性 – 可靠性等級，可靠性補救措施，程式碼行數，以及臭蟲計算。 </li>\n<li>安全性 – 安全性等級，安全性補救措施，程式碼行數，漏洞計算。 </li>\n<li>可維護性 – 可維護性等級，技術負債，程式碼行數，以及程式碼氣味計算。 </li>\n<li>覆蓋率 – 覆蓋率，複雜度，以及未覆蓋的線路。 </li>\n<li>複製 – 複製的程式碼 % ，程式碼行數，以及複製的區塊。 </li>\n<li>在專案級別中，這些相同的視覺化效果在“測量”欄位可用以當祝你比較項目元件。“專案概述”對應於“專案”空間中的“風險”視覺化。對於其他的五個圖形，你可以在相關域之下選擇“概述”選項。 </li>\n</ul>\n<p>此外，樹狀圖還可以在專案級別中使用百分比與評定指標。在右邊窗格中使用透視圖選擇器在“測量”標籤中導向它。 </p>\n<h2>我如何將度量歷史視覺化？</h2>\n<p>在專案級別中，“活動”標籤提供跨時間的多個選定指標的固定折線圖，並且具很方便的，滑鼠懸停即可喜善圖上的詳細訊息以及可以輕鬆的將圖縮小歷史紀錄的一部份的功能。除了固定的圖表之外，你還可以在“自定義”圖表中選擇相互比較的指標。 </p>\n<p><img src=\"/images/visualizations.png\"></p>","fields":{"slug":"/user-guide/visualizations/"}}},{"node":{"html":"<p>每個使用者都可以去生成一個權杖（token），這個權杖（token）可以用於運行分析和使用網頁服務而不需使用者的實際憑證。</p>\n<h2>如何生成權杖（Token）</h2>\n<p>要生成權杖（token），到 <strong>使用者（User） > 我的帳戶（My Account） > 安全（Security）</strong>。 您現存的權杖（token）都在這裡，每一個權杖（token）都有撤消按鈕。</p>\n<p>此頁面的底部允許你生成權杖（token），當你按下<strong>生成（Generate）</strong>按鈕時，你將會看到權杖（token）的值，請盡速將它紀錄下來，一旦取消通知後，你將無法再次找回它。</p>\n<h2>如何使用權杖（token）</h2>\n<p>使用者權杖（token）是用來代替你的常規登入:</p>\n<ul>\n<li>當在運行你的程式碼分析時:利用權杖（token）中的 <code>sonar.login</code> 屬性代替你的登入。</li>\n<li>當使用網頁服務時: 只需傳遞權杖（token），而不用登錄即可做基本身分認證。</li>\n</ul>\n<p>在這兩種情況下，你都不需提供密碼（所以當運行你的程式碼分析時， <code>sonar.password</code> 屬性是可以自行選擇的）</p>","fields":{"slug":"/user-guide/user-token/"}}},{"node":{"html":"<p>SonarCloud can autonomously scan your code, by simply reading it from your repository! We call that AutoScan.</p>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>This is currently a Beta feature, with a limited scope and some caveats. Those limitations will be removed along the way.</p></div></div>\n<h2>Prerequisites</h2>\n<ul>\n<li>The first version of this Beta feature works only for GitHub repositories. </li>\n<li>The automatic analysis can be activated only on projects which are bound to their remote repository. This implies that the the project was set up through the SonarCloud web interface by selecting a repository (i.e. not \"manually\").</li>\n</ul>\n<h2>What to expect</h2>\n<p>Once activated, SonarCloud will automatically analyze: </p>\n<ul>\n<li>the default branch of the repository</li>\n<li>the pull requests (PR)</li>\n</ul>\n<p>It will take care of doing it whenever you push on your repository.</p>\n<p>The following languages are currently supported: </p>\n<ul>\n<li>ABAP</li>\n<li>Apex</li>\n<li>CSS</li>\n<li>Flex</li>\n<li>Go</li>\n<li>HTML</li>\n<li>JS</li>\n<li>Kotlin</li>\n<li>PHP</li>\n<li>Python</li>\n<li>Ruby</li>\n<li>Scala</li>\n<li>Swift</li>\n<li>TypeScript</li>\n<li>TSQL</li>\n<li>XML</li>\n</ul>\n<h2>How to activate the feature?</h2>\n<p>To enable the automatic analysis, you need to add a <code>.sonarcloud.properties</code> file in your repository.</p>\n<p>If you're starting from scratch:</p>\n<ol>\n<li>\n<p>Do the <a href=\"/SonarQubeChineseDoc8.1/#sonarcloud#/projects/create\">setup for your project</a> (from the <code>+ > Analyze new project</code> top right menu)</p>\n<ul>\n<li><img src=\"/images/exclamation.svg\"> Remember that your project must absolutely be created by selecting a GitHub repository - otherwise it won't work.</li>\n</ul>\n</li>\n<li>Once the setup is done on SonarCloud, you end up on the project home page which shows a tutorial. Ignore it and simply add a <code>.sonarcloud.properties</code> file in the base directory of your default branch or on a PR. </li>\n<li>After a while, the analysis results will be visible in SonarCloud (and your PR will be annotated with comments if you pushed the file on a PR)</li>\n</ol>\n<p>Here are the supported optional settings for the <code>.sonarcloud.properties</code> file:</p>\n<pre><code># Path to sources\n#sonar.sources=.\n#sonar.exclusions=\n#sonar.inclusions=\n\n# Path to tests\n#sonar.tests=\n#sonar.test.exclusions=\n#sonar.test.inclusions=\n\n# Source encoding\n#sonar.sourceEncoding=UTF-8\n\n# Exclusions for copy-paste detection\n#sonar.cpd.exclusions=\n</code></pre>\n<p>Note that you can just push an empty <code>.sonarcloud.properties</code> file, this will work fine. In this case, every file in the repository will be considered as a source file.</p>\n<h2>Current limitations/caveats</h2>\n<ul>\n<li>There is no visual feedback (yet) in the UI when SonarCloud runs an analysis.</li>\n<li>A consequence of the previous point is that if - for any reason, SonarCloud fails to successfully run the analysis, nothing will be displayed. In that case, just come on <a href=\"https://community.sonarsource.com/tags/c/help/sc/autoscan\">the forum</a> and ask a question, we'll monitor that closely.</li>\n<li>Code coverage information is not supported</li>\n<li>Import of external rule engine reports is not supported</li>\n</ul>\n<h2>Noteworthy</h2>\n<ul>\n<li>This Beta feature works for any project - public or private.</li>\n<li>It can be activated with no extra cost.</li>\n<li>Sources are cloned only during the analysis, and only when the <code>.sonarcloud.properties</code> file exists (i.e. when the feature is activated). The cloned repository is fully deleted at the end of the analysis, and SonarCloud does not keep a copy of it.</li>\n<li>Non supported languages (Java, C#, VB.NET, C/C++, ObjectiveC) are not analyzed at all.</li>\n</ul>\n<h2>How to give feedback?</h2>\n<p>Create a new thread on the forum, under <a href=\"https://community.sonarsource.com/tags/c/help/sc/autoscan\">\"Get Help > SonarCloud\"</a>, with the \"autoscan\" tag.</p>\n<p>We'd love to hear your feedback about this new upcoming feature, may it be about bugs, improvements, or anything you want to share with us!</p>","fields":{"slug":"/sonarcloud/autoscan/"}}},{"node":{"html":"<p>Subscribing to a paid plan on SonarCloud allows you to analyze unlimited private projects, to know more about all the advantages of a paid plan check our <a href=\"/SonarQubeChineseDoc8.1/#sonarcloud#/about/pricing\">pricing page</a>.</p>\n<h2>How do I activate the paid plan?</h2>\n<p>You can activate the paid plan on the <strong>Administration > Billing</strong> page of your organization.</p>\n<h2>How do I get invoices?</h2>\n<p>You can download PDF invoices for every payment from the <strong>Administration > Billing</strong> page of your organization.</p>\n<p>If you want to get invoices by email, go to <strong>Administration > Billing > Edit billing info</strong> and check \"Send the monthly receipt to this email\".</p>","fields":{"slug":"/sonarcloud/sonarcloud-pricing/"}}},{"node":{"html":"<p>The privacy policy specifies how data collected on this website is used. Thank you for visiting our website and your interest in our services and products. As the protection of your personal data is an important concern for us, we will explain below what information we collect during your visit to our website, as they are processed and whether or how these may be used.</p>\n<h2>PERSONAL DATA</h2>\n<p>Personal information is data about personal or material circumstances of an identified or identifiable natural person. This includes information such as your first and last name, your postal or residential address, telephone numbers and date of birth. Information that can not be directly related to your real identity – such as your favorite websites or the number of users of a page – are not considered as personal data.</p>\n<h2>COLLECTION AND PROCESSING OF PERSONAL DATA</h2>\n<p>As the operator and creator of the website, we do not store personal data itself automatically. If you go to our website, the provider – where the web server is hosted – may temporarily store data for the purpose of system security such as the connection of the computer, the web pages you visit, the date and duration of the visit, data about the used browser software and operating system and the web page from which you visit us. In addition to that, personal information such as your name, address, phone number or e-mail will only be stored, if you have provided this information voluntarily, eg. as part of a registration, a survey, a contest, to carry out an order or contract or an information request.</p>\n<h2>USE AND DISCLOSURE OF PERSONAL DATA</h2>\n<p>Personal data you provided may be used solely for the purpose of technical website administration and to fulfill your wishes and requirements, thus primarily to processing the order with you or to respond to your request. Only if you have previously given your consent or – if stipulated by legal regulations – you entered no objection, we use this data for product surveys and marketing purposes. We don’t share, sell or transfer your personal data to third parties, unless this is necessary for the purpose of the contract or unless you have explicitly consented. For example it may be necessary, that in case of an product order we share your address and order with our suppliers.</p>\n<h2>USE OF WEB ANALYSIS SOFTWARE</h2>\n<p>To improve the structure and the data we offer on our website, we might use open source or proprietary web analysis software. Our evaluations will be based on summary or averaged information amalgamated for the large numbers of people visiting the vebsite. The data provided by won’t be matched with any individual’s data from other sources.</p>\n<p>Data collected might include IP, time and duration of the visit, what pages are visited, used browser and add-ons/plugins, search-engines and referrer. While statistic tools might use a “cookie” to distinguish between individual visitors, the collected data doesn’t allow to identify individuals.</p>\n<h2>INFORMATION USED DURING AUTHENTICATION</h2>\n<p>We use the following information for authentication with GitHub / Bitbucket / Azure DevOps.</p>\n<h3>GitHub</h3>\n<ul>\n<li>ID</li>\n<li>Login</li>\n<li>Name</li>\n<li>Email</li>\n<li>List of organizations the user is member of</li>\n</ul>\n<p>For more information:</p>\n<ul>\n<li><a href=\"https://developer.github.com/v3/users/#get-the-authenticated-user\">https://developer.github.com/v3/users/#get-the-authenticated-user</a></li>\n<li><a href=\"https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user\">https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user</a></li>\n<li><a href=\"https://developer.github.com/v3/orgs/#list-your-organizations\">https://developer.github.com/v3/orgs/#list-your-organizations</a></li>\n</ul>\n<h3>Bitbucket</h3>\n<ul>\n<li>UUID</li>\n<li>Username</li>\n<li>Display name</li>\n<li>Email</li>\n<li>Is email defined as primary</li>\n</ul>\n<p>For more information:</p>\n<ul>\n<li><a href=\"https://developer.atlassian.com/bitbucket/api/2/reference/resource/user\">https://developer.atlassian.com/bitbucket/api/2/reference/resource/user</a></li>\n<li><a href=\"https://developer.atlassian.com/bitbucket/api/2/reference/resource/user/emails\">https://developer.atlassian.com/bitbucket/api/2/reference/resource/user/emails</a></li>\n</ul>\n<h3>Azure DevOps</h3>\n<ul>\n<li>Tenant ID</li>\n<li>Object ID</li>\n<li>Display name</li>\n<li>User Principal Name</li>\n<li>Email</li>\n</ul>\n<p>For more information:</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0\">https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0</a></li>\n</ul>\n<h2>SECURITY</h2>\n<p>We take all the necessary technical and organisational security measures to protect your personal data from loss and misuse. Your data is stored in a secure operating environment that is not accessible to the public. If you communicate with us via e-mail, please note that the confidentiality of the information is not guaranteed. The contents of e-mails can be intercepted by third parties. In case of doubt we therefore recommend to send confidential information only by snail mail.</p>\n<h2>RIGHT OF ACCESS TO PERSONAL DATA</h2>\n<p>Upon written request you will be informed by us what information we stored about you (such as name or address).</p>\n<h2>CONTACT</h2>\n<p>If you have questions regarding the processing of personal data or in case of requests for information, suggestions or complaints, please <a href=\"/SonarQubeChineseDoc8.1/#sonarcloud#/about/contact\">contact us</a> directly.</p>","fields":{"slug":"/sonarcloud/privacy/"}}},{"node":{"html":"<p>Here is the list of all the languages currently supported in SonarCloud :</p>\n<ul>\n<li><a href=\"https://redirect.sonarsource.com/plugins/abap.html\">ABAP</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/apex.html\">Apex</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/cpp.html\">C</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/cpp.html\">C++</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/csharp.html\">C#</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/objectivec.html\">Objective-C</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/cobol.html\">COBOL</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/css.html\">CSS</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/flex.html\">Flex</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/go.html\">Go</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/web.html\">HTML</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/java.html\">Java</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/javascript.html\">JavaScript</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/kotlin.html\">Kotlin</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/php.html\">PHP</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/plsql.html\">PL/SQL</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/python.html\">Python</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/ruby.html\">Ruby</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/scala.html\">Scala</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/swift.html\">Swift</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/typescript.html\">TypeScript</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/tsql.html\">T-SQL</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/vbnet.html\">Visual Basic .NET</a></li>\n<li><a href=\"https://redirect.sonarsource.com/plugins/xml.html\">XML</a></li>\n</ul>","fields":{"slug":"/sonarcloud/supported-languages/"}}},{"node":{"html":"<p>We know that your code is very important to you and your business. We also know that no one wants proven bugs or vulnerabilities found on their source code to be unveiled to third-parties. This is why we take security extremely seriously.</p>\n<h2>Hosting</h2>\n<p>SonarCloud runs primarily off the AWS Frankfurt region. It also uses marginally services located in the AWS Ireland region when they are not available in Frankfurt.</p>\n<h2>System security</h2>\n<p>SonarCloud uses its own Virtual Private Cloud (AWS VPC). Accesses to the infrastructure are restricted through firewalls, allowing accesses from SonarSource networks only. Secure protocols are required for accesses and SSL keys are used for authentication. Access to the infrastructure, inclusive of storage, is restricted to the Technology Operations team.</p>\n<h2>Data security</h2>\n<p>At the infrastructure level, access to data is controlled by virtue of being hosted in network zones which only the Technology Operations have access to. </p>\n<p>To insure data availability, the SonarCloud database is replicated in quasi real time between 2 availability zones both within the Frankfurt region. In addition, the database is fully backed up every day with a 7 days retention. </p>\n<p>At the software level, SonarCloud ensures private source code is accessible to organization members only, in addition to SonarSource Technology Operations team for support purposes only.</p>\n<h2>Software security</h2>\n<p>SonarCloud UI and APIs regularly pass penetration testing conducted by a an external company, specialized in cyber and application security, certified in accordance to ISO-27001 and which is also member of the OWASP.</p>\n<p>In case you find a vulnerability, please follow our <a href=\"https://community.sonarsource.com/t/responsible-vulnerability-disclosure/9317\">Responsible Vulnerability Disclosure process</a> to report it to our Security team.</p>\n<h2>Communications</h2>\n<p>All communications are done over TLS and support TLS 1.2:</p>\n<ul>\n<li>Navigating in the Web application</li>\n<li>Using WS APIs</li>\n<li>Running analysis (by the scanners) from CI services and pushing analysis reports to SonarCloud</li>\n</ul>\n<h2>SonarCloud Webhooks</h2>\n<p>You can use secrets to secure webhooks and ensure they are coming from SonarCloud (see the \"Securing your webhooks\" section of the <a href=\"/SonarQubeChineseDoc8.1/project-administration/webhooks/#securing-your-webhooks\">Webhooks</a> page for more information). </p>\n<h2>Authentication</h2>\n<p>Primary authentication on the system is available through the SonarCloud GitHub application, through OAuth authentication with Bitbucket Cloud and Microsoft Azure DevOps. As a consequence, users don’t have a password on SonarCloud, and are as protected as what they expect (especially with 2FA activated on those systems). </p>\n<p>For WS API calls or source code analysis triggered from CI services, only revocable user tokens are accepted.</p>\n<h2>Payment</h2>\n<p>When you subscribe to the paid plan on SonarCloud, your credit card information never transit through our system nor it gets stored on the server. It's handed off to <a href=\"https://www.braintreepayments.com\">Braintree Payment Solutions</a>, a company dedicated to storing your sensitive data on <a href=\"http://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard\">PCI-Compliant</a> servers.</p>","fields":{"slug":"/sonarcloud/security/"}}},{"node":{"html":"<h2>Overview</h2>\n<p>An organization is a space where a team or a whole company can collaborate across many projects.</p>\n<p>An organization consists of:</p>\n<ul>\n<li>Projects, on which users collaborate</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/organizations/manage-team/\">Members</a>, who can have different permissions on the projects</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/instance-administration/quality-profiles/\">Quality Profiles</a> and <a href=\"/SonarQubeChineseDoc8.1/user-guide/quality-gates/\">Quality Gates</a>, which can be customized and shared accross projects</li>\n</ul>\n<p>Organizations can be on:</p>\n<ul>\n<li><strong>Free plan</strong>. This is the default plan. Every project in an organization on the free plan is public.</li>\n<li><strong>Paid plan</strong>. This plan unlocks the ability to have private projects. Go to the \"Billing\" page of your organization to upgrade it to the paid plan.</li>\n</ul>\n<p>Depending on which plan the organization is in, its <a href=\"/SonarQubeChineseDoc8.1/organizations/organization-visibility/\">visibility</a> will change.</p>\n<p>You can create organizations from the top right menu \"+ > Create new organization\"</p>\n<h2>FAQ</h2>\n<h3>How to bind an existing organization to GitHub or Bitbucket Cloud?</h3>\n<p>You might notice the following warning message on your pull requests inside SonarCloud:</p>\n<pre><code>The SonarCloud GitHub application is installed on your GitHub organization, but the\nSonarCloud organization is not bound to it. Please read \"How to bind an existing\norganization?\" section in the \"Organizations\" documentation page to fix your setup.\n</code></pre>\n<p>This means that your SonarCloud organization is not bound to GitHub or Bitbucket Cloud whereas you had already installed the SonarCloud application (probably to annotate pull requests). To fix your setup, here are the steps to follow.</p>\n<p><strong>For GitHub:</strong></p>\n<ol>\n<li>Click your profile picture in the top right menu and select the organization.</li>\n<li>In the organization menu, click \"Administration > Organization settings\"</li>\n<li>Click on \"Choose an organization on GitHub\".</li>\n<li>On GitHub page, you should see a list of organization you are admin of. The organization you want to bind is marked as already configured. Click on it.</li>\n<li>Click on \"Uninstall\" at the bottom of the page.</li>\n<li>Go back to SonarCloud, to the settings page of your organization, and click on \"Choose an organization on GitHub\" again. The organization you want to bind should not be marked as configured anymore. Click on it, and then on \"Install\". After the installation, you will be redirected to SonarCloud.</li>\n<li>You are all set! You should see a GitHub icon close to the name of your organization at the top of the page.</li>\n</ol>\n<p><strong>For Bitbucket Cloud:</strong></p>\n<ol>\n<li>Click your profile picture in the top right menu and select the organization.</li>\n<li>In the organization menu, click \"Administration > Organization settings\"</li>\n<li>Click on \"Choose a team on Bitbucket\".</li>\n<li>\n<p>On Bitbucket Cloud page, select the name of the team you want to bind and click on \"Grant access\". You will then be redirected to SonarCloud.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>If you get a 405 error page from Bitbucket Cloud at this stage, this means that you did not approve a recent scope change - for which you should have received an email from Bitbucket Cloud. The easiest way to get around this is to uninstall the SonarCloud application in your Bitbucket Cloud \"Install apps\" settings, and reinstall it.</p></div></div>\n</li>\n<li>You are all set! You should see a Bitbucket Cloud icon close to the name of your organization at the top of the page.</li>\n</ol>\n<h3>How to transfer ownership of an organization?</h3>\n<p>You may want to transfer ownership of you organization when you want to delete your account, or when you are leaving a team or company.<br>\nYou can manage your organization members permissions in: \"Administration > Permissions\" and <a href=\"/SonarQubeChineseDoc8.1/organizations/manage-team/#granting-permissions\">grant \"Administer Organization\" permission</a> to another member.</p>\n<h3>How to delete an organization?</h3>\n<p>You can delete your organization in: \"Administration > Organization Settings > Delete Organization\".</p>","fields":{"slug":"/sonarcloud/organizations/"}}},{"node":{"html":"<p>Members can collaborate on the projects in the organizations to which they belong. Depending on their permisssions within the organization, members can:</p>\n<ul>\n<li>Analyze projects</li>\n<li>Manage project settings (permissions, visibility, quality profiles, ...)</li>\n<li>Update issues</li>\n<li>Manage quality gates and quality profiles</li>\n<li>Administer the organization itself</li>\n</ul>\n<p>Members are managed on the \"Members\" page of the organization. Only organization administrators can manage members. </p>\n<h2>Managing Members Manually</h2>\n<p>Members are managed manually when synchronization is not available (for Bitbucket Cloud or Azure Devops for example) or when synchronization is deactivated.</p>\n<h3>Adding Members</h3>\n<p>You can add members to an organization using the \"Add a member\" button. Administrators can search manually for SonarCloud users and add them as members.</p>\n<h2>Managing Members in GitHub</h2>\n<p>For organizations that are bound to GitHub, members can be synchronized with GitHub organizations or managed manually. </p>\n<p>Note that in all cases, members should have a SonarCloud account before being synchronized with GitHub or added manually.</p>\n<h3>Synchronizing Members with your GitHub Organization</h3>\n<p>When <a href=\"/SonarQubeChineseDoc8.1/organizations/overview/\">importing</a> a GitHub organization into SonarCloud, members are automatically synchronized with your GitHub organization.<br>\nThis means that each member of your GitHub organization who has a SonarCloud account will be automatically added to the SonarCloud organization,\nand will have direct access in SonarCloud to the organizations they've been added to. </p>\n<p>You can synchronize a bound organization with manually managed members using the \"Configure synchronization\" button.\nDuring synchronization, members of the SonarCloud organization who are not part of the GitHub organization are removed from the SonarCloud\norganization and members of the GitHub organization who are not members of the SonarCloud organization are added to the SonarCloud organization.</p>\n<p>After creating an organization or activating synchronization, SonarCloud users that are added or removed from the GitHub organization are automatically added or removed from\nthe SonarCloud organization. It's not possible to manually add or remove a member when synchronization is activated.</p>\n<p>Permissions are not synchronized and must be managed manually (see below).</p>\n<h3>Deactivating Member Synchronization</h3>\n<p>You can deactivate member synchronization using the \"Configure synchronization\" button.\nWhen you deactivate member synchronization, no members will be added or removed automatically.\nAfter deactivating synchronization, members will be managed manually.</p>\n<h2>Granting permissions</h2>\n<p>Once users are added or synchronized, organization administrators can grant them permissions to perform specific operations in the organization. It is up to the\nadministrators to make sure each member gets the relevant permissions.</p>\n<p>To avoid having to manage individual permissions at a project level, organization admins can create groups to manage permissions\nand add new users to those groups on the \"Members\" page.</p>\n<h2>Future evolutions</h2>\n<p>Future versions of SonarCloud will make this onboarding process easier for BitBucket Cloud, Azure Devops, and others.\nUsers' permissions will be retrieved from systems and mapped to SonarCloud permissions on a best-effort basis.</p>","fields":{"slug":"/sonarcloud/organizations/manage-team/"}}},{"node":{"html":"<h2>Free plan organization</h2>\n<p>Free plan organizations are public. This means that almost everything is visible to any user - even anonymous ones:</p>\n<ul>\n<li>Projects</li>\n<li>Issues</li>\n<li>Quality Profiles</li>\n<li>Quality Gates</li>\n<li>Rules</li>\n</ul>\n<p>The following pages are restricted:</p>\n<ul>\n<li>Members: to members of the organization</li>\n<li>Administration pages: to administrators of the organization</li>\n</ul>\n<h2>Paid plan organization</h2>\n<p>Paid plan organizations are private. This means that nothing is visible to non-members of the organization. In other words, you need to be a member of the organization to see:</p>\n<ul>\n<li>Projects - which are private by default</li>\n<li>Issues</li>\n<li>Quality Profiles</li>\n<li>Quality Gates</li>\n<li>Rules</li>\n<li>Members</li>\n</ul>\n<p>The administration pages are obviously also restricted to administrators of the organization.</p>\n<h3>Want to make one project public?</h3>\n<p>If you are on a paid plan organization but want to make a project public (for instance because you are developing an open-source library), this is possible. You will have to manually make the project public in its <strong>Administration > Permissions</strong> page. Once done, you will notice the \"Public\" badge on the project.</p>\n<p>As soon as you have one public project, the following pages will become visible to any user:</p>\n<ul>\n<li>Projects</li>\n<li>Issues</li>\n<li>Rules</li>\n</ul>\n<p>\"Quality Profiles\" and \"Quality Gates\" pages will remain restricted to members only - since you might not want to unveil some information used by your private projects.</p>","fields":{"slug":"/sonarcloud/organizations/organization-visibility/"}}},{"node":{"html":"<h2>Sign up and set up your first project</h2>\n<ol>\n<li>On the <a href=\"/SonarQubeChineseDoc8.1/#sonarcloud#/sessions/new\">login page</a>, click on the \"Log in with Bitbucket\" button and connect to SonarCloud using your Bitbucket Cloud account.</li>\n<li>Click on \"Analyze your code\" and follow the path to set up a first project</li>\n<li>You will be asked to install the SonarCould application on your team or user account, which will allow you to\nchoose which repositories you want to analyze.</li>\n</ol>\n<h2>Analyzing your repository</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/integrations/bitbucketcloud/bitbucket-pipelines/\">With Bitbucket Pipelines</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/integrations/bitbucketcloud/azure-pipelines/\">With Azure Pipelines</a>, if you analyze .NET applications and want to benefit from Azure DevOps features.</li>\n</ul>\n<h2>Quality widget</h2>\n<p>SonarCloud can provide a widget that shows the current quality metrics of your project directly on the repository's Overview page on Bitbucket Cloud.</p>\n<p>If you want to see this widget, you can go to the \"Settings > SonarCloud\" page of your repository and check \"Show repository overview widget\".</p>\n<h2>FAQ</h2>\n<p><strong>Do you have sample projects on Bitbucket Cloud?</strong>\nYou can take a look at these various projects: <a href=\"https://bitbucket.org/account/user/sonarsource/projects/SAMPLES\">Sample projects analyzed on SonarCloud</a></p>\n<p><strong>I don't see the widget with quality information whereas I configured everything</strong>\nMake sure that your browser is not using some extensions like AdBlocks. They tend to break the integration of third-party applications in BitBucket Cloud.</p>\n<h2>Upcoming features and improvements</h2>\n<p>There are various areas in which you can expect new features and improvements:</p>\n<ul>\n<li>Pull request decoration with inline comments to show the issues within the PR</li>\n<li>Better and easier team onboarding</li>\n<li>Automatic analysis (i.e. no need to configure anything from Pipelines)</li>\n</ul>","fields":{"slug":"/sonarcloud/integrations/bitbucketcloud/"}}},{"node":{"html":"<p>If you are analyzing .NET applications and want to benefit from the Azure DevOps / Pipelines experience and features, you have the possibility to setup a build pipeline, targeting your Bitbucket Cloud repository, and connected to SonarCloud.</p>\n<h2>Analyzing branches</h2>\n<p>Please be advised that the team where the Bitbucket Cloud repository is has to be bound to your SonarCloud organization in order to get this work.</p>\n<ol>\n<li>\n<p>Install the SonarCloud extension for Azure DevOps in your Azure DevOps organization : <a href=\"https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud\">SonarCloud extension</a>. You can have a look a <a href=\"https://docs.microsoft.com/en-us/labs/devops/sonarcloudlab/index?tutorial-step=1\">this chapter</a> of the global tutorial for Azure DevOps.</p>\n</li>\n<li>\n<p>Configure a new build pipeline (YAML or classic editor), targeting your Bitbucket Cloud repository. You will have to create a new service connection to that repository.</p>\n</li>\n<li>\n<p>Configure the Prepare SonarCloud configuration task just the way you will do for a regular Azure Git Repository.</p>\n</li>\n<li>\n<p>Go to the triggers tab of the pipeline configuration, click on the repository below <code>Continuous Integration</code> then click on <code>Enable continuous integration</code>, add a new branch filter with following configuration :</p>\n<ul>\n<li>Type : Include</li>\n<li>Branch specification : master</li>\n</ul>\n</li>\n</ol>\n<p>Want to see how it is working ? Have a look at our <a href=\"https://bitbucket.org/sonarsource/sample-dotnet-project-azuredevops\">sample .NET project</a></p>\n<h2>Analyzing pull requests</h2>\n<p>Pre-requisites :</p>\n<ul>\n<li>Follow the initiation steps of Analyzing branches with Azure pipelines above.</li>\n<li>Version 1.6.4+ of the Azure DevOps extension is needed.</li>\n</ul>\n<p>As for branches, you can trigger an analysis for Pull requests with an Azure DevOps pipeline and get your PR decorated.</p>\n<ol>\n<li>\n<p>On the Azure pipeline that will be used, click on the <code>Triggers</code> tab, then click on the repository below <code>Pull request validation</code></p>\n</li>\n<li>\n<p>Click on <code>Enable pull request validation</code> then configure the proper branch filters.</p>\n</li>\n</ol>","fields":{"slug":"/sonarcloud/integrations/bitbucketcloud-azurepipelines/"}}},{"node":{"html":"<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>This page is about Azure DevOps Services, formerly known as VSTS.</p></div></div>\n<p>You can connect to SonarCloud using your Azure DevOps account. On the <a href=\"/SonarQubeChineseDoc8.1/#sonarcloud#/sessions/new\">login page</a>, just click on the \"Log in with Azure DevOps\" button.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>Only work and school Azure DevOps accounts are authorized to login on SonarCloud.</p></div></div>\n<h2>Install the SonarCloud Azure DevOps extension</h2>\n<p>The SonarCloud Azure DevOps extension brings everything you need to have your projects analyzed on SonarCloud\nvery quickly:</p>\n<ul>\n<li>Integration with the Build definitions to easily trigger the analysis</li>\n<li>Pull request decoration to get quick feedback on the code changes</li>\n<li>Widget to have the overview quality of your projects inside Azure DevOps dashboards</li>\n</ul>\n<p>Install <a href=\"https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud\">SonarCloud extension for Azure DevOps</a>by clicking on the \"Get it free\" button.</p>\n<p>Then follow the comprehensive <a href=\"https://aka.ms/sonarcloudlab\">Microsoft lab on how to integrate Azure DevOps with SonarCloud</a>.</p>\n<h2>Quality Gate Status widget</h2>\n<p>You can monitor the Quality Gate status of your projects directly in your Azure DevOps dashboard. Follow these simple steps to configure your widget:</p>\n<ol>\n<li>\n<p>Once the Azure DevOps extension is installed and your project has been successfully analyzed, go to one of your Azure DevOps dashboards (or create one). Click on the pen icon in the bottom right corner of the screen, and then on the \"+\" icon to add a widget. </p>\n</li>\n<li>\n<p>In the list of widgets, select the \"Code Quality\" one and then click on the \"Add\" button. An empty widget is added to your dashboard. </p>\n</li>\n<li>\n<p>You can then click on the widget's cogwheel icon to configure it.</p>\n<ul>\n<li>\n<p><strong>For public projects:</strong> you can simply select your project from the dropdown. A searchbar inside the dropdown will help you find it easily. Just select it and click on the \"Save\" button.</p>\n</li>\n<li>\n<p><strong>For private projects:</strong> you'll have to log in using the links provided under the dropdown. Once logged in, your private projects will appear in the dropdown. Select the one you are interested in, and click on \"Save\".</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2>FAQ</h2>\n<ol>\n<li>\n<p>Which kind of analysis scenario are supported for .Net projects ?</p>\n<ul>\n<li>Using Sonar Scanner for MSBuild, you can build multiple .Net projects / solutions between the \"Prepare Analysis on SonarCloud\" and \"Run Analysis\" tasks. You will have full support of Issues and Code Coverage on both branches and PR Analysis. Other kind of scenarios are not yet supported.</li>\n</ul>\n</li>\n</ol>","fields":{"slug":"/sonarcloud/integrations/vsts/"}}},{"node":{"html":"<h2>Analyzing branches</h2>\n<p>Once your project is created and initiated from the repository you selected:</p>\n<ol>\n<li>\n<p>Generate a token to allow to publish analysis from Bitbucket Pipelines. To generate a token, follow the first step of the tutorial on the dashboard of the project, or go to your user security page.</p>\n</li>\n<li>\n<p>On Bitbucket Cloud, go to the \"Settings > Pipelines > Account variables\" page of your team, and add a new SONAR_TOKEN variable that contains the value of the SonarCloud token (something like <code>9ad01c85336b265406fa6554a9a681a4b281135f</code>).</p>\n<ul>\n<li><strong>Make sure that you click on the \"Lock\" icon to encrypt and hide this token.</strong></li>\n</ul>\n</li>\n<li>\n<p>Edit the <code>bitbucket-pipelines.yml</code> file of your repository to trigger the SonarCloud analysis.</p>\n</li>\n</ol>\n<p>Once those changes are pushed, Pipelines will automatically trigger analyses on the repository.</p>\n<p>You can see our multiple sample projects to see how it is working :</p>\n<ul>\n<li><a href=\"https://bitbucket.org/sonarsource/sample-gradle-project\">Built with Gradle</a></li>\n<li><a href=\"https://bitbucket.org/sonarsource/sample-maven-project\">Built with Maven</a></li>\n<li><a href=\"https://bitbucket.org/sonarsource/sample-nodejs-project\">Javascript project</a></li>\n</ul>\n<p>If you target a .NET application, see a <a href=\"https://bitbucket.org/sonarsource/sample-dotnet-project-azuredevops\">sample .NET project</a> built with Azure Pipelines</p>\n<h2>Analyzing pull requests</h2>\n<p>In order to trigger SonarCloud analysis on each pull request update, you have to supply the same command in the <code>pull-requests</code> section of <code>bitbucket-pipelines.yml</code> (check <a href=\"https://confluence.atlassian.com/bitbucket/configure-bitbucket-pipelines-yml-792298910.html#Configurebitbucket-pipelines.yml-ci_pull-requests\">Configure bitbucket-pipelines.yml</a> for more details about that section). Here is a sample configuration:</p>\n<pre><code>pipelines:\n  ...\n  pull-requests:\n    feature/*:\n      - step:\n          script:\n            - mvn sonar:sonar\n  ...\n</code></pre>\n<p>In order to avoid duplication between the different sections of your <code>bitbucket-pipelines.yml</code>, you can use <a href=\"https://confluence.atlassian.com/bitbucket/yaml-anchors-960154027.html\">yaml anchors and aliases</a>.</p>","fields":{"slug":"/sonarcloud/integrations/bitbucketcloud-bitbucketpipelines/"}}},{"node":{"html":"<h2>Sign up and set up your first project</h2>\n<ol>\n<li>On the <a href=\"/SonarQubeChineseDoc8.1/#sonarcloud#/sessions/new\">login page</a>, click on the \"Log in with GitHub\" button and connect to SonarCloud using your GitHub account.</li>\n<li>Click on \"Analyze your code\" and follow the path to set up a first project</li>\n<li>You will be asked to install the SonarCould application on your organization, which will allow you to choose which\nrepository you want to analyze.</li>\n</ol>\n<h2>Trigger analyses</h2>\n<p>For GitHub repositories, there are 2 ways to have your code analyzed:</p>\n<h3>... with AutoScan</h3>\n<p>With AutoScan, SonarCloud will autonomously pull your code and scan your default branch and your pull requests.\nPlease read the <a href=\"/SonarQubeChineseDoc8.1/autoscan/\">\"AutoScan Beta Feature\"</a> documentation page to get the details.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>This is currently a Beta feature which does not work for all languages and comes with limitations. </p></div></div>\n<h3>... using your CI service</h3>\n<p>If AutoScan does not make sense yet for your repository, you need to configure your CI service to trigger the analysis.</p>\n<p><strong>If you are using Travis CI</strong>, the SonarCloud Travis Add-on will make it easier to activate analyses:</p>\n<ul>\n<li>Read the <a href=\"https://docs.travis-ci.com/user/sonarcloud/\">guide to integrate with Travis CI</a></li>\n<li>Check out the <a href=\"https://github.com/SonarSource/sonarcloud_examples\">various sample projects</a> (Java, TypeScript, C/C++, Go, ... etc) that are analyzed on SonarCloud on a frequent basis</li>\n</ul>\n<p><strong>If you are using another CI service</strong>, you will need to read:</p>\n<ul>\n<li>the <a href=\"/SonarQubeChineseDoc8.1/analysis/overview/\">\"Analyzing Source Code\" overview page</a></li>\n<li>the <a href=\"/SonarQubeChineseDoc8.1/branches/overview/\">\"Branches\" overview page</a></li>\n<li>the <a href=\"/SonarQubeChineseDoc8.1/analysis/pull-request/\">\"Pull Request Analysis\" page</a></li>\n</ul>\n<p>Here is an example of configuration for pull requests when you are not on Travis CI and you need to configure your CI jobs:</p>\n<pre><code>sonar.pullrequest.base=master\nsonar.pullrequest.branch=feature/my-new-feature\nsonar.pullrequest.key=5\nsonar.pullrequest.provider=GitHub\nsonar.pullrequest.github.repository=my-company/my-repo\n</code></pre>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>Pull request decoration works only if <a href=\"https://github.com/apps/sonarcloud\">the SonarCloud application</a> is installed on your GitHub organization(s) and configured to have acccess to the repositories.</p></div></div>","fields":{"slug":"/sonarcloud/integrations/github/"}}},{"node":{"html":"<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p><strong>Download SonarScanner for Ant 2.7</strong> - Compatible with SonarQube 6.7+ (LTS)<br>\nBy <a href=\"https://www.sonarsource.com/\">SonarSource</a> – GNU LGPL 3 – <a href=\"https://jira.sonarsource.com/browse/ANTTASK\">Issue Tracker</a> – <a href=\"https://github.com/SonarSource/sonar-scanner-ant\">Source</a> </p><p><a href=\"https://binaries.sonarsource.com/Distribution/sonarqube-ant-task/sonarqube-ant-task-2.7.0.1612.jar\">Download</a></p></div></div>\n<p>The SonarScanner for Ant provides a <code>task</code> to allow integration of SonarQube analysis into an Apache Ant build script.</p>\n<p>The SonarScanner for Ant is an Ant Task that is wrapper of <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner/\">SonarScanner</a>, which works by invoking SonarScanner and passing to it all <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> named following a <code>sonar.*</code> convention. This has the downside of not being very Ant-y, but the upside of providing instant availability of any new analysis parameter introduced by a new version of a plugin or of SonarQube itself. Therefore, successful use of the SonarScanner for Ant requires strict adherence to the property names shown below.</p>\n<h2>Use</h2>\n<p>Define a new sonar Ant target in your Ant build script:</p>\n<pre><code>&#x3C;!-- build.xml -->\n&#x3C;project name=\"My Project\" default=\"all\" basedir=\".\" xmlns:sonar=\"antlib:org.sonar.ant\">\n...\n  \n&#x3C;!-- Define the SonarQube global properties (the most usual way is to pass these properties via the command line) -->\n&#x3C;property name=\"sonar.host.url\" value=\"http://localhost:9000\" />\n \n...\n  \n&#x3C;!-- Define the SonarQube project properties -->\n&#x3C;property name=\"sonar.projectKey\" value=\"org.sonarqube:sonarqube-scanner-ant\" />\n&#x3C;property name=\"sonar.projectName\" value=\"Example of SonarScanner for Ant Usage\" />\n&#x3C;property name=\"sonar.projectVersion\" value=\"1.0\" />\n&#x3C;property name=\"sonar.sources\" value=\"src\" />\n&#x3C;property name=\"sonar.java.binaries\" value=\"build\" />\n&#x3C;property name=\"sonar.java.libraries\" value=\"lib/*.jar\" />\n...\n \n&#x3C;!-- Define SonarScanner for Ant Target -->\n&#x3C;target name=\"sonar\">\n    &#x3C;taskdef uri=\"antlib:org.sonar.ant\" resource=\"org/sonar/ant/antlib.xml\">\n        &#x3C;!-- Update the following line, or put the \"sonarqube-ant-task-*.jar\" file in your \"$HOME/.ant/lib\" folder -->\n        &#x3C;classpath path=\"path/to/sonar/ant/task/lib/sonarqube-ant-task-*.jar\" />\n    &#x3C;/taskdef>\n \n    &#x3C;!-- Execute SonarScanner for Ant Analysis -->\n    &#x3C;sonar:sonar />\n&#x3C;/target>\n</code></pre>\n<p>Run the following command from the project base directory to launch the analysis:</p>\n<pre><code>ant sonar\n</code></pre>\n<h2>Sample Project</h2>\n<p>To help you get started, a simple project sample is available here: <a href=\"https://github.com/SonarSource/sonar-scanning-examples/tree/master/sonarqube-scanner-ant\">https://github.com/SonarSource/sonar-scanning-examples/tree/master/sonarqube-scanner-ant</a></p>\n<h2>Troubleshooting</h2>\n<p><strong>Enable Debug Logs</strong><br>\nTo enable debug logs, use the regular Ant verbose option: <code>-v</code></p>\n<pre><code>ant sonar -v\n</code></pre>","fields":{"slug":"/analysis/scan/sonarscanner-for-ant/"}}},{"node":{"html":"<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>By <a href=\"https://www.sonarsource.com/\">SonarSource</a> - GNU LGPL 3 - <a href=\"https://jira.sonarsource.com/browse/VSTS\">Issue Tracker</a> - <a href=\"https://github.com/SonarSource/sonar-scanner-vsts\">Source</a><br>\nClick <a href=\"https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube\">here</a> for the latest version.</p></div></div>\n<p>The <a href=\"https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube\">SonarQube</a>  extension for Azure DevOps Server makes it easy to integrate analysis into your build pipeline. The extension allows the analysis of all languages supported by SonarQube.</p>\n<h2>Compatibility</h2>\n<p>Version 4.x is compatible with:</p>\n<ul>\n<li>TFS 2017 Update 2+</li>\n<li>TFS 2018</li>\n<li>Azure DevOps Server 2019</li>\n</ul>\n<p>The extension embeds its own version of the <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-msbuild/\">SonarScanner for MSBuild</a>.</p>\n<h2>Installation</h2>\n<ol>\n<li>Install the extension <a href=\"https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube\">from the marketplace</a>. </li>\n</ol>\n<p>If you are using <a href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops\">Microsoft-hosted build agents</a> then there is nothing else to install. The extension will work with all of the hosted agents (Windows, Linux, and MacOS).</p>\n<ol start=\"2\">\n<li>If you are self-hosting the build agents make sure at least the minimal version of Java supported by SonarQube is installed.\nIn addition, make sure the appropriate build tools are installed on the agent for the type of project e.g. .NET Framework v4.6+/NET Core 2.0+ if building using MSBuild, Maven for Java projects etc.</li>\n</ol>\n<h2>Configure</h2>\n<p>The first thing to do is to declare your SonarQube server as a service endpoint in your Azure DevOps project settings. </p>\n<ol>\n<li>\n<p>Open the Connections page in your Azure DevOps project: <strong>Project Settings > Pipelines > Service Connections</strong>.</p>\n</li>\n<li>\n<p>Click on <strong>New service connection</strong> and choose <strong>SonarQube</strong>.</p>\n</li>\n<li>\n<p>Specify a <strong>Connection name</strong>, the <strong>Server URL</strong> of your SonarQube Server (including the port if required) and the <a href=\"/SonarQubeChineseDoc8.1/user-guide/user-token/\">Authentication Token</a> to use.</p>\n</li>\n</ol>\n<p>Each extension provides three tasks you will use in your build definitions to analyze your projects:</p>\n<ul>\n<li>\n<p><strong>Prepare Analysis Configuration</strong> task, to configure all the required settings before executing the build. </p>\n<ul>\n<li>This task is mandatory. </li>\n<li>In case of .NET solutions or Java projects, it helps to integrate seamlessly with MSBuild, Maven and Gradle tasks.</li>\n</ul>\n</li>\n<li>\n<p><strong>Run Code Analysis</strong> task, to actually execute the analysis of the source code. </p>\n<ul>\n<li>This task is not required for Maven or Gradle projects, because scanner will be run as part of the Maven/Gradle build.</li>\n</ul>\n</li>\n<li>\n<p><strong>Publish Quality Gate Result</strong> task, to display the Quality Gate status in the build summary and give you a sense of whether the application is ready for production \"quality-wise\". </p>\n<ul>\n<li>This tasks is optional. </li>\n<li>It can significantly increase the overall build time because it will poll SonarQube until the analysis is complete. Omitting this task will not affect the analysis results on SonarQube - it simply means the Azure DevOps Build Summary page will not show the status of the analysis or a link to the project dashboard on SonarQube.</li>\n</ul>\n</li>\n</ul>\n<p>When creating a build definition you can filter the list of available tasks by typing \"Sonar\" to display only the relevant tasks.</p>\n<h2>Analyzing a .NET solution</h2>\n<ol>\n<li>\n<p>In your build definition, add:</p>\n<ul>\n<li>At least <strong>Prepare Analysis Configuration</strong> task and <strong>Run Code Analysis</strong> task</li>\n<li>Optionally <strong>Publish Quality Gate Result</strong> task</li>\n</ul>\n</li>\n<li>\n<p>Reorder the tasks to respect the following order:</p>\n<ul>\n<li><strong>Prepare Analysis Configuration</strong> task before any <strong>MSBuild</strong> or <strong>Visual Studio Build</strong> tasks.</li>\n<li><strong>Run Code Analysis</strong> task after the <strong>Visual Studio Test task</strong>.</li>\n<li><strong>Publish Quality Gate Result</strong> task after the <strong>Run Code Analysis</strong> task</li>\n</ul>\n</li>\n<li>\n<p>Click on the <strong>Prepare Analysis Configuration</strong> build step to configure it:</p>\n<ul>\n<li>\n<p>You must specify the service connection (i.e. SonarQube) to use. You can:</p>\n<ul>\n<li>select an existing endpoint from the drop down list</li>\n<li>add a new endpoint</li>\n<li>manage existing endpoints</li>\n</ul>\n</li>\n<li>\n<p>Keep <strong>Integrate with MSBuild</strong> checked and specify at least the project key</p>\n<ul>\n<li><strong>Project Key</strong> - the unique project key in SonarQube</li>\n<li><strong>Project Name</strong> - the name of the project in SonarQube</li>\n<li><strong>Project Version</strong> - the version of the project in SonarQube</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Click the <strong>Visual Studio Test</strong> task and check the <strong>Code Coverage Enabled</strong> checkbox to process the code coverage and have it imported into SonarQube. (Optional but recommended)</li>\n</ol>\n<p>Once all this is done, you can trigger a build.</p>\n<h2>Analyzing a Java project with Maven or Gradle</h2>\n<ol>\n<li>\n<p>In your build definition, add:</p>\n<ul>\n<li>At least <strong>Prepare Analysis Configuration</strong> task</li>\n<li>Optionally <strong>Publish Quality Gate Result</strong> task</li>\n</ul>\n</li>\n<li>\n<p>Reorder the tasks to respect the following order:</p>\n<ul>\n<li><strong>Prepare Analysis Configuration</strong> task before the <strong>Maven</strong> or <strong>Gradle</strong> task.</li>\n<li><strong>Publish Quality Gate Result</strong> task after the <strong>Maven</strong> or <strong>Gradle</strong> task.</li>\n</ul>\n</li>\n<li>\n<p>Click on the <strong>Prepare Analysis Configuration</strong> task to configure it:</p>\n<ul>\n<li>Select the <strong>SonarQube Server</strong></li>\n<li>Select <strong>Integrate with Maven or Gradle</strong></li>\n</ul>\n</li>\n<li>On the Maven or Gradle task, in <strong>Code Analysis</strong>, check <strong>Run SonarQube or SonarCloud Analysis</strong></li>\n</ol>\n<p>Once all this is done, you can trigger a build.</p>\n<h2>Analyzing a Visual C++ project</h2>\n<ol>\n<li>\n<p>Make <strong>SonarQube Build Wrapper</strong> available on the build agent</p>\n<ul>\n<li>\n<p>Download and unzip <strong>SonarQube Build Wrapper</strong> on the build agent (see <em>Prerequisites</em> section of <em>C/C++/Objective-C</em> page). For the Microsoft-hosted build agent you will need to do it every time (as part of build definition), e.g. you can add <strong>PowerShell script</strong> task doing that. For the self-hosted build agent you can do the same either every build or only once (as part of manual setup of build agent). Example of PowerShell commands:</p>\n<pre><code>Invoke-WebRequest -Uri '&#x3C;sonarqube or sonarcloud url>/static/cpp/build-wrapper-win-x86.zip' -OutFile 'build-wrapper.zip'\nExpand-Archive -Path 'build-wrapper.zip' -DestinationPath '.'\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>In your build definition, add:</p>\n<ul>\n<li>At least <strong>Prepare Analysis Configuration</strong> task, <strong>Run Code Analysis</strong> task and the <strong>Command Line</strong> task</li>\n<li>Optionally <strong>Publish Quality Gate Result</strong> task</li>\n</ul>\n</li>\n<li>\n<p>Reorder the tasks to respect the following order:</p>\n<ul>\n<li><strong>Prepare Analysis Configuration</strong> task before <strong>Command Line</strong> task.</li>\n<li><strong>Run Code Analysis</strong> task after the <strong>Command Line</strong> task.</li>\n<li><strong>Publish Quality Gate Result</strong> task after the <strong>Run Code Analysis</strong> task</li>\n</ul>\n</li>\n<li>\n<p>On the <strong>Command Line</strong> task</p>\n<ul>\n<li>\n<p>Run <strong>SonarQube Build Wrapper</strong> executable. Pass in as the arguments (1) the output directory to which the Build Wrapper should write its results and (2) the command that runs the compilation of your project, e.g.</p>\n<pre><code>path/to/build-wrapper-win-x86-64.exe --out-dir &#x3C;output directory> MSBuild.exe /t:Rebuild\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Click on the <strong>Prepare Analysis Configuration</strong> task to configure it:</p>\n<ul>\n<li>Select the <strong>SonarQube Server</strong></li>\n<li>In <em>Additional Properties</em> in the <em>Advanced</em> section, add the property <code>sonar.cfamily.build-wrapper-output</code> with the value of the directory you specified: <code>sonar.cfamily.build-wrapper-output=&#x3C;output directory></code></li>\n</ul>\n</li>\n</ol>\n<p>Once all this is done, you can trigger a build.</p>\n<h2>Analysing other project types</h2>\n<p>If you are not developing a .NET application or a Java project, here is the standard way to trigger an analysis:</p>\n<ol>\n<li>\n<p>In your build definition, add:</p>\n<ul>\n<li>At least <strong>Prepare Analysis Configuration</strong> task and <strong>Run Code Analysis</strong> task</li>\n<li>Optionaly <strong>Publish Quality Gate Result</strong> task</li>\n</ul>\n</li>\n<li>\n<p>Reorder the tasks to respect the following order:</p>\n<ol>\n<li><strong>Prepare Analysis Configuration</strong></li>\n<li><strong>Run Code Analysis</strong></li>\n<li><strong>Publish Quality Gate Result</strong></li>\n</ol>\n</li>\n<li>\n<p>Click on the <strong>Prepare Analysis Configuration</strong> task to configure it:</p>\n<ul>\n<li>Select the <strong>SonarQube Server</strong></li>\n<li>Select <strong>Use standalone scanner</strong></li>\n<li>\n<p>Then:</p>\n<ul>\n<li>Either the SonarQube properties are stored in the (standard) <code>sonar-project.properties</code> file in your SCM, and you just have to make sure that \"Settings File\" correctly points at it. This is the recommended way.</li>\n<li>Or you don't have such a file in your SCM, and you can click on <strong>Manually provide configuration</strong> to specify it within your build definition. This is not recommended because it's less portable.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>Once all this is done, you can trigger a build.</p>\n<h2>Branch and Pull Request analysis</h2>\n<p><em>Branch and Pull Request analysis are available as part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://www.sonarsource.com/plans-and-pricing/\">above</a></em></p>\n<h3>Branches</h3>\n<p>When a build is run on a branch of your project, the extension automatically configures the analysis to be pushed to the relevant project branch in SonarQube. The same build definition can apply to all your branches, whatever type of Git repository you are analyzing,</p>\n<p>If you are working with branches on TFVC projects, you still need to manually specify the branch to be used on SonarQube: in the <strong>Prepare Analysis Configuration</strong> task, in the <strong>Additional Properties</strong>, you need to set <code>sonar.branch.name</code>.</p>\n<h3>PRs</h3>\n<p>SonarQube can analyze the code of the new features and annotate your pull requests in TFS with comments to highlight issues that were found.</p>\n<p>Pull request analysis is supported for any type of Git repositories. To activate it:</p>\n<ol>\n<li>In the <strong>Branch policies</strong> page of your main development branches (e.g. \"master\"), add a build policy that runs your build definition</li>\n<li>Create an Azure DevOps token with \"Code (read and write)\" scope</li>\n<li>In SonarQube, in the <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=pull_request\">Administration > General Settings > Pull Requests</a></strong> page, set this token in the <strong>VSTS/TFS</strong> section</li>\n</ol>\n<p>Next time some code is pushed in the branch of a pull request, the build definition will execute a scan on the code and publish the results in SonarQube which will decorate the pull request in TFS.</p>\n<h2>FAQ</h2>\n<p><strong>Is it possible to trigger analyses on Linux or macOS agents?</strong><br>\nThis becomes possible from version 4.0 of the SonarQube task, in which the extension was fully rewritten in Node.js. The mono dependency was dropped in version 4.3.</p>\n<p>This is not possible with previous versions of the extension.</p>\n<p><strong>How do I break the build based on the quality gate status?</strong><br>\nThis is not possible with the new version of the extension if you are using the most up-to-date versions of the tasks. We believe that breaking a CI build is not the right approach. Instead, we are providing pull request decoration (to make sure that issues aren't introduced at merge time) and we'll soon add a way to check the quality gate as part of a Release process.</p>","fields":{"slug":"/analysis/scan/sonarscanner-for-azure-devops/"}}},{"node":{"html":"<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>By <a href=\"https://www.sonarsource.com/\">SonarSource</a> – GNU LGPL 3 – <a href=\"https://jira.sonarsource.com/browse/SONARGRADL\">Issue Tracker</a> – <a href=\"https://github.com/SonarSource/sonar-scanner-gradle\">Source</a><br>\nClick <a href=\"https://plugins.gradle.org/plugin/org.sonarqube\">here</a> for the latest version.</p></div></div>\n<p>The SonarScanner for Gradle provides an easy way to start SonarQube analysis of a Gradle project.</p>\n<p>The ability to execute the SonarQube analysis via a regular Gradle task makes it available anywhere Gradle is available (developer build, CI server, etc.), without the need to manually download, setup, and maintain a SonarQube Runner installation. The Gradle build already has much of the information needed for SonarQube to successfully analyze a project. By preconfiguring the analysis based on that information, the need for manual configuration is reduced significantly. </p>\n<h2>Prerequisites</h2>\n<ul>\n<li>Gradle versions 2.14+</li>\n<li>At least the minimal version of Java supported by your SonarQube server is in use </li>\n</ul>\n<p>Bytecode created by javac compilation is required for Java analysis, including Android projects.</p>\n<h2>Configure the Scanner</h2>\n<p>Installation is automatic, but certain global properties should still be configured. A good place to configure global properties is <code>~/.gradle/gradle.properties</code>. Be aware that the scanner uses system properties so all properties should be prefixed by <code>systemProp</code>.</p>\n<pre><code># gradle.properties\nsystemProp.sonar.host.url=http://localhost:9000\n \n#----- Token generated from an account with 'publish analysis' permission\nsystemProp.sonar.login=&#x3C;token>\n</code></pre>\n<h2>Analyzing</h2>\n<p>First, activate the scanner in your build. For Gradle 2.1+, in <code>build.gradle</code>:</p>\n<pre><code>plugins {\n  id \"org.sonarqube\" version \"2.7\"\n}\n</code></pre>\n<p>More details on <a href=\"https://plugins.gradle.org/plugin/org.sonarqube\">https://plugins.gradle.org/plugin/org.sonarqube</a></p>\n<p>Assuming a local SonarQube server with out-of-the-box settings is up and running, no further configuration is required.</p>\n<p>Execute <code>gradle sonarqube</code> and wait until the build has completed, then open the web page indicated at the bottom of the console output. You should now be able to browse the analysis results.</p>\n<h2>Analyzing Multi-Project Builds</h2>\n<p>To analyze a project hierarchy, apply the SonarQube plugin to the root project of the hierarchy. Typically (but not necessarily) this will be the root project of the Gradle build. Information pertaining to the analysis as a whole has to be configured in the sonarqube block of this project. Any properties set on the command line also apply to this project.</p>\n<pre><code>// build.gradle\nsonarqube {\n    properties {\n        property \"sonar.sourceEncoding\", \"UTF-8\"\n    }\n}\n</code></pre>\n<p>Configuration shared between subprojects can be configured in a subprojects block.</p>\n<pre><code>// build.gradle\nsubprojects {\n    sonarqube {\n        properties {\n            property \"sonar.sources\", \"src\"\n        }\n    }\n}\n</code></pre>\n<p>Project-specific information is configured in the <code>sonarqube</code> block of the corresponding project.</p>\n<pre><code>// build.gradle\nproject(\":project1\") {\n    sonarqube {\n        properties {\n            property \"sonar.branch\", \"Foo\"\n        }\n    }}\n</code></pre>\n<p>To skip SonarQube analysis for a particular subproject, set sonarqube.skipProject to true.</p>\n<pre><code>// build.gradle\nproject(\":project2\") {\n    sonarqube {\n        skipProject = true\n    }\n}\n</code></pre>\n<h2>Task dependencies</h2>\n<p>All tasks that produce output that should be included in the SonarQube analysis need to be executed before the <code>sonarqube</code> task runs. Typically, these are compile tasks, test tasks, and code coverage tasks. To meet these needs, the plugins adds a task dependency from <code>sonarqube</code> on <code>test</code> if the Java plugin is applied. Further task dependencies can be added as needed. For example:</p>\n<pre><code>// build.gradle\nproject.tasks[\"sonarqube\"].dependsOn \"anotherTask\"\n</code></pre>\n<h2>Sample project</h2>\n<p>A simple working example is available at this URL so you can check everything is correctly configured in your env:<br>\n<a href=\"https://github.com/SonarSource/sonar-scanning-examples/tree/master/sonarqube-scanner-gradle\">https://github.com/SonarSource/sonar-scanning-examples/tree/master/sonarqube-scanner-gradle</a></p>\n<h2>Analysis property defaults</h2>\n<p>The SonarScanner for Gradle uses information contained in Gradle's object model to provide smart defaults for most of the standard <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">analysis parameters</a>, as listed below.</p>\n<p>Gradle defaults for standard SonarQube properties: </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Gradle default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.projectKey</code></td>\n<td><code>[${project.group}:]${project.name}</code> for root module; <code>&#x3C;root module key>:&#x3C;module path></code> for submodules</td>\n</tr>\n<tr>\n<td><code>sonar.projectName</code></td>\n<td><code>${project.name}</code></td>\n</tr>\n<tr>\n<td><code>sonar.projectDescription</code></td>\n<td><code>${project.description}</code></td>\n</tr>\n<tr>\n<td><code>sonar.projectVersion</code></td>\n<td><code>${project.version}</code></td>\n</tr>\n<tr>\n<td><code>sonar.projectBaseDir</code></td>\n<td><code>${project.projectDir}</code></td>\n</tr>\n<tr>\n<td><code>sonar.working.directory</code></td>\n<td><code>${project.buildDir}/sonar</code></td>\n</tr>\n</tbody>\n</table>\n<p>Notice that additional defaults are provided for projects that have the java-base or java plugin applied:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Gradle default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.sourceEncoding</code></td>\n<td><code>${project.compileJava.options.encoding}</code></td>\n</tr>\n<tr>\n<td><code>sonar.java.source</code></td>\n<td><code>${project.sourceCompatibility}</code></td>\n</tr>\n<tr>\n<td><code>sonar.java.target</code></td>\n<td><code>${project.targetCompatibility}</code></td>\n</tr>\n<tr>\n<td><code>sonar.sources</code></td>\n<td><code>${sourceSets.main.allSource.srcDirs}</code> (filtered to only include existing directories)</td>\n</tr>\n<tr>\n<td><code>sonar.tests</code></td>\n<td><code>${sourceSets.test.allSource.srcDirs}</code> (filtered to only include existing directories)</td>\n</tr>\n<tr>\n<td><code>sonar.java.binaries</code></td>\n<td><code>${sourceSets.main.output.classesDir}</code></td>\n</tr>\n<tr>\n<td><code>sonar.java.libraries</code></td>\n<td><code>${sourceSets.main.compileClasspath}</code> (filtering to only include files; rt.jar and jfxrt.jar added if necessary)</td>\n</tr>\n<tr>\n<td><code>sonar.java.test.binaries</code></td>\n<td><code>${sourceSets.test.output.classesDir}</code></td>\n</tr>\n<tr>\n<td><code>sonar.java.test.libraries</code></td>\n<td><code>${sourceSets.test.compileClasspath}</code> (filtering to only include files; rt.jar and jfxrt.jar added if necessary)</td>\n</tr>\n<tr>\n<td><code>sonar.junit.reportPaths</code></td>\n<td><code>${test.testResultsDir}</code> (if the directory exists)</td>\n</tr>\n</tbody>\n</table>\n<p>Groovy projects get all the Java defaults, plus:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Gradle default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.groovy.binaries</code></td>\n<td><code>${sourceSets.main.output.classesDir}</code></td>\n</tr>\n</tbody>\n</table>\n<p>Additional defaults when JaCoCo plugin is applied</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Gradle default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.jacoco.reportPaths</code></td>\n<td><code>${jacoco.destinationFile}</code></td>\n</tr>\n<tr>\n<td><code>sonar.groovy.jacoco.reportPath</code></td>\n<td><code>${jacoco.destinationFile}</code></td>\n</tr>\n</tbody>\n</table>\n<p>Additional defaults for Android projects (<code>com.android.application</code>, <code>com.android.library</code>, or <code>com.android.test</code>)\nBy default the first variant of type \"debug\" will be used to configure the analysis. You can override the name of the variant to be used using the parameter 'androidVariant':</p>\n<pre><code>build.gradle\nsonarqube {\n    androidVariant 'fullDebug'\n}\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Gradle default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.sources</code> (for non test variants)</td>\n<td><code>${variant.sourcesets.map}</code> (ManifestFile/CDirectories/AidlDirectories/AssetsDirectories/CppDirectories/JavaDirectories/RenderscriptDirectories/ResDirectories/ResourcesDirectories)</td>\n</tr>\n<tr>\n<td><code>sonar.tests</code> (for test variants)</td>\n<td><code>${variant.sourcesets.map}</code> (ManifestFile/CDirectories/AidlDirectories/AssetsDirectories/CppDirectories/JavaDirectories/RenderscriptDirectories/ResDirectories/ResourcesDirectories)</td>\n</tr>\n<tr>\n<td><code>sonar.java[.test].binaries</code></td>\n<td><code>${variant.destinationDir}</code></td>\n</tr>\n<tr>\n<td><code>sonar.java[.test].libraries</code></td>\n<td><code>${variant.javaCompile.classpath} + ${bootclasspath}</code></td>\n</tr>\n<tr>\n<td><code>sonar.java.source</code></td>\n<td><code>${variant.javaCompile.sourceCompatibility}</code></td>\n</tr>\n<tr>\n<td><code>sonar.java.target</code></td>\n<td><code>${variant.javaCompile.targetCompatibility}</code></td>\n</tr>\n</tbody>\n</table>\n<h2>Passing manual properties / overriding defaults</h2>\n<p>The SonarScanner for Gradle adds a SonarQubeExtension extension to project and its subprojects, which allows you to configure/override the analysis properties.</p>\n<pre><code>// in build.gradle\nsonarqube {\n    properties {\n        property \"sonar.exclusions\", \"**/*Generated.java\"\n    }\n}\n</code></pre>\n<p>SonarQube properties can also be set from the command line, or by setting a system property named exactly like the SonarQube property in question. This can be useful when dealing with sensitive information (e.g. credentials), environment information, or for ad-hoc configuration.</p>\n<pre><code>gradle sonarqube -Dsonar.host.url=http://sonar.mycompany.com -Dsonar.verbose=true\n</code></pre>\n<p>While certainly useful at times, we recommend keeping the bulk of the configuration in a (versioned) build script, readily available to everyone.\nA SonarQube property value set via a system property overrides any value set in a build script (for the same property). When analyzing a project hierarchy, values set via system properties apply to the root project of the analyzed hierarchy. Each system property starting with <code>sonar.</code> will be taken into account.</p>\n<h3>Analyzing Custom Source Sets</h3>\n<p>By default, the SonarScanner for Gradle passes on the project's main source set as production sources, and the project's test source set as test sources. This works regardless of the project's source directory layout. Additional source sets can be added as needed.</p>\n<pre><code>// build.gradle\nsonarqube {\n    properties {\n        properties[\"sonar.sources\"] += sourceSets.custom.allSource.srcDirs\n        properties[\"sonar.tests\"] += sourceSets.integTest.allSource.srcDirs\n    }\n}\n</code></pre>\n<h2>Advanced topics</h2>\n<h3>More on configuring SonarQube properties</h3>\n<p>Let's take a closer look at the <code>sonarqube.properties</code> <code>{}</code> block. As we have already seen in the examples, the <code>property()</code> method allows you to set new properties or override existing ones. Furthermore, all properties that have been configured up to this point, including all properties preconfigured by Gradle, are available via the properties accessor.</p>\n<p>Entries in the properties map can be read and written with the usual Groovy syntax. To facilitate their manipulation, values still have their “idiomatic” type (File, List, etc.). After the sonarProperties block has been evaluated, values are converted to Strings as follows: Collection values are (recursively) converted to comma-separated Strings, and all other values are converted by calling their <code>toString()</code> methods.</p>\n<p>Because the <code>sonarProperties</code> block is evaluated lazily, properties of Gradle's object model can be safely referenced from within the block, without having to fear that they have not yet been set.</p>","fields":{"slug":"/analysis/scan/sonarscanner-for-gradle/"}}},{"node":{"html":"<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>By <a href=\"https://www.sonarsource.com/\">SonarSource</a> – GNU LGPL 3 – <a href=\"https://jira.sonarsource.com/browse/SONARJNKNS\">Issue Tracker</a> – <a href=\"https://github.com/SonarSource/sonar-scanner-jenkins\">Source</a><br>\nClick <a href=\"https://plugins.jenkins.io/sonar\">here</a> for the latest version.</p></div></div>\n<p>This plugin lets you centralize the configuration of SonarQube server connection details in Jenkins global configuration.</p>\n<p>Then you can trigger SonarQube analysis from Jenkins using standard Jenkins Build Steps or <a href=\"https://jenkins.io/solutions/pipeline/\">Jenkins Pipeline DSL</a> to trigger analysis with:</p>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner/\">SonarScanner</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-maven/\">SonarScanner for Maven</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-gradle/\">SonarScanner for Gradle</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-msbuild/\">SonarScanner for MSBuild</a></li>\n</ul>\n<p>Once the job is complete, the plugin will detect that a SonarQube analysis was made during the build and display a badge and a widget on the job page with a link to the SonarQube dashboard as well as quality gate status.</p>\n<h2>Installation</h2>\n<ol>\n<li><a href=\"https://plugins.jenkins.io/sonar\">Install the SonarScanner for Jenkins via the Jenkins Update Center</a>.</li>\n<li>\n<p>Configure your SonarQube server(s):</p>\n<ol>\n<li>Log into Jenkins as an administrator and go to <strong>Manage Jenkins > Configure System</strong>.</li>\n<li>Scroll down to the SonarQube configuration section, click <strong>Add SonarQube</strong>, and add the values you're prompted for.</li>\n<li>The server authentication token should be created as a 'Secret Text' credential.</li>\n</ol>\n</li>\n</ol>\n<h2>Analyzing a .NET solution</h2>\n<p><strong>Global Configuration</strong><br>\nThis step is mandatory if you want to trigger any of your analyses with the SonarScanner for MSBuild. You can define as many scanner instances as you wish. Then for each Jenkins job, you will be able to choose with which launcher to use to run the SonarQube analysis.</p>\n<ol>\n<li>Log into Jenkins as an administrator and go to <strong>Manage Jenkins > Global Tool Configuration</strong></li>\n<li>Click on <strong>Add SonarScanner for MSBuild</strong></li>\n<li>Add an installation of the latest available version. Check <strong>Install automatically</strong> to have the SonarScanner for MSBuild automatically provisioned on your Jenkins executors</li>\n</ol>\n<p>If you do not see any available version under Install from GitHub, first go to Manage Jenkins > Manage Plugins > Advanced and click on Check now</p>\n<p><strong>Job Configuration</strong>  </p>\n<ol>\n<li>Configure the project, and go to the <strong>Build</strong> section.</li>\n<li>Add the SonarQube for MSBuild - Begin Analysis to your build</li>\n<li>Configure the SonarQube Project Key, Name and Version in the SonarScanner for MSBuild - Begin Analysis build step</li>\n<li>Add the MSBuild build step or the Execute Windows batch command to execute the build with MSBuild 14 (see compatibility) to your build.</li>\n<li>Add the SonarQube for MSBuild - End Analysis build steps to your build</li>\n</ol>\n<h2>Analyzing a Java project with Maven or Gradle</h2>\n<p><strong>Global Configuration</strong>  </p>\n<ol>\n<li>Log into Jenkins as an administrator and go to Manage Jenkins > Configure System</li>\n<li>Scroll to the SonarQube servers section and check Enable injection of SonarQube server configuration as build environment variables</li>\n</ol>\n<p><strong>Job Configuration</strong>  </p>\n<ol>\n<li><strong>Configure</strong> the project, and go to the <strong>Build Environment</strong> section.</li>\n<li>Enable <strong>Prepare SonarScanner environment</strong> to allow the injection of SonarQube server values into this particular job. If multiple SonarQube instances are configured, you will be able to choose which one to use.\nOnce the environment variables are available, use them in a standard Maven build step (Invoke top-level Maven targets) by setting the Goals to include, or a standard Gradle build step (Invoke Gradle script) by setting the Tasks to execute.</li>\n</ol>\n<p>Maven goal:</p>\n<pre><code>$SONAR_MAVEN_GOAL\n</code></pre>\n<p>Gradle task:</p>\n<pre><code>sonarqube\n</code></pre>\n<p>In both cases, launching your analysis may require authentication. In that case, make sure that the Global Configuration defines a valid SonarQube token.</p>\n<h2>Analyzing other project types</h2>\n<p><strong>Global Configuration</strong><br>\nThis step is mandatory if you want to trigger any of your SonarQube analyses with the SonarScanner. You can define as many scanner instances as you wish. Then for each Jenkins job, you will be able to choose with which launcher to use to run the SonarQube analysis.</p>\n<ol>\n<li>Log into Jenkins as an administrator and go to <strong>Manage Jenkins > Global Tool Configuration</strong></li>\n<li>Scroll down to the SonarScanner configuration section and click on Add SonarScanner. It is based on the typical Jenkins tool auto-installation. You can either choose to point to an already installed version of SonarScanner (uncheck 'Install automatically') or tell Jenkins to grab the installer from a remote location (check 'Install automatically')</li>\n</ol>\n<p>If you don't see a drop down list with all available SonarScanner versions but instead see an empty text field then this is because Jenkins still hasn't downloaded the required update center file (default period is 1 day). You may force this refresh by clicking 'Check Now' button in Manage Plugins > Advanced tab.</p>\n<p><strong>Job Configuration</strong>  </p>\n<ol>\n<li><strong>Configure</strong> the project, and go to the <strong>Build</strong> section. </li>\n<li>Add the SonarScanner build step to your build.</li>\n<li>Configure the SonarQube analysis properties. You can either point to an existing sonar-project.properties file or set the analysis properties directly in the <strong>Analysis properties</strong> field</li>\n</ol>\n<h2>Using a Jenkins pipeline</h2>\n<p>We provide a <code>withSonarQubeEnv</code> block that allows you to select the SonarQube server you want to interact with. Connection details you have configured in Jenkins global configuration will be automatically passed to the scanner.</p>\n<p>If needed you can override the <code>credentialId</code> if you don't want to use the one defined in global configuration (for example if you define credentials at folder level).</p>\n<p>Here are a some examples for every scanner, assuming you run on Unix slaves and you have configured a server named \"My SonarQube Server\" as well as required tools. If you run on Windows slaves, just replace <code>sh</code> with <code>bat</code>.</p>\n<p>SonarScanner:</p>\n<pre><code>node {\n  stage('SCM') {\n    git 'https://github.com/foo/bar.git'\n  }\n  stage('SonarQube analysis') {\n    def scannerHome = tool 'SonarScanner 4.0';\n    withSonarQubeEnv('My SonarQube Server') { // If you have configured more than one global server connection, you can specify its name\n      sh \"${scannerHome}/bin/sonar-scanner\"\n    }\n  }\n}\n</code></pre>\n<p>SonarScanner for Gradle:</p>\n<pre><code>node {\n  stage('SCM') {\n    git 'https://github.com/foo/bar.git'\n  }\n  stage('SonarQube analysis') {\n    withSonarQubeEnv() { // Will pick the global server connection you have configured\n      sh './gradlew sonarqube'\n    }\n  }\n}\n</code></pre>\n<p>SonarScanner for Maven:</p>\n<pre><code>node {\n  stage('SCM') {\n    git 'https://github.com/foo/bar.git'\n  }\n  stage('SonarQube analysis') {\n    withSonarQubeEnv(credentialsId: 'f225455e-ea59-40fa-8af7-08176e86507a', installationName: 'My SonarQube Server') { // You can override the credential to be used\n      sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar'\n    }\n  }\n}\n</code></pre>\n<p>SonarScanner for MSBuild:</p>\n<pre><code>node {\n  stage('SCM') {\n    git 'https://github.com/foo/bar.git'\n  }\n  stage('Build + SonarQube analysis') {\n    def sqScannerMsBuildHome = tool 'Scanner for MSBuild 4.6'\n    withSonarQubeEnv('My SonarQube Server') {\n      bat \"${sqScannerMsBuildHome}\\\\SonarQube.Scanner.MSBuild.exe begin /k:myKey\"\n      bat 'MSBuild.exe /t:Rebuild'\n      bat \"${sqScannerMsBuildHome}\\\\SonarQube.Scanner.MSBuild.exe end\"\n    }\n  }\n}\n</code></pre>\n<h2>Pause pipeline until quality gate is computed</h2>\n<p>The <code>waitForQualityGate</code> step will pause the pipeline until SonarQube analysis is completed and returns quality gate status.</p>\n<h3>Pre-requisites:</h3>\n<ul>\n<li>Configure a webhook in your SonarQube server pointing to <code>&#x3C;your Jenkins instance>/sonarqube-webhook/</code> </li>\n<li>Use <code>withSonarQubeEnv</code> step in your pipeline (so that SonarQube taskId is correctly attached to the pipeline context).</li>\n</ul>\n<p>Scripted pipeline example:</p>\n<pre><code>node {\n  stage('SCM') {\n    git 'https://github.com/foo/bar.git'\n  }\n  stage('SonarQube analysis') {\n    withSonarQubeEnv('My SonarQube Server') {\n      sh 'mvn clean package sonar:sonar'\n    } // submitted SonarQube taskId is automatically attached to the pipeline context\n  }\n}\n  \n// No need to occupy a node\nstage(\"Quality Gate\"){\n  timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout\n    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv\n    if (qg.status != 'OK') {\n      error \"Pipeline aborted due to quality gate failure: ${qg.status}\"\n    }\n  }\n}\n</code></pre>\n<p>Thanks to the webhook, the step is implemented in a very lightweight way: no need to occupy a node doing polling, and it doesn't prevent Jenkins to restart (step will be restored after restart). Note that to prevent race conditions, when the step starts (or is restarted) a direct call is made to the server to check if the task is already completed.</p>\n<p>Declarative pipeline example:</p>\n<pre><code>pipeline {\n    agent any\n    stages {\n        stage('SCM') {\n            steps {\n                git url: 'https://github.com/foo/bar.git'\n            }\n        }\n        stage('build &#x26;&#x26; SonarQube analysis') {\n            steps {\n                withSonarQubeEnv('My SonarQube Server') {\n                    // Optionally use a Maven environment you've configured already\n                    withMaven(maven:'Maven 3.5') {\n                        sh 'mvn clean package sonar:sonar'\n                    }\n                }\n            }\n        }\n        stage(\"Quality Gate\") {\n            steps {\n                timeout(time: 1, unit: 'HOURS') {\n                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails\n                    // true = set pipeline to UNSTABLE, false = don't\n                    waitForQualityGate abortPipeline: true\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<p>If you want to run multiple analysis in the same pipeline and use waitForQualityGate you have to do everything in order:</p>\n<pre><code>pipeline {\n    agent any\n    stages {\n        stage('SonarQube analysis 1') {\n            steps {\n                sh 'mvn clean package sonar:sonar'\n            }\n        }\n        stage(\"Quality Gate 1\") {\n            steps {\n                waitForQualityGate abortPipeline: true\n            }\n        }\n        stage('SonarQube analysis 2') {\n            steps {\n                sh 'gradle sonarqube'\n            }\n        }\n        stage(\"Quality Gate 2\") {\n            steps {\n                waitForQualityGate abortPipeline: true\n            }\n        }\n    }\n}\n</code></pre>\n<h3>Configuring a webhook secret</h3>\n<p>If you want to verify the webhook payload that is sent to Jenkins, you can add a secret to your webhook on SonarQube.</p>\n<p>To set the secret: </p>\n<ol>\n<li>In Jenkins, navigate to <strong>Manage Jenkins > Configure System > SonarQube Server > Advanced > Webhook Secret</strong> and click the <strong>Add</strong> button.</li>\n<li>Select <strong>Secret text</strong> and give the secret an ID.</li>\n<li>Select the secret from the dropdown menu.</li>\n</ol>\n<p>If you want to override the webhook secret on a project level, you can add the secret to Jenkins and then reference the secret ID when calling <code>waitForQualityGate</code>.</p>\n<pre><code>waitForQualityGate(webhookSecretId: 'yourSecretID')    \n</code></pre>\n<p>if your pipeline is declarative or</p>\n<pre><code>waitForQualityGate webhookSecretId: 'yourSecretID'\n</code></pre>\n<p>if your pipeline is scripted.</p>","fields":{"slug":"/analysis/scan/sonarscanner-for-jenkins/"}}},{"node":{"html":"<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p><strong>Download SonarScanner 4.2</strong> - Compatible with SonarQube 6.7+ (LTS)\nBy <a href=\"https://www.sonarsource.com/\">SonarSource</a> – GNU LGPL 3 – <a href=\"https://jira.sonarsource.com/browse/SQSCANNER\">Issue Tracker</a> – <a href=\"https://github.com/Sonarsource/sonar-scanner-cli\">Source</a>   </p><p><a href=\"https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip\">Linux 64-bit</a> |\n<a href=\"https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-windows.zip\">Windowx 64-bit</a> |\n<a href=\"https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-macosx.zip\">Mac OS X 64-bit</a> |\n<a href=\"https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873.zip\">Any*</a>\n*Requires a pre-installed JVM - with the same requirements as the SonarQube server.</p></div></div>\n<p>The SonarScanner is the scanner to use when there is no specific scanner for your build system.</p>\n<h2>Installation</h2>\n<ul>\n<li>\n<p>Expand the downloaded file into the directory of your choice. We'll refer to it as <code>$install_directory</code> in the next steps.</p>\n</li>\n<li>\n<p>Update the global settings to point to your SonarQube server by editing <code>$install_directory/conf/sonar-scanner.properties</code>:</p>\n<pre><code>#----- Default SonarQube server\n#sonar.host.url=http://localhost:9000\n</code></pre>\n</li>\n<li>\n<p>Add the <code>$install_directory/bin</code> directory to your path.</p>\n</li>\n<li>\n<p>Verify your installation by opening a new shell and executing the command <code>sonar-scanner -h</code> (<code>sonar-scanner.bat -h</code> on Windows). You should get output like this:</p>\n<pre><code>usage: sonar-scanner [options]\n\nOptions:\n -D,--define &#x3C;arg>     Define property\n -h,--help             Display help information\n -v,--version          Display version information\n -X,--debug            Produce execution debug output\n</code></pre>\n</li>\n</ul>\n<p>If you need more debug information you can add one of the following to your command line: <code>-X</code>, <code>--verbose</code>, or <code>-Dsonar.verbose=true</code>.</p>\n<h2>Use</h2>\n<p>Create a configuration file in the root directory of the project: <code>sonar-project.properties</code></p>\n<pre><code>sonar-project.properties\n# must be unique in a given SonarQube instance\nsonar.projectKey=my:project\n\n# --- optional properties ---\n\n# defaults to project key\n#sonar.projectName=My project\n# defaults to 'not provided'\n#sonar.projectVersion=1.0\n \n# Path is relative to the sonar-project.properties file. Defaults to .\n#sonar.sources=.\n \n# Encoding of the source code. Default is default system encoding\n#sonar.sourceEncoding=UTF-8\n</code></pre>\n<p>Run the following command from the project base directory to launch the analysis:<br>\n<code>sonar-scanner</code></p>\n<h2>Sample Projects</h2>\n<p>To help you get started, simple project samples are available for most languages on github. They can be <a href=\"https://github.com/SonarSource/sonar-scanning-examples\">browsed</a> or <a href=\"https://github.com/SonarSource/sonar-scanning-examples/archive/master.zip\">downloaded</a>. You'll find them filed under sonarqube-scanner/src.</p>\n<h2>Alternatives to sonar-project.properties</h2>\n<p>If a sonar-project.properties file cannot be created in the root directory of the project, there are several alternatives:</p>\n<ul>\n<li>\n<p>The properties can be specified directly through the command line. Ex:</p>\n<pre><code>sonar-scanner -Dsonar.projectKey=myproject -Dsonar.sources=src1\n</code></pre>\n</li>\n<li>\n<p>The property project.settings can be used to specify the path to the project configuration file (this option is incompatible with the <code>sonar.projectBaseDir</code> property). Ex:</p>\n<pre><code>sonar-scanner -Dproject.settings=../myproject.properties\n</code></pre>\n</li>\n<li>The root folder of the project to analyze can be set through the <code>sonar.projectBaseDir</code> property since SonarScanner 2.4. This folder must contain a <code>sonar-project.properties</code> file if <code>sonar.projectKey</code> is not specified on the command line.\nAdditional analysis parameters can be defined in this project configuration file or through command-line parameters. </li>\n</ul>\n<h2>Alternate Analysis Directory</h2>\n<p>If the files to be analyzed are not in the directory where the analysis starts from, use the <code>sonar.projectBaseDir</code> property to move analysis to a different directory. E.G. analysis begins from <code>jenkins/jobs/myjob/workspace</code> but the files to be analyzed are in <code>ftpdrop/cobol/project1</code>.</p>\n<pre><code>sonar-project.properties\nsonar.projectBaseDir=/home/ftpdrop/cobol/project1\nsonar.sources=src\nsonar.cobol.copy.directories=/copy\nFor more, see the listing of analysis parameters.\n</code></pre>\n<h2>Troubleshooting</h2>\n<p><strong>Java heap space error or java.lang.OutOfMemoryError</strong><br>\nIncrease the memory via the <code>SONAR_SCANNER_OPTS</code> environment variable:</p>\n<pre><code>export SONAR_SCANNER_OPTS=\"-Xmx512m\"\n</code></pre>\n<p>On Windows environments, avoid the double-quotes, since they get misinterpreted and combine the two parameters into a single one.</p>\n<pre><code>set SONAR_SCANNER_OPTS=-Xmx512m\n</code></pre>\n<p><strong>Unsupported major.minor version</strong><br>\nUpgrade the version of Java being used for analysis or use one of the native package (that embed its own Java runtime).</p>\n<p><strong>Property missing: `sonar.cs.analyzer.projectOutPaths'. No protobuf files will be loaded for this project.</strong><br>\nScanner CLI is not able to analyze .NET projects. Please, use Scanner for MSBuild. If you are running Scanner for MSBuild, ensure that you are not hitting a known limitation.</p>","fields":{"slug":"/analysis/scan/sonarscanner/"}}},{"node":{"html":"<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p><strong>Download SonarScanner for MSBuild 4.7.1.2311</strong> - Compatible with SonarQube 6.7+ (LTS)<br>\nBy <a href=\"https://www.sonarsource.com/\">SonarSource</a> – GNU LGPL 3 – <a href=\"https://github.com/SonarSource/sonar-scanner-msbuild/issues\">Issue Tracker</a> – <a href=\"https://github.com/SonarSource/sonar-scanner-msbuild\">Source</a></p><p><a href=\"https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/4.7.1.2311/sonar-scanner-msbuild-4.7.1.2311-net46.zip\">.NET Framework 4.6+</a> |\n<a href=\"https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/4.7.1.2311/sonar-scanner-msbuild-4.7.1.2311-netcoreapp2.0.zip\">.NET Core 2.0+</a> |\n<a href=\"https://www.nuget.org/packages/dotnet-sonarscanner\">.NET Core Global Tool</a></p></div></div>\n<p>The SonarScanner for MSBuild is the recommended way to launch an analysis for projects/solutions using MSBuild or dotnet command as a build tool. It is the result of a <a href=\"http://www.sonarqube.org/announcing-sonarqube-integration-with-msbuild-and-team-build/\">collaboration between SonarSource and Microsoft</a>. </p>\n<p>SonarScanner for MSBuild is distributed as a standalone command line executable, as a extension for <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-azure-devops/\">Azure DevOps Server</a>, and as a plugin for <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-jenkins/\">Jenkins</a>.</p>\n<p>It supports .Net Core multi-platform projects and it can be used on non-Windows platforms.</p>\n<h2>Prerequisites</h2>\n<ul>\n<li>At least the minimal version of Java supported by your SonarQube server</li>\n<li>\n<p>The SDK corresponding to your build system:</p>\n<ul>\n<li><a href=\"https://www.microsoft.com/fr-fr/download/details.aspx?id=53344\">.NET Framework v4.6+</a> - either <a href=\"https://go.microsoft.com/fwlink/?LinkId=615458\">Build Tools for Visual Studio 2015 Update 3</a> or the <a href=\"https://www.visualstudio.com/downloads/\">Build Tools for Visual Studio 2017</a></li>\n<li>.NET Core 2.0 - <a href=\"https://www.microsoft.com/net/learn/get-started/\">.NET Core SDK 2.0</a> (for .NET Core version of the scanner)</li>\n<li>.NET Core 2.1 - <a href=\"https://www.microsoft.com/net/learn/get-started/\">NET Core SDK 2.1.3</a> (for .NET Core version of the scanner or if you plan to use <a href=\"https://www.nuget.org/packages/dotnet-sonarscanner\">.NET Core Global Tool</a></li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<h3>SonarScanner for MSBuild for .NET Framework or .NET Core</h3>\n<ul>\n<li>\n<p>Expand the downloaded file into the directory of your choice. We'll refer to it as <code>$install_directory</code> in the next steps.</p>\n<ul>\n<li>On Windows, you might need to unblock the ZIP file first (Right click on file > Properties > Unblock).</li>\n<li>On Linux/OSX you may need to set execute permissions on the files in <code>$install_directory/sonar-scanner-(version)/bin</code>.</li>\n</ul>\n</li>\n<li>\n<p>Uncomment, and update the global settings to point to your SonarQube server by editing <code>$install_directory/SonarQube.Analysis.xml</code>. Values set in this file will be applied to all analyses of all projects unless overwritten locally.<br>\nConsider setting file system permissions to restrict access to this file.:</p>\n<pre><code>&#x3C;SonarQubeAnalysisProperties  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns=\"http://www.sonarsource.com/msbuild/integration/2015/1\">\n&#x3C;Property Name=\"sonar.host.url\">http://localhost:9000&#x3C;/Property>\n&#x3C;Property Name=\"sonar.login\">[my-user-token]&#x3C;/Property>\n&#x3C;/SonarQubeAnalysisProperties>\n</code></pre>\n</li>\n<li>\n<p>Add <code>$install_directory</code> to your PATH environment variable.</p>\n</li>\n</ul>\n<h3>Installation of the SonarScanner for MSBuild .NET Core Global Tool</h3>\n<pre><code>dotnet tool install --global dotnet-sonarscanner --version 4.7.1\n</code></pre>\n<p>The <em>--version</em> argument is optional. If it is omitted the latest version will be installed.</p>\n<h3>On Linux/OSX, if your SonarQube server is secured:</h3>\n<ol>\n<li>Copy the server's CA certs to <code>/usr/local/share/ca-certificates</code></li>\n<li>Run <code>sudo update-ca-certificates</code></li>\n</ol>\n<h2>Use</h2>\n<p>There are two versions of the SonarScanner for MSBuild.</p>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>Since version 4.7.0 of the Scanner, you can invoke it using arguments with both dash (-) or forward-slash (/) separators.\nExample : SonarScanner.MSBuild.exe begin /k:\"project-key\" or SonarScanner.MSBuild.exe begin -k:\"project-key\" will work.</p></div></div>\n<p>The first version is based on the “classic” .NET Framework. To use it, execute the following commands from the root folder of your project:</p>\n<pre><code>SonarScanner.MSBuild.exe begin /k:\"project-key\" \nMSBuild.exe &#x3C;path to solution.sln> /t:Rebuild\nSonarScanner.MSBuild.exe end \n</code></pre>\n<p>Note: On Mac OS or Linux, you can also use <code>mono &#x3C;path to SonarScanner.MSBuild.exe></code>.</p>\n<p>The second version is based on .NET Core which has a very similar usage:</p>\n<pre><code>dotnet &#x3C;path to SonarScanner.MSBuild.dll> begin /k:\"project-key\" \ndotnet build &#x3C;path to solution.sln>\ndotnet &#x3C;path to SonarScanner.MSBuild.dll> end \n</code></pre>\n<p>The .NET Core version can also be used as a .NET Core Global Tool.\nAfter installing the Scanner as a global tool as described above it can be invoked as follows:</p>\n<pre><code>dotnet sonarscanner begin /k:\"project-key\" \ndotnet build &#x3C;path to solution.sln>\ndotnet sonarscanner end \n</code></pre>\n<p>Same as above, if you are targeting a SonarCloud project, will have to add both the organization and a login for authentication.</p>\n<p>Notes:</p>\n<ul>\n<li>The .NET Core version of the scanner does not support TFS XAML builds. Apart from that, the two versions of scanner have the same capabilities and command line arguments.</li>\n<li>Single .NET Core project files (csproj or vbproj) could be built and successfully analyzed only if a <code>&#x3C;ProjectGuid>unique guid&#x3C;/ProjectGuid></code> element is added in the csproj or vbproj XML. The <code>&#x3C;ProjectGuid></code> element is not required if you build a solution (sln) containing that project.</li>\n</ul>\n<h2>Analysis steps</h2>\n<h3>Begin</h3>\n<p>The begin step is executed when you add the <code>begin</code> command line argument. It hooks into the MSBuild pipeline, downloads SonarQube quality profiles and settings and prepares your project for the analysis.</p>\n<p>Command Line Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>/k:&#x3C;project-key></code></td>\n<td>[required] Specifies the key of the analyzed project in SonarQube</td>\n</tr>\n<tr>\n<td><code>/n:&#x3C;project name></code></td>\n<td>[optional] Specifies the name of the analyzed project in SonarQube. Adding this argument will overwrite the project name in SonarQube if it already exists.</td>\n</tr>\n<tr>\n<td><code>/v:&#x3C;version></code></td>\n<td>[recommended] Specifies the version of your project.</td>\n</tr>\n<tr>\n<td><code>/d:sonar.login=&#x3C;username> or &#x3C;token></code></td>\n<td>[optional] Specifies the username or access token to authenticate with to SonarQube. If this argument is added to the begin step, it must also be added on the end step.</td>\n</tr>\n<tr>\n<td><code>/d:sonar.password=&#x3C;password></code></td>\n<td>[optional] Specifies the password for the SonarQube username in the <code>sonar.login</code> argument. This argument is not needed if you use authentication token. If this argument is added to the begin step, it must also be added on the end step.</td>\n</tr>\n<tr>\n<td><code>/d:sonar.verbose=true</code></td>\n<td>[optional] Sets the logging verbosity to detailed. Add this argument before sending logs for troubleshooting.</td>\n</tr>\n<tr>\n<td><code>/d:&#x3C;analysis-parameter>=&#x3C;value></code></td>\n<td>[optional] Specifies an additional SonarQube <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">analysis parameter</a>, you can add this argument multiple times.</td>\n</tr>\n</tbody>\n</table>\n<p>For detailed information about all available parameters, see <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">Analysis Parameters</a>.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>The \"begin\" step will modify your build like this:</p><ul>\n<li>the active <code>CodeAnalysisRuleSet</code> will be updated to match the SonarQube quality profile</li>\n<li><code>WarningsAsErrors</code> will be turned off</li>\n</ul><p>If your build process cannot tolerate these changes we recommend creating a second build job for SonarQube analysis.</p></div></div>\n<h3>Build</h3>\n<p>Between the <code>begin</code> and <code>end</code> steps, you need to build your project, execute tests and generate code coverage data. This part is specific to your needs and it is not detailed here.</p>\n<h3>End</h3>\n<p>The end step is executed when you add the \"end\" command line argument. It cleans the MSBuild hooks, collects the analysis data generated by the build, the test results, the code coverage and then uploads everything to SonarQube.</p>\n<p>There are only two additional arguments that are allowed for the end step:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>/d:sonar.login=&#x3C;username> or &#x3C;token></code></td>\n<td>[optional] This argument is required if it was added to the begin step.</td>\n</tr>\n<tr>\n<td><code>/d:sonar.password=&#x3C;password></code></td>\n<td>[optional] This argument is required if it was added to the begin step and you are not using an authentication token.</td>\n</tr>\n</tbody>\n</table>\n<h3>Known Limitations</h3>\n<ul>\n<li>MSBuild versions older than 14 are not supported.</li>\n<li>Web Application projects are supported. Legacy Web Site projects are not. </li>\n<li>Projects targeting multiple frameworks and using preprocessor directives could have slightly inaccurate metrics (lines of code, complexity, etc.) because the metrics are calculated only from the first of the built targets.</li>\n</ul>\n<h2>Excluding projects from analysis</h2>\n<p>Some project types, such as <a href=\"https://msdn.microsoft.com/en-us/library/hh549175.aspx\">Microsoft Fakes</a>, are automatically excluded from analysis. To manually exclude a different type of project from the analysis, place the following in its .xxproj file.</p>\n<pre><code>&#x3C;!-- in .csproj -->\n&#x3C;PropertyGroup>\n  &#x3C;!-- Exclude the project from analysis -->\n  &#x3C;SonarQubeExclude>true&#x3C;/SonarQubeExclude>\n&#x3C;/PropertyGroup>\n</code></pre>\n<h2>Advanced topics</h2>\n<p><strong>Analyzing MSBuild 12 projects with MSBuild 14</strong><br>\nThe Sonar Scanner for MSBuild requires your project to be built with MSBuild 14.0. We recommend installing Visual Studio 2015 update 3 or later on the analysis machine in order to benefit from the integration and features provided with the Visual Studio ecosystem (VSTest, MSTest unit tests, etc.).</p>\n<p>Projects targeting older versions of the .NET Framework can be built using MSBuild 14.0 by setting the \"TargetFrameworkVersion\" MSBuild property as documented by Microsoft:</p>\n<ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/bb398202.aspx\">How to: Target a Version of the .NET Framework</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/hh264221.aspx\">MSBuild Target Framework and Target Platform</a></li>\n</ul>\n<p>If you do not want to switch your production build to MSBuild 14.0, you can set up a separate build dedicated to the SonarQube analysis.</p>\n<p><strong>Detection of Test Projects</strong><br>\nSonarQube analyzes test projects differently from non-test projects, so it is important to correctly classify test projects.</p>\n<p>By default, the SonarQube Scanner for MSBuild will detect as test project:</p>\n<p>. MSTest unit test projects, thanks to the presence of a well-known project type GUID in .csproj file of such projects.</p>\n<ol>\n<li>\n<p>Projects with names ending in \"Test\" or \"Tests\". This behavior can be changed by providing the parameter <code>sonar.msbuild.testProjectPattern</code> to the begin step (regex follows .NET Regular Expression in a case-sensitive way with the default value <code>.*Tests?\\.(cs|vb)proj$</code>). This regex is applied against the fullname of the <code>.csproj</code> or <code>.vbproj</code> which is why it's recommended to keep at the end of your custom regex <code>\\.(cs|vb)proj$</code>.\nTo manually classify a project as a test project, mark it with <code>&#x3C;SonarQubeTestProject>true&#x3C;/SonarQubeTestProject></code>:</p>\n<pre><code>&#x3C;!-- in .csproj -->\n&#x3C;PropertyGroup>\n&#x3C;!-- Mark the project as being a test project -->\n&#x3C;SonarQubeTestProject>true&#x3C;/SonarQubeTestProject>\n&#x3C;/PropertyGroup>\n</code></pre>\n</li>\n</ol>\n<p><strong>Per-project analysis parameters</strong>\nSome analysis parameters can be set for a single MSBuild project by adding them to its .csproj file.</p>\n<pre><code>&#x3C;!-- in .csproj -->\n&#x3C;ItemGroup>\n  &#x3C;SonarQubeSetting Include=\"sonar.stylecop.projectFilePath\">\n    &#x3C;Value>$(MSBuildProjectFullPath)&#x3C;/Value>\n  &#x3C;/SonarQubeSetting>\n&#x3C;/ItemGroup>\n</code></pre>\n<p><strong>Concurrent Analyses on the Same Build Machine</strong><br>\nConcurrent analyses (i.e. parallel analysis of two solutions on the same build machine using a unique service account) are not supported by default by the Scanner for MSBuild. You can enable it as follows:</p>\n<ol>\n<li>Locate the folder containing the Scanner for MSBuild</li>\n<li>Go in the <code>Targets</code> folder and copy the folder <code>SonarQube.Integration.ImportBefore.targets</code></li>\n<li>\n<p>Paste it under your build tool global <code>ImportBefore</code> folder (if the folder doesn't exist, create it).</p>\n<ul>\n<li>\n<p>For MSBuild, the path is <code>&#x3C;MSBUILD_INSTALL_DIR>\\&#x3C;Version>\\Microsoft.Common.targets\\ImportBefore</code> where &#x3C;MSBUILD<em>INSTALL</em>DIR> is:\n*For v14, default path is: <code>C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common.Targets\\ImportBefore</code></p>\n<ul>\n<li>For v15, default path is: <code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportBefore</code> (for VS Community Edition)</li>\n<li>For v16, default path is: <code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Microsoft.Common.targets</code> (for VS Community Edition)</li>\n</ul>\n</li>\n<li>For dotnet, the path is <code>&#x3C;DOTNET_SDK_INSTALL_DIR>\\15.0\\Microsoft.Common.targets\\ImportBefore</code> where <code>&#x3C;DOTNET_SDK_INSTALL_DIR></code> can be found using the <code>dotnet --info</code> and looking for the Base Path property.</li>\n</ul>\n</li>\n</ol>\n<p>The performance impact of this global installation for projects that aren't analyzed is negligible as this target is only a bootstrapper and will bail out nearly instantaneously when the <code>.sonarqube</code> folder is not found under the folder being built.</p>\n<p><strong>Using SonarScanner for MSBuild with a Proxy</strong><br>\nOn build machines that connect to the Internet through a proxy server you might experience difficulties connecting to SonarQube. To instruct the Java VM to use the system proxy settings, you need to set the following environment variable before running the SonarScanner for MSBuild:</p>\n<pre><code>SONAR_SCANNER_OPTS = \"-Djava.net.useSystemProxies=true\"\n</code></pre>\n<p>To instruct the Java VM to use specific proxy settings or when there is no system-wide configuration use the following value:</p>\n<pre><code>SONAR_SCANNER_OPTS = \"-Dhttp.proxyHost=yourProxyHost -Dhttp.proxyPort=yourProxyPort\"\n</code></pre>\n<p>Where <em>yourProxyHost</em> and <em>yourProxyPort</em> are the hostname and the port of your proxy server. There are additional proxy settings for https, authentication and exclusions that could be passed to the Java VM. For more information see the following article: <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html\">https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html</a></p>","fields":{"slug":"/analysis/scan/sonarscanner-for-msbuild/"}}},{"node":{"html":"<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>By <a href=\"https://www.sonarsource.com/\">SonarSource</a> – GNU LGPL 3 – <a href=\"https://jira.sonarsource.com/browse/MSONAR\">Issue Tracker</a> – <a href=\"https://github.com/SonarSource/sonar-scanner-maven\">Source</a><br>\nClick <a href=\"https://mvnrepository.com/artifact/org.sonarsource.scanner.maven/sonar-maven-plugin\">here</a> for the latest version.</p></div></div>\n<p>The SonarScanner is recommended as the default analyzer for Maven projects.</p>\n<p>The ability to execute the SonarQube analysis via a regular Maven goal makes it available anywhere Maven is available (developer build, CI server, etc.), without the need to manually download, setup, and maintain a SonarQube Runner installation. The Maven build already has much of the information needed for SonarQube to successfully analyze a project. By preconfiguring the analysis based on that information, the need for manual configuration is reduced significantly. </p>\n<h2>Prerequisites</h2>\n<ul>\n<li>Maven 3.x</li>\n<li>At least the minimal version of Java supported by your SonarQube server is in use </li>\n</ul>\n<h2>Global Settings</h2>\n<p>Edit the <a href=\"http://maven.apache.org/settings.html\">settings.xml</a> file, located in <code>$MAVEN_HOME/conf</code> or <code>~/.m2</code>, to set the plugin prefix and optionally the SonarQube server URL.</p>\n<p>Example:</p>\n<pre><code>&#x3C;settings>\n    &#x3C;pluginGroups>\n        &#x3C;pluginGroup>org.sonarsource.scanner.maven&#x3C;/pluginGroup>\n    &#x3C;/pluginGroups>\n    &#x3C;profiles>\n        &#x3C;profile>\n            &#x3C;id>sonar&#x3C;/id>\n            &#x3C;activation>\n                &#x3C;activeByDefault>true&#x3C;/activeByDefault>\n            &#x3C;/activation>\n            &#x3C;properties>\n                &#x3C;!-- Optional URL to server. Default value is http://localhost:9000 -->\n                &#x3C;sonar.host.url>\n                  http://myserver:9000\n                &#x3C;/sonar.host.url>\n            &#x3C;/properties>\n        &#x3C;/profile>\n     &#x3C;/profiles>\n&#x3C;/settings>\n</code></pre>\n<h2>Analyzing</h2>\n<p>Analyzing a Maven project consists of running a Maven goal: <code>sonar:sonar</code> from the directory that holds the main project <code>pom.xml</code>.</p>\n<pre><code>mvn clean verify sonar:sonar\n</code></pre>\n<p>In some situations you may want to run the <code>sonar:sonar</code> goal as a dedicated step. Be sure to use <code>install</code> as first step for multi-module projects</p>\n<pre><code>mvn clean install\nmvn sonar:sonar\n</code></pre>\n<p>To specify the version of sonar-maven-plugin instead of using the latest:</p>\n<pre><code>mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar\n</code></pre>\n<p>To get coverage information, you'll need to generate the coverage report before the analysis. </p>\n<h2>Configuring Analysis</h2>\n<p>Most analysis properties will be read from your project. If you would like override the default values of specify additional parameters, configure the parameter names found on the <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">Analysis Parameters</a> page in the <code>&#x3C;properties></code> section of your pom.xml like this:</p>\n<pre><code>&#x3C;properties>\n  &#x3C;sonar.buildString> [...] &#x3C;/sonar.buildString>\n&#x3C;/properties>\n</code></pre>\n<h2>Sample Project</h2>\n<p>To help you get started, a simple project sample is available here: <a href=\"https://github.com/SonarSource/sonar-scanning-examples/tree/master/sonarqube-scanner-maven\">https://github.com/SonarSource/sonar-scanning-examples/tree/master/sonarqube-scanner-maven</a></p>\n<h2>Excluding a module from analysis</h2>\n<ul>\n<li>define property <code>&#x3C;sonar.skip>true&#x3C;/sonar.skip></code> in the <code>pom.xml</code> of the module you want to exclude</li>\n<li>use build profiles to exclude some module (like for integration tests)</li>\n<li>use Advanced Reactor Options (such as \"-pl\"). For example <code>mvn sonar:sonar -pl !module2</code></li>\n</ul>\n<h2>How to Fix Version of Maven Plugin</h2>\n<p>It is recommended to lock down versions of Maven plugins:</p>\n<pre><code>&#x3C;build>\n  &#x3C;pluginManagement>\n    &#x3C;plugins>\n      &#x3C;plugin>\n        &#x3C;groupId>org.sonarsource.scanner.maven&#x3C;/groupId>\n        &#x3C;artifactId>sonar-maven-plugin&#x3C;/artifactId>\n        &#x3C;version>3.6.0.1398&#x3C;/version>\n      &#x3C;/plugin>\n    &#x3C;/plugins>\n  &#x3C;/pluginManagement>\n&#x3C;/build>\n</code></pre>\n<h2>Troubleshooting</h2>\n<p><strong>If you get a java.lang.OutOfMemoryError</strong><br>\nSet the <code>MAVEN_OPTS</code> environment variable, like this in *nix environments:</p>\n<pre><code>export MAVEN_OPTS=\"-Xmx512m\"\n</code></pre>\n<p>On Windows environments, avoid the double-quotes, since they get misinterpreted.</p>\n<pre><code>set MAVEN_OPTS=-Xmx512m\n</code></pre>","fields":{"slug":"/analysis/scan/sonarscanner-for-maven/"}}},{"node":{"html":"<p><em>Cobol analysis is available as part of the <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">Enterprise Edition</a> and <a href=\"https://redirect.sonarsource.com/editions/editions.html\">above</a>.</em></p>\n<!-- update_center:cobol -->\n<h2>Language-Specific Properties</h2>\n<p>You can discover and update the COBOL-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=cobol\">Administration > General Settings > Cobol</a></strong></p>\n<h2>Source Code Extraction</h2>\n<p>In order to analyze your source code with SonarQube you need to first extract it onto a filesystem. You can use your own tool or an open source tool; SonarSource does not provide any connectors or source code extraction tools.</p>\n<h2>Advanced Configuration</h2>\n<h3>Defining Source Code Format</h3>\n<p>The supported source code formats are:</p>\n<ul>\n<li>Fixed format</li>\n<li>Free format</li>\n<li>Variable format</li>\n</ul>\n<p>To set the format, go to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=cobol\">Administration > General Settings > Cobol</a></strong> and set the \"Source format\" property.</p>\n<p>The fixed format has three main areas:</p>\n<pre><code>Area1 | Area2                                           | Area3\n000100* MY COMMENT\n000100 IDENTIFICATION DIVISION.\n000200 PROGRAM-ID. HELLOWORLD.                          *xxx\n100000 PROCEDURE DIVISION.                              *yyy\n100100\n100200 START.\n100400 DISPLAY \"HELLO COBOL !\" LINE 42 POSITION 12.\n100500 STOP RUN.\n</code></pre>\n<p>Areas #1 and #3 contain non-significant characters.\nArea #2 contains the source code. The first character of Area #2 is the Indicator Area, which has a special meaning (for instance <code>*</code> means that the line is a comment line, <code>D</code> means that the line is only taken into account in debug mode, etc.).</p>\n<p>The free format:</p>\n<pre><code>Area1 | Area2\n      * MY COMMENT\n       IDENTIFICATION DIVISION.\n         PROGRAM-ID. HELLOWORLD.\n       PROCEDURE DIVISION.\n         DISPLAY \"HELLO COBOL !\" LINE 42 POSITION 12.\n         STOP RUN.\n</code></pre>\n<p>The Indicator Area that has a special meaning (for instance <code>*</code> means that the line is a comment line, <code>D</code> means that the line in only taken into account in debug mode, etc.) is located at column 0. The size of the source code area is not limited.</p>\n<p>Variable format is also supported: it's similar to the fixed format but without Area #3.</p>\n<h3>Defining COBOL Dialect</h3>\n<p>Go to <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=cobol\">Administration > General Settings > Cobol</a></strong> and set the \"Dialect\" property.</p>\n<p>The COBOL analyzer supports the following dialects:</p>\n<ul>\n<li><code>bull-gcos-cobol</code></li>\n<li><code>hp-tandem-cobol</code></li>\n<li><code>ibm-os/vs-cobol</code></li>\n<li><code>ibm-ile-cobol</code></li>\n<li><code>ibm-cobol/ii</code></li>\n<li><code>ibm-cobol/400</code></li>\n<li><code>ibm-enterprise-cobol</code></li>\n<li><code>microfocus-cobol</code></li>\n<li><code>microfocus-acucobol-gt-cobol</code></li>\n<li><code>opencobol/cobol-it</code></li>\n</ul>\n<h3>Making Copybooks Available to the Analysis</h3>\n<p>Copybooks are, by definition, COBOL files that are not syntactically valid by themselves. However, copybooks are usually needed to properly parse COBOL programs. Thus, paths to the copybooks must be listed through the <code>sonar.cobol.copy.directories</code> property.</p>\n<h3>Raising Issues Against Copybooks</h3>\n<p>To have copybooks imported into a project, and issues logged against them, the copybook directories must be added to <code>sonar.sources</code> AND the copybook file suffixes must be added to <code>sonar.cobol.file.suffixes</code>. E.G.:</p>\n<pre><code>sonar.sources=cobol,copy1,commonCopy\nsonar.cobol.file.suffixes=cbl,cpy\nsonar.cobol.copy.suffixes=cpy\nsonar.cobol.copy.directories=copy1,commonCopy\n</code></pre>\n<p>In the case where a number of projects share a common set of copybooks, it may not be desirable to increment each project’s technical debt with the issues from the common copybooks. In such cases, the directory holding the common copybooks should be listed in <code>sonar.cobol.copy.directories</code> (as before) but left out of sonar.sources, E.G.:</p>\n<pre><code>sonar.sources=cobol,copy1\nsonar.cobol.file.suffixes=cbl,cpy\nsonar.cobol.copy.suffixes=cpy\nsonar.cobol.copy.directories=copy1,commonCopy\n</code></pre>\n<h3>Analyzing without file suffixes</h3>\n<p>Note that it is possible to analyze a COBOL project without file suffixes. To do this, remove the two suffix-related properties from your configuration and substitute the following setting for <code>sonar.lang.patterns.cobol</code>:</p>\n<pre><code>sonar.lang.patterns.cobol=**/*\n</code></pre>\n<h3>Switching Off Issues</h3>\n<p>There are three ways to switch off issues:</p>\n<ul>\n<li>Flagging issues as <a href=\"/SonarQubeChineseDoc8.1/user-guide/issues/\">false positive</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/project-administration/narrowing-the-focus/\">Ignoring the issues</a></li>\n<li>Using the <code>NOSONAR</code> tag. To switch off an issue, place the <code>NOSONAR</code> tag in a comment line located right before the line containing the issue. Example:</li>\n</ul>\n<pre><code>* NOSONAR, in such case call to GO TO is tolerated, blabla...\n GO TO MY_PARAGRAPH.\n</code></pre>\n<h3>ACUCOBOL-GT Source Code Control Directives</h3>\n<p>The COBOL analyzer supports the ACUCOBOL-GT’s Source Code Control directives. This mechanism allows you to conditionally modify the program at compile time by excluding or including lines. This can be used to maintain different versions of the program, perhaps to support different machine environments.</p>\n<p>The <code>-Si</code> (include) flag controls the actions of the source code control system. It must be followed by an argument that specifies a pattern that the compiler will search for in the Identification Area of each source line. If the pattern is found, then the line will be included in the source program, even if it is a comment line. However, if the pattern is immediately preceded by an exclamation point, then the line will be excluded from the source (i.e., commented out).</p>\n<p>The <code>-Sx</code> (exclude) flag works the same way except that its meaning is reversed (lines with the pattern will be commented out and lines with a preceding exclamation point will be included).</p>\n<p>For example, suppose a program is being maintained for both the UNIX and VMS environments. The following piece of code is in the program:</p>\n<pre><code>MOVE \"SYS$HELP:HELPFILE\" TO FILE-NAME.  VMS\n*MOVE \"/etc/helpfile\" TO FILE-NAME.     UNX\nOPEN INPUT HELP-FILE.\n</code></pre>\n<p>This program fragment is ready to be compiled for the VMS system. If a UNIX version is desired, then the following flags will correct the source during compilation:</p>\n<pre><code>-Si UNX -Sx VMS\n</code></pre>\n<p>Please consult the ACUCOBOL-GT documentation for more on the mechanism.</p>\n<p>There are two ways in SonarQube to specify the list of ACUCOBOL-GT flags to be used in order to preprocess the source code. The first option is to define a list of global flags which will be used to preprocess all source files. This can be done in the <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=cobol\">Administration > General Settings > Cobol</a> > Preprocessor</strong>.</p>\n<p>The second option is to provide a list of relative paths (with help of the ‘sonar.cobol.acucobol.preprocessor.directives.directories’ property) which contain the list of flags to be used for each COBOL source file. Let’s take a simple example. If a file ‘MY<em>PROGRAM.CBL’ is going to be processed, the SonarQube ACUCOBOL-GT preprocessor, will try to find a file ‘MY</em>PROGRAM.CMD’. If this file is found, then the flags contained in this file is going to be used to preprocess the program ‘MY<em>PROGRAM.CBL’. If the file ‘MY</em>PROGRAM.CMD’ doesn’t exist, then the preprocess will use the content of the file ‘DEFAULT.CMD’ if exists.</p>\n<h3>Microfocus Compiler Constants</h3>\n<p>If your code takes advantage of conditional compilation features provided by Microfocus, you may have to configure compiler constants for your analysis. You can define a compiler constant by setting a property named s<code>onar.cobol.compilationConstant.[constant name here].</code></p>\n<p>For example, if your COBOL code looks like this:</p>\n<pre><code>       IDENTIFICATION DIVISION.\n      $IF myconstant DEFINED\n       PROGRAM-ID. x.\n      $END\n      $IF otherconstant DEFINED\n       PROGRAM-ID. y.\n      $END\n</code></pre>\n<p>You can set the value of a compiler constant named \"myconstant\" by inserting the following line in your sonar-project.properties file:</p>\n<pre><code>sonar.cobol.compilationConstant.myconstant=myvalue\n</code></pre>\n<h2>Database Catalog (DB2)</h2>\n<p>The COBOL analyzer offers rules which target embedded SQL statements and require the analyzer to have knowledge of the database catalog (E.G. the primary key column(s) of a given table).\nThese rules will raise issues only if the database catalog is provided to the analysis. For the moment, this is available only for IBM DB2 (z/OS) catalogs, and the catalog must be provided via a set of CSV (\"Comma Separated Values\") files.</p>\n<p>These rules rely on two analysis properties:</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.cobol.sql.catalog.csv.path</code></td>\n<td>relative path of the directory containing CSV files for the database catalog</td>\n</tr>\n<tr>\n<td><code>sonar.cobol.sql.catalog.defaultSchema</code></td>\n<td>comma-separated list of default database schemas used in embedded SQL statements</td>\n</tr>\n</tbody>\n</table>\n<p><code>sonar.cobol.sql.catalog.csv.path</code> should define a directory which contains 8 CSV files. Each of these CSV files contains data for a specific DB2 catalog table and is named after it. The following table lists the required files and their respective mandatory columns. Additional columns may be listed, but will be ignored:</p>\n<table>\n<thead>\n<tr>\n<th>Table</th>\n<th>File name</th>\n<th>Required Columns</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SYSIBM.SYSCOLUMNS</code></td>\n<td><code>SYSCOLUMNS.csv</code></td>\n<td><code>TBNAME</code>,<code>TBCREATOR</code>,<code>NAME</code>,<code>PARTKEY_COLSEQ</code>,<code>DEFAULT</code>,<code>NULLS</code>,<code>DEFAULTVALUE</code></td>\n</tr>\n<tr>\n<td><code>SYSIBM.SYSINDEXES</code></td>\n<td><code>SYSINDEXES.csv</code></td>\n<td><code>NAME</code>,<code>CREATOR</code>,<code>TBNAME</code>,<code>TBCREATOR</code>,<code>UNIQUERULE</code>,<code>INDEXTYPE</code></td>\n</tr>\n<tr>\n<td><code>SYSIBM.SYSINDEXPART</code></td>\n<td><code>SYSINDEXPART.csv</code></td>\n<td><code>IXNAME</code>,<code>IXCREATOR</code>,<code>PARTITION</code></td>\n</tr>\n<tr>\n<td><code>SYSIBM.SYSKEYS</code></td>\n<td><code>SYSKEYS.csv</code></td>\n<td><code>IXNAME</code>,<code>IXCREATOR</code>,<code>COLNAME</code>,<code>COLSEQ</code></td>\n</tr>\n<tr>\n<td><code>SYSIBM.SYSSYNONYMS</code></td>\n<td><code>SYSSYNONYMS.csv</code></td>\n<td><code>NAME</code>,<code>CREATOR</code>,<code>TBNAME</code>,<code>TBCREATOR</code></td>\n</tr>\n<tr>\n<td><code>SYSIBM.SYSTABLES</code></td>\n<td><code>SYSTABLES.csv</code></td>\n<td><code>NAME</code>,<code>CREATOR</code>,<code>TYPE</code>,<code>PARTKEYCOLNUM</code>,<code>TSNAME</code>,<code>DBNAME</code>,<code>TBNAME</code>,<code>TBCREATOR</code>,<code>CARDF</code></td>\n</tr>\n<tr>\n<td><code>SYSIBM.SYSTABLESPACE</code></td>\n<td><code>SYSTABLESPACE.csv</code></td>\n<td><code>NAME</code>,<code>DBNAME</code>,<code>PARTITIONS</code></td>\n</tr>\n<tr>\n<td><code>SYSIBM.SYSVIEWS</code></td>\n<td><code>SYSVIEWS.csv</code></td>\n<td><code>NAME</code>,<code>CREATOR</code>,<code>STATEMENT</code></td>\n</tr>\n</tbody>\n</table>\n<p>The CSV format is the following:</p>\n<ul>\n<li>Each file must be named for the table it represents.</li>\n<li>First line must contain the exact names of the columns.</li>\n<li>Order of the columns is not meaningful.</li>\n<li>Fields are comma-delimited.</li>\n<li>If a field contains a comma, then its value must be surrounded by double quotes (\").</li>\n<li>If a field which is surrounded by double quotes contains a double quote character (\"), then this character must be doubled (\"\").</li>\n</ul>\n<p>Example for <code>SYSVIEWS.csv</code>:</p>\n<pre><code>CREATOR,NAME,STATEMENT\nUSER1,VIEW1,select x from table1\nUSER1,VIEW2,\"select x, y from table1\"\nUSER1,VIEW3,\"select x, \"\"y\"\" from table1\"\n</code></pre>\n<p>The <code>UNLOAD</code> DB2 utility with the <code>DELIMITED</code> option should produce the required files except for the column names on the first line.</p>\n<h2>Custom Rules</h2>\n<h3>Overview</h3>\n<p>The COBOL analyzer parses the source code, creates an Abstract Syntax Tree (AST) and then walks through the entire tree. A coding rule can subscribe to be notified every time a node of a certain type is visited.</p>\n<p>As soon as the coding rule is notified, it can navigate the tree around the node and raise issues if necessary.</p>\n<h3>Writing a Plugin</h3>\n<p>Writing new COBOL coding rules is a six-step process:</p>\n<ul>\n<li>Create a standard SonarQube plugin.</li>\n<li>Attach this plugin to the SonarQube COBOL plugin (see the <code>pom.xml</code> file of the provided sample plugin project).</li>\n<li>Create as many custom COBOL coding rules as required by extending <code>com.sonarsource.api.ast.CobolCheck</code> and add them to the previous repository.</li>\n<li>Generate the SonarQube plugin (jar file).</li>\n<li>Place this jar file in the <code>$SONARQUBE_HOME/extensions/plugins</code> directory.</li>\n<li>Restart the SonarQube server.</li>\n</ul>\n<h3>Plugin Project Sample</h3>\n<p>To get started, clone the sample plugin project and follow the steps below:</p>\n<ul>\n<li>Install Maven</li>\n<li>Build the plugin by running <code>mvn install</code> from the project directory. This will generate a SonarQube plugin jar file in the target directory.</li>\n<li>Add your newly created jar into the <code>$SONARQUBE_HOME/extensions/plugins</code> directory</li>\n<li>Restart the SonarQube server</li>\n</ul>\n<p>If you now look at the COBOL quality profiles, you will find the new coding rule (“Sample check”). Don’t forget to activate it. Run an analysis of a COBOL project, and you will find that an issue was logged at line 5 on every file.</p>\n<h3>Subscribing to a NodeType</h3>\n<p>Very often when writing a coding rule, you will want to subscribe to a NodeType. A NodeType can be either a rule of the grammar or a keyword of the language. As an example, here is the code of the implementation of the “Avoid using Merge statement” coding rule:</p>\n<pre><code>public class MergeStatementUsageCheck extends CobolCheck {\n\n  public void init() {\n    subscribeTo(getCobolGrammar().mergeStatement);\n  }\n\n  public void visitNode(AstNode node) {\n    reportIssue(\"Avoid using MERGE statement.\").on(node);\n  }\n}\n</code></pre>\n<p>Note that CICS and SQL grammars can be accessed using <code>getCicsGrammar()</code> and <code>getSqlGrammar()</code>.</p>\n<h3>Coding Rule Lifecycle</h3>\n<p>A coding rule can optionally override six methods inherited from the CobolCheck class. Those methods are called sequentially in the following order:</p>\n<ul>\n<li><code>public void init() {…}</code>: This method is called only once and should be used to subscribe to one or more NodeType(s).</li>\n<li><code>public void visitFile(AstNode astNode) {…}</code>: This method is called on each file before starting the parsing.</li>\n<li><code>public void visitNode(AstNode astNode) {…}</code>: This method is called when an AstNode matches a subscribed NodeType (see Subscribing to a NodeType) and before analyzing its content.</li>\n<li><code>public void leaveNode(AstNode astNode) {…}</code>: This method is called when an AstNode matches a desired NodeType (see Subscribing to a NodeType) and after analyzing its content.</li>\n<li><code>public void leaveFile(AstNode astNode) {…}</code>: This method is called before exiting a file.</li>\n<li><code>public void destroy() {…}</code>: This method is called before shutting down the coding rule.</li>\n<li>The <code>reportIssue(…)</code> method, used to log an issue, should be called only inside the <code>visitFile(…)</code>, <code>visitNode(…)</code>, <code>leaveNode(…)</code> and <code>leaveFile(…)</code> methods. Indeed, the file context isn’t known when the <code>init()</code> and <code>destroy()</code> methods are called, so the issue can’t be associated to a file.</li>\n</ul>\n<p>More advanced features are documented in the <a href=\"http://javadocs.sonarsource.org/cobol/apidocs/\">API Javadoc</a>.</p>\n<h3>Navigating the AST (Abstract Syntax Tree) with the SSLR COBOL Toolkit</h3>\n<p>When starting to write a new COBOL coding rule, the main difficulty is to understand the COBOL AST in order to know which NodeType(s) need to be visited. This can be achieved by using the <a href=\"https://binaries.sonarsource.com/CommercialDistribution/sslr-cobol-toolkit/\">SSLR COBOL Toolkit</a>, a Swing application that enables loading a COBOL file and displaying its representation as an Abstract Syntax Tree.</p>\n<p>Each node in the AST is a COBOL grammar rule and each leaf in the AST is a COBOL token. Let’s say you want to visit the node <code>ifStatement</code>. In this case, the <code>init()</code> method of your COBOL coding rule must contain the following statement: <code>subscribeTo(getCobolGrammar().ifStatement);</code></p>\n<h3>API Changes</h3>\n<p><em>Since 4.0</em>\nA new API is available to write the rules but also to implement the tests.</p>\n<p>Custom rules should now extend <code>CobolCheck</code> (<code>CobolAstCheck</code> is deprecated) and issues should be logged using the <code>reportIssue(...)</code> method.<br>\nTests on custom rules should now use <code>CobolCheckVerifier</code>: the assertions about issues should now be added as comments inside COBOL test files.<br>\nCustom rules should be listed in an implementation of <code>CobolCheckRepository</code> (<code>CobolAstCheckRepository</code> is now deprecated) and metadata should be loaded by implementing <code>RulesDefinitionExtension</code>.<br>\nYou can now store your custom rules into a dedicated rule repository by implementing SonarQube's <code>RulesDefinition</code>: in that case, you don't need to implement <code>RulesDefinitionExtension</code>.<br>\n<img src=\"/images/exclamation.svg\"> For users who already have custom rules in production: existing issues will be closed and re-opened because the internal keys of the rules are changing.\nIf you wrote a custom plugin against SonarCOBOL 3.x, it should still be compatible at runtime with SonarCOBOL 4.0.</p>\n<p>To migrate to the new API (<a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/pull/14\">full example on github</a>):</p>\n<ul>\n<li>First, migrate tests without modifying rule classes. That mainly requires moving assertions from java test classes to comments inside test cobol files (<a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/commit/c95b6a84b6fd1efc832a46cd5e1101ee51e6268e\">see an example on github</a>).</li>\n<li>Update check classes to replace the calls to deprecated methods with the new methods which create issues (<a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/commit/d6f6ef7457d99e31990fa64b5ff9cc566775af96\">see an example on github</a>).</li>\n<li>Implement <code>CobolRulesDefinitionExtension</code> and <code>CobolCheckRepository</code>, remove the class extending <code>CobolAstCheckRepository</code> (<a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/commit/ea15f07ce79366a08fee5b60e9a93c32a4625918\">see an example on github</a>).</li>\n<li>Update check classes to extend <code>CobolCheck</code> instead of <code>CobolAstCheck</code> to stop using deprecated APIs (<a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/commit/8e1d746900f5411e9700fea04700cd804e45e034\">see an example on github</a>).</li>\n</ul>\n<p>To move your custom rules to a dedicated rule repository, see <a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/commit/16ad89c4172c259f15bce56edcd09dd5b489eacd\">an example on github</a>.</p>\n<h2>Related Pages</h2>\n<ul>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/extend/adding-coding-rules/\">Adding Coding Rules</a></p>\n</li>\n</ul>","fields":{"slug":"/analysis/languages/cobol/"}}},{"node":{"html":"<p><em>C/C++/Objective-C analysis is available as part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://redirect.sonarsource.com/editions/editions.html\">above</a>.</em></p>\n<!-- update_center:cpp -->\n<p>C/C++/Objective-C analysis is officially registered as <a href=\"https://cwe.mitre.org/compatible/\">CWE Compatible</a>.</p>\n<h2>Supported Compilers, Language Standards and Operating Systems</h2>\n<ul>\n<li>Any version of Clang, GCC and Microsoft C/C++ compilers</li>\n<li>Any version of Intel compiler for Linux and macOS</li>\n<li>ARM5 and ARM6 compilers</li>\n<li>IAR compiler for ARM, Renesas RL78, Renesas RX, Renesas V850, Texas Instruments MSP430 and for 8051</li>\n<li>Compilers based wholly on GCC including for instance Linaro GCC and WindRiver GCC are also supported</li>\n<li>C89, C99, C11, C++03, C++11, C++14 and C++17 standards</li>\n<li>GNU extensions</li>\n<li>Microsoft Windows, Linux and macOS for runtime environment</li>\n</ul>\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the C/C++/Objective-C specific properties in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=c+%2F+c%2B%2B+%2F+objective-c\">Administration > General Settings > C / C++ / Objective-C</a></strong></p>\n<h2>Prerequisites</h2>\n<h3>Build Wrapper</h3>\n<p>Analysis of C/C++/Objective-C projects requires the <strong>SonarQube Build Wrapper</strong>. It gathers all the configuration required for correct analysis of C/C++/Objective-C projects (such as macro definitions, include directories, …) directly from your project's build process. The Build Wrapper does not impact your build; it merely eavesdrops on it and writes what it learns into files a directory you specify. </p>\n<p>You can download the <em>Build Wrapper</em> directly from your SonarQube server, so that its version perfectly matches your version of the plugin. </p>\n<ul>\n<li>Download <em>Build Wrapper</em> for Linux from <a href=\"/SonarQubeChineseDoc8.1/#sonarqube#/static/cpp/build-wrapper-linux-x86.zip\">{SonarQube URL}/static/cpp/build-wrapper-linux-x86.zip</a></li>\n<li>Download <em>Build Wrapper</em> for macOS from <a href=\"/SonarQubeChineseDoc8.1/#sonarqube#/static/cpp/build-wrapper-macosx-x86.zip\">{SonarQube URL}/static/cpp/build-wrapper-macosx-x86.zip</a></li>\n<li>Download <em>Build Wrapper</em> for Windows from <a href=\"/SonarQubeChineseDoc8.1/#sonarqube#/static/cpp/build-wrapper-win-x86.zip\">{SonarQube URL}/static/cpp/build-wrapper-win-x86.zip</a></li>\n</ul>\n<p>Unzip the downloaded <em>Build Wrapper</em> and configure it in your <code>PATH</code> because doing so is just more convenient.</p>\n<h3>SonarQube Scanner</h3>\n<p>Analysis of C/C++/Objective-C projects requires the <a href=\"https://redirect.sonarsource.com/doc/install-configure-scanner.html\"><em>SonarScanner</em></a> CLI.</p>\n<h2>Analysis Steps</h2>\n<ul>\n<li>\n<p>If you use macOS or Linux operating systems make sure your source tree is in a directory called <code>src</code></p>\n</li>\n<li>\n<p>Add execution of the <em>Build Wrapper</em> as a prefix to your usual build command (the examples below use <code>make</code>, <code>xcodebuild</code> and <code>MSBuild</code>, but any build tool that performs a full build can be used)</p>\n<pre><code>// example for linux\nbuild-wrapper-linux-x86-64 --out-dir build_wrapper_output_directory make clean all \n// example for macOS\nbuild-wrapper-macosx-x86 --out-dir build_wrapper_output_directory xcodebuild clean build\n// example for Windows\nbuild-wrapper-win-x86-64.exe --out-dir  build_wrapper_output_directory MSBuild.exe /t:Rebuild\n</code></pre>\n</li>\n<li>\n<p>In the <em>sonar-project.properties</em> file at the root of your project add the property <code>sonar.cfamily.build-wrapper-output</code> with the path to the <em>Build Wrapper</em> output directory relative to the project directory (<code>build_wrapper_output_directory</code> in these examples). </p>\n<p>Sample <em>sonar-project.properties</em>:</p>\n<pre><code>sonar.projectKey=myFirstProject\nsonar.projectName=My First C++ Project\nsonar.projectVersion=1.0\nsonar.sources=src\nsonar.cfamily.build-wrapper-output=build_wrapper_output_directory\nsonar.sourceEncoding=UTF-8\n</code></pre>\n</li>\n<li>\n<p>Execute the SonarScanner (<code>sonar-scanner</code>) from the root directory of the project</p>\n<pre><code>sonar-scanner\n</code></pre>\n</li>\n<li>\n<p>Follow the link provided at the end of the analysis to browse your project's quality metrics in the UI</p>\n</li>\n</ul>\n<h2>Multithreaded Code Scan</h2>\n<p>It is possible to use all the cores available on the machine running the code scan. This can be activated by configuring the property <code>sonar.cfamily.threads</code> at the scanner level. Its default value is 1.</p>\n<ul>\n<li>\n<p>This feature must not be activated on a machine with only 1 core.</p>\n</li>\n<li>\n<p>The analyzer will not guess which value is most suitable for your project. It's up to you to test and find the best value.</p>\n</li>\n<li>\n<p>If a build machine with 2 cores is already configured to potentially run two code scans at the same time, there is no guarantee that configuring <code>sonar.cfamily.threads=2</code> will bring the expected performance benefits. It can even be worse than running with the default value.</p>\n</li>\n<li>\n<p>The multithreaded execution requires more memory than single-threaded execution.</p>\n</li>\n<li>\n<p>A machine with 64 cores configured with <code>sonar.cfamily.threads=64</code> is not certain to bring a large performance gain compared to a machine with 32 cores. The performance tradeoff will vary depending on the machine, project and setup, so some testing will be required to decide if the performance gain justifies moving to a larger machine.</p>\n</li>\n</ul>\n<h2>Solution with a Mix of C# and C++</h2>\n<p>When you have a Solution made of C++ and C#, to both use the SonarQube <em>Build Wrapper</em> and have an accurate analysis of the C# code, you must to use the <a href=\"https://github.com/SonarSource/sonar-scanner-msbuild\">SonarScanner for MSBuild</a>.\nNote that in this scenario source code stored in shared folders, not considered as a \"Project\" by Visual Studio, won't be scanned.</p>\n<ul>\n<li>Download and install both the <a href=\"https://redirect.sonarsource.com/doc/install-configure-scanner-msbuild.html\">SonarScanner for MSBuild</a> and the SonarQube <em>Build Wrapper</em> (see <em>Prerequisites</em> section).</li>\n<li>Execute the SonarQube Scanner for MSBuild <code>begin</code> step</li>\n<li>Add execution of <em>Build Wrapper</em> to your normal MSBuild build command</li>\n<li>Execute the SonarQube Scanner for MSBuild <code>end</code> step to complete the analysis</li>\n</ul>\n<p>For example:</p>\n<pre><code>SonarScanner.MSBuild.exe begin /k:\"cs-and-cpp-project-key\" /n:\"My C# and C++ project\" /v:\"1.0\" /d:sonar.cfamily.build-wrapper-output=\"bw_output\"\nbuild-wrapper-win-x86-64.exe --out-dir bw_output MSBuild.exe /t:Rebuild\nSonarScanner.MSBuild.exe end\n</code></pre>\n<h2>Measures for Header Files</h2>\n<p>Each time we analyze a header file as part of a compilation unit, we compute for this header the measures: statements, functions, classes, cyclomatic complexity and cognitive complexity. That means that each measure may be computed more than once for a given header. In that case, we store the largest value for each measure.</p>\n<h2>Building with Bazel</h2>\n<p><a href=\"https://www.bazel.build/\">Bazel</a> recommends that you use the <a href=\"https://docs.bazel.build/versions/master/bazel-user-manual.html#flag--batch\"><code>--batch</code></a> option when running in a Continuous Build context. When using the <em>BuildWrapper</em>, you are in such context. Also, you need to deactivate the <a href=\"https://docs.bazel.build/versions/master/bazel-user-manual.html#sandboxing\">\"sandbox\"</a> mechanism of <em>Bazel</em> so that the compiled file paths could be retrieved after the compilation phase.\nHere is an example of the <em>BuildWrapper</em> command with Bazel parameters on macOS:</p>\n<pre><code>build-wrapper-macosx-x86 --out-dir bw bazel\n  --batch\n  --spawn_strategy=standalone\n  --genrule_strategy=standalone\n  --bazelrc=/dev/null build\n  //main:hello-world\n</code></pre>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (CPPUnit, GCOV, llvm-cov, Visual Studio, Bullseye)</li>\n<li><a href=\"https://github.com/SonarSource/sonar-scanning-examples/tree/master/sonarqube-scanner-build-wrapper-linux\">Sample project</a> for C/C++ (Linux)</li>\n<li><a href=\"https://github.com/SonarSource/sonar-scanning-examples/tree/master/objc-llvm-coverage\">Sample project</a> for Objective-C</li>\n<li><a href=\"https://redirect.sonarsource.com/doc/install-configure-scanner-tfs-ts.html\">SonarScanner for Azure Devops</a> (analyzing Visual C++ project)</li>\n</ul>","fields":{"slug":"/analysis/languages/cfamily/"}}},{"node":{"html":"<p><em>Apex analysis is available as part of the <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">Enterprise Edition</a> and <a href=\"https://redirect.sonarsource.com/editions/editions.html\">above</a>.</em></p>\n<!-- update_center:sonarapex -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the Apex-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in: <a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=apex\"><strong>Administration > General Settings > Apex</strong></a></p>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (PMD Apex)</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (For Salesforce DX project)</li>\n</ul>","fields":{"slug":"/analysis/languages/apex/"}}},{"node":{"html":"<p><em>ABAP is available as part of <a href=\"https://redirect.sonarsource.com/editions/developer.html\">Developer Edition</a> and <a href=\"https://redirect.sonarsource.com/editions/editions.html\">above</a>.</em></p>\n<!-- update_center:abap -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the ABAP-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=abap\">Administration > General Settings > ABAP</a></strong></p>\n<h2>Source Code Extraction</h2>\n<p>In order to analyze your source code with SonarQube you need to first extract it from SAP onto a filesystem. You can use your own tool or an open source tool; SonarSource does not provide any connectors or source code extraction tools.</p>","fields":{"slug":"/analysis/languages/abap/"}}},{"node":{"html":"<!-- update_center:cssfamily -->\n<h2>Prerequisites</h2>\n<p>In order to analyze CSS code, you need to have Node.js >= 8 installed on the machine running the scan. Set property <code>sonar.nodejs.executable</code> to an absolute path to Node.js executable, if standard <code>node</code> is not available.</p>\n<p>If you have a community plugin that handles CSS installed on your SonarQube instance it will conflict with SonarCSS, so it should be removed.</p>\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the CSS-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=css\">Administration > General Settings > CSS</a></strong></p>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (StyleLint.io)</li>\n</ul>","fields":{"slug":"/analysis/languages/css/"}}},{"node":{"html":"<!-- update_center:flex -->\n<h2>Supported Versions</h2>\n<ul>\n<li>ActionScript 2</li>\n<li>ActionScript 3</li>\n</ul>\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the Flex-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in: <a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=flex\"><strong>Administration > General Settings > Flex</strong></a></p>\n<h2>Related Pages</h2>\n<ul>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (Cobertura)</p>\n</li>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/extend/adding-coding-rules/\">Adding Coding Rules</a></p>\n</li>\n</ul>","fields":{"slug":"/analysis/languages/flex/"}}},{"node":{"html":"<!-- update_center:csharp -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the C#-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in:  <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=c%23\">Administration > General Settings > C#</a></strong>.</p>\n<h3>Analyze Generated Code</h3>\n<p>To analyze tool-generated code (e.g. WCF code generated by <code>SvcUtil.exe</code>, protobuf code generated by <code>protoc</code>, Swagger client code generated by <code>NSwag</code>) for a specific C# project, enable the \"Analyze generated code\" setting inside <strong>Project > Administration > General Settings > C#</strong>. By default, tool-generated code files are skipped from analysis.</p>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Excluding External Roslyn Issues</a> (See \"Notes on external .NET issues\")</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (Visual Studio Code Coverage, dotCover, OpenCover)</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-msbuild/\">SonarScanner for MSBuild</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-azure-devops/\">SonarScanner for Azure DevOps</a></li>\n</ul>","fields":{"slug":"/analysis/languages/csharp/"}}},{"node":{"html":"<!-- update_center:go -->\n<h2>Prerequisites</h2>\n<ul>\n<li>SonarQube Scanner should run on a x86-64 Windows, macOS or Linux 64bits machine</li>\n<li>You need the <a href=\"https://golang.org/\">Go</a> installation on the scan machine only if you want to import coverage data</li>\n</ul>\n<h2>Language-Specific Properties</h2>\n<p>You can discover and update the Go-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=go\">Administration > General Settings > Go</a></strong></p>\n<h2>\"sonar-project.properties\" Sample</h2>\n<p>Here is a good first version of a <code>sonar-project.properties</code>, correctly excluding \"vendor\" directories and categorizing files as \"main\" or \"test\":</p>\n<pre><code>  sonar.projectKey=com.company.projectkey1\n  sonar.projectName=My Project Name\n\n  sonar.sources=.\n  sonar.exclusions=**/*_test.go,**/vendor/**\n\n  sonar.tests=.\n  sonar.test.inclusions=**/*_test.go\n  sonar.test.exclusions=**/vendor/**\n</code></pre>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (GoVet, GoLint, GoMetaLinter)</li>\n</ul>","fields":{"slug":"/analysis/languages/go/"}}},{"node":{"html":"<!-- update_center:java -->\n<h2>Language-Specific Properties</h2>\n<p>You can discover and update the Java-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in:  <a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=java\">Administration > General Settings > Java</a></p>\n<h2>Java Analysis and Bytecode</h2>\n<p>Compiled <code>.class</code> files are required for java projects with more than one java file. If not provided properly, analysis will fail with the message:</p>\n<pre><code>Please provide compiled classes of your project with sonar.java.binaries property.\n</code></pre>\n<p>If only some <code>.class</code> files are missing, you'll see warnings like this:</p>\n<pre><code>Class 'XXXXXX' is not accessible through the ClassLoader.\n</code></pre>\n<p>If you are not using Maven or Gradle for analysis, you must manually provide bytecode to the analysis.\nYou can also analyze test code, and for that you need to provide tests binaires and test libraries properties.</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.java.binaries</code> (required)</td>\n<td>Comma-separated paths to directories containing the compiled bytecode files corresponding to your source files.</td>\n</tr>\n<tr>\n<td><code>sonar.java.libraries</code></td>\n<td>Comma-separated paths to files with third-party libraries (JAR or Zip files) used by your project. Wildcards can be used: <code>sonar.java.libraries=path/to/Library.jar,directory/**/*.jar</code></td>\n</tr>\n<tr>\n<td><code>sonar.java.test.binaries</code></td>\n<td>Comma-separated paths to directories containing the compiled bytecode files corresponding to your test files</td>\n</tr>\n<tr>\n<td><code>sonar.java.test.libraries</code></td>\n<td>Comma-separated paths to files with third-party libraries (JAR or Zip files) used by your tests. (For example, this should include the junit jar). Wildcards can be used: <code>sonar.java.test.libraries=directory/**/*.jar</code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>Android users, Jack doesn't provide the required <code>.class</code> files.</p></div></div>\n<h2>Turning issues off</h2>\n<p>The best way to deactivate an individual issue you don't intend to fix is to mark it \"Won't Fix\" or \"False Positive\" through the SonarQube UI.</p>\n<p>If you need to deactivate a rule (or all rules) for an entire file, then <a href=\"/SonarQubeChineseDoc8.1/project-administration/narrowing-the-focus/\">issue exclusions</a> are the way to go. But if you only want to deactivate a rule across a subset of a file - all the lines of a method or a class - you can use <code>@SuppressWarnings(\"all\")</code> or <code>@SuppressWarnings</code> with rule keys: <code>@SuppressWarnings(\"squid:S2078\")</code> or <code>@SuppressWarnings({\"squid:S2078\", \"squid:S2076\"})</code>. </p>\n<h2>Handling Java Source Version</h2>\n<p>The Java Analyzer is able to react to the java version used for sources. This feature allows the deactivation of rules that target higher versions of Java than the one in use in the project so that false positives aren't generated from irrelevant rules.</p>\n<p>The feature relies entirely on the <code>sonar.java.source</code> property, which is automatically filled by most of the scanners used for analyses (Maven, Gradle). Java version-specific rules are not disabled when <code>sonar.java.source</code> is not provided. Concretely, rules which are designed to target specific java versions (tagged \"java7\" or \"java8\") are activated by default in the Sonar Way Java profile. From a user perspective, the feature is fully automatic, but it means that you probably want your projects to be correctly configured.</p>\n<p>When using SonarScanner to perform analyses of project, the property <code>sonar.java.source</code> can to be set manually in <code>sonar-project.properties</code>. Accepted formats are:</p>\n<ul>\n<li>\"1.X\" (for instance 1.6 for java 6, 1.7 for java 7, 1.8 for java 8, etc.)</li>\n<li>\"X\" (for instance 7 for java 7, 8 for java 8, etc. )</li>\n</ul>\n<p>Example: <code>sonar.java.source=1.6</code></p>\n<p>If the property is provided, the analysis will take the source version into account, and execute related rules accordingly. At run time, each of these rules will be executed – or not – depending of the Java version used by sources within the project. For instance, on a correctly configured project built with Java 6, rules targeting Java 7 and Java 8 will never raise issues, even though they are enabled in the associated rule profile.</p>\n<h2>Custom Rules</h2>\n<p>The tutorial <a href=\"https://redirect.sonarsource.com/doc/java-custom-rules-guide.html\">Writing Custom Java Rules 101</a> will help to quickly start writing custom rules for Java.</p>\n<h3>API changes</h3>\n<h4><strong>5.12</strong></h4>\n<ul>\n<li>\n<p><strong>Dropped</strong></p>\n<ul>\n<li>\n<p><code>org.sonar.plugins.java.api.JavaFileScannerContext</code>: Drop deprecated method used to retrieve trees contributing to the complexity of a method from  (deprecated since SonarJava 4.1). </p>\n<pre><code>//org.sonar.plugins.java.api.JavaFileScannerContext\n/**\n* Computes the list of syntax nodes which are contributing to increase the complexity for the given methodTree.\n* @deprecated use {@link #getComplexityNodes(Tree)} instead\n* @param enclosingClass not used.\n* @param methodTree the methodTree to compute the complexity.\n* @return the list of syntax nodes incrementing the complexity.\n*/\n@Deprecated\nList&#x3C;Tree> getMethodComplexityNodes(ClassTree enclosingClass, MethodTree methodTree);\n</code></pre>\n</li>\n<li>\n<p><code>org.sonar.plugins.java.api.JavaResourceLocator</code>: The following method has been dropped (deprecated since SonarJava 4.1), without replacement.</p>\n<pre><code>//org.sonar.plugins.java.api.JavaResourceLocator\n/**\n* get source file key by class name.\n* @deprecated since 4.1 : will be dropped with no replacement.\n* @param className fully qualified name of the analyzed class.\n* @return key of the source file for the given class.\n*/\n@Deprecated\nString findSourceFileKeyByClassName(String className);\n</code></pre>\n</li>\n<li>\n<p><code>org.sonar.plugins.surefire.api.SurefireUtils</code>: Dropping deprecated field with old property (deprecated since SonarJava 4.11)</p>\n<pre><code>//org.sonar.plugins.surefire.api.SurefireUtils\n/**\n* @deprecated since 4.11\n*/\n@Deprecated\npublic static final String SUREFIRE_REPORTS_PATH_PROPERTY = \"sonar.junit.reportsPath\";\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Deprecated</strong>  </p>\n<ul>\n<li>\n<p><code>org.sonar.plugins.java.api.JavaFileScannerContext</code>: Deprecate usage of File-based methods from API, which will be removed in future release. Starting from this version, methods relying on InputFile has to be preferred.</p>\n<pre><code>//org.sonar.plugins.java.api.JavaFileScannerContext\n/**\n* Report an issue at a specific line of a given file.\n* This method is used for one\n* @param file File on which to report\n* @param check The check raising the issue.\n* @param line line on which to report the issue\n* @param message Message to display to the user\n* @deprecated since SonarJava 5.12 - File are not supported anymore. Use corresponding 'reportIssue' methods, or directly at project level\n*/\n@Deprecated\nvoid addIssue(File file, JavaCheck check, int line, String message);\n/**\n* FileKey of currently analyzed file.\n* @return the fileKey of the file currently analyzed.\n* @deprecated since SonarJava 5.12 - Rely on the InputFile key instead, using {@link #getInputFile()}\n*/\n@Deprecated\nString getFileKey();\n\n/**\n* File under analysis.\n* @return the currently analyzed file.\n* @deprecated since SonarJava 5.12 - File are not supported anymore. Use {@link #getInputFile()} or {@link #getProject()} instead\n*/\n@Deprecated\nFile getFile();\n</code></pre>\n</li>\n<li>\n<p>Deprecate methods which are not relevant anymore in switch-related trees from API, following introduction of the new Java 12 <code>switch</code> expression:</p>\n<pre><code>//org.sonar.plugins.java.api.tree.CaseLabelTree\n/**\n* @deprecated (since 5.12) use the {@link #expressions()} method.\n*/\n@Deprecated\n@Nullable\nExpressionTree expression();\n\n/**\n* @deprecated (since 5.12) use the {@link #colonOrArrowToken()} method.\n*/\n@Deprecated\nSyntaxToken colonToken();\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Added</strong></p>\n<ul>\n<li>\n<p><code>org.sonar.plugins.java.api.JavaFileScannerContext</code>: Following methods have been added in order to provide help reporting issues at project level, and access data through SonarQube's InputFile API, which won't be possible anymore through files:</p>\n<pre><code>//JavaFileScannerContext: New methods\n/**\n* Report an issue at at the project level.\n* @param check The check raising the issue.\n* @param message Message to display to the user\n*/\nvoid addIssueOnProject(JavaCheck check, String message);\n\n/**\n* InputFile under analysis.\n* @return the currently analyzed inputFile.\n*/\nInputFile getInputFile();\n\n/**\n* InputComponent representing the project being analyzed\n* @return the project component\n*/\nInputComponent getProject();\n</code></pre>\n</li>\n<li>\n<p>In order to cover the Java 12 new switch expression, introduce a new Tree in the SonarJava Syntax Tree API  (Corresponding <code>Tree.Kind</code>: <code>SWITCH_EXPRESSION</code> ). New methods have also been added to fluently integrate the new switch expression into the SonarJava API.</p>\n<pre><code>//org.sonar.plugins.java.api.tree.SwitchExpressionTree\n/**\n* 'switch' expression.\n*\n* JLS 14.11\n*\n* &#x3C;pre>\n*   switch ( {@link #expression()} ) {\n*     {@link #cases()}\n*   }\n* &#x3C;/pre>\n*\n* @since Java 12\n*/\n@Beta\npublic interface SwitchExpressionTree extends ExpressionTree {\n\nSyntaxToken switchKeyword();\n\nSyntaxToken openParenToken();\n\nExpressionTree expression();\n\nSyntaxToken closeParenToken();\n\nSyntaxToken openBraceToken();\n\nList&#x3C;CaseGroupTree> cases();\n\nSyntaxToken closeBraceToken();\n}\n</code></pre>\n<pre><code>//org.sonar.plugins.java.api.tree.SwitchStatementTree\n/**\n* Switch expressions introduced with support Java 12\n* @since SonarJava 5.12\n*/\nSwitchExpressionTree asSwitchExpression();\n</code></pre>\n<pre><code>//org.sonar.plugins.java.api.tree.CaseLabelTree\n/**\n* @return true for case with colon: \"case 3:\" or \"default:\"\n*         false for case with arrow: \"case 3 ->\" or \"default ->\"\n* @since 5.12 (Java 12 new features)\n*/\nboolean isFallThrough();\n\n/**\n* @since 5.12 (Java 12 new features)\n*/\nSyntaxToken colonOrArrowToken();\n</code></pre>\n<pre><code>//org.sonar.plugins.java.api.tree.BreakStatementTree\n/**\n* @since 5.12 (Java 12 new features)\n*/\n@Nullable\nExpressionTree value();\n</code></pre>\n<pre><code>//org.sonar.plugins.java.api.tree.TreeVisitor\nvoid visitSwitchExpression(SwitchExpressionTree tree);\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h4><strong>5.7</strong></h4>\n<ul>\n<li>\n<p><strong>Breaking</strong>  </p>\n<ul>\n<li>This change will impact mostly the custom rules relying on semantic API. The type returned by some symbols will change from raw type to parameterized type with identity substitution and this will change how subtyping will answer.</li>\n</ul>\n<p>It is possible to get the previous behavior back by using type erasure on the newly returned type. Note that not all returned types are impacted by this change.</p>\n<p>Example:</p>\n<pre><code>@Rule(key = \"MyFirstCustomRule\")\npublic class MyFirstCustomCheck extends IssuableSubscriptionVisitor {\n\n    @Override\n    public List&#x3C;Kind> nodesToVisit() {\n        return ImmutableList.of(Kind.METHOD);\n    }\n\n    @Override\n    public void visitNode(Tree tree) {\n        MethodTree method = (MethodTree) tree;\n        MethodSymbol symbol = method.symbol();\n        \n        Type returnType = symbol.returnType().type();\n        // When analyzing the code \"MyClass&#x3C;Integer> foo() {return null; }\"\n        // BEFORE: returnType == ClassJavaType\n        // NOW: returnType == ParametrizedTypeJavaType\n\n        // Getting back previous type\n        Type erasedType = returnType.erasure();\n        // erasedType == ClassJavaType\n    }\n}\n</code></pre>\n</li>\n</ul>\n<h2>Related Pages</h2>\n<ul>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (<a href=\"https://spotbugs.github.io/\">SpotBugs</a>, FindBugs, <a href=\"https://github.com/find-sec-bugs/find-sec-bugs/wiki/Maven-configuration\">FindSecBugs</a>, <a href=\"http://maven.apache.org/plugins/maven-pmd-plugin/usage.html\">PMD</a>, <a href=\"http://maven.apache.org/plugins/maven-checkstyle-plugin/checkstyle-mojo\">Checkstyle</a>)</p>\n</li>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (JaCoCo, Surefire)</p>\n</li>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/extend/adding-coding-rules/\">Adding Coding Rules</a></p>\n</li>\n</ul>","fields":{"slug":"/analysis/languages/java/"}}},{"node":{"html":"<!-- update_center:web -->\n<h2>Language-Specific Properties</h2>\n<p>You can discover and update HTML-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in:  <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=html\">Administration > General Settings > HTML</a></strong>.</p>\n<h2>PHP Code Analysis</h2>\n<p>SonarPHP and SonarHTML both analyze files with extensions: <code>.php</code>, <code>.php3</code>, <code>.php4</code>, <code>.php5</code>, <code>.phtml</code>.</p>\n<p>File metrics, such as the number of lines of code, can only be measured by one of the languages, PHP or HTML. They are handled by SonarPHP by default, and by SonarHTML if for some reason SonarPHP is not present.</p>\n<p>SonarHTML analyzes PHP files even if the PHP file extensions are not included in the list of file extensions to analyze.</p>","fields":{"slug":"/analysis/languages/html/"}}},{"node":{"html":"<!-- update_center:javascript -->\n<h2>Prerequisites</h2>\n<p>In order to analyze JavaScript code, you need to have Node.js >= 8 installed on the machine running the scan. Set property <code>sonar.nodejs.executable</code> to an absolute path to Node.js executable, if standard <code>node</code> is not available.</p>\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the JavaScript-specific properties in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=javascript\">Administration > General Settings > JavaScript</a></strong></p>\n<h2>Supported Frameworks and Versions</h2>\n<ul>\n<li>ECMAScript 5 / ECMAScript 2015 (ECMAScript 6) / ECMAScript 2016 / ECMAScript 2017</li>\n<li>React JSX</li>\n<li>Vue.js</li>\n<li>Flow</li>\n</ul>\n<h2>Rule Profiles</h2>\n<p>There are 2 built-in rule profiles for JavaScript: <code>Sonar way</code> (default) and <code>Sonar way Recommended</code>.</p>\n<ul>\n<li><code>Sonar way</code> profile is activated by default. It defines a trimmed list of high-value/low-noise rules useful in almost any JS development context.</li>\n<li><code>Sonar way Recommended</code> contains all rules from <code>Sonar way</code>, plus more rules that mandate high code readability and long-term project evolution.</li>\n</ul>\n<h2>Custom rules</h2>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>This feature is deprecated</p></div></div>\n<h3>Overview</h3>\n<p>The JavaScript Analyzer parses the source code, creates an Abstract Syntax Tree (AST) and then walks through the entire tree. A coding rule is a visitor that is able to visit nodes from this AST.</p>\n<p>As soon as the coding rule visits a node, it can navigate the tree around the node and log issues if necessary.</p>\n<h3>Create SonarQube Plugin</h3>\n<p>Custom rules for JavaScript can be added by writing a SonarQube Plugin and using JavaScript analyzer APIs.</p>\n<p>To get started a sample plugin can be found here: <a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/tree/master/javascript-custom-rules\">javascript-custom-rules</a>.\nHere are the step to follow:</p>\n<ul>\n<li>Create a standard SonarQube plugin project</li>\n<li>\n<p>Attach this plugin to the SonarQube JavaScript analyzer through the <code>pom.xml</code>:</p>\n<ul>\n<li>Add the dependency to the JavaScript analyzer.</li>\n<li>\n<p>Add the following line in the sonar-packaging-maven-plugin configuration.</p>\n<pre><code>&#x3C;basePlugin>javascript&#x3C;/basePlugin>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Implement the following extension points:</p>\n<ul>\n<li><a href=\"http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/Plugin.html\">Plugin</a></li>\n<li><a href=\"http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/server/rule/RulesDefinition.html\">RulesDefinition</a> </li>\n<li><code>CustomRuleRepository</code>, this interface registers rule classes with JavaScript plugin, so they are invoked during analysis of JavaScript files.</li>\n</ul>\n</li>\n<li>Declare <code>RulesDefinition</code> as an extension in the <code>Plugin</code> extension point.</li>\n</ul>\n<p>You can implement both <code>RulesDefinition</code> and <code>CustomRulesRepository</code> in a single class.</p>\n<h3>Implement a Rule</h3>\n<ul>\n<li>\n<p>Create a class that will hold the implementation of the rule. It should:</p>\n<ul>\n<li>Extend <code>DoubleDispatchVisitorCheck</code> or <code>SubscriptionVisitorCheck</code></li>\n<li>Define the rule name, key, tags, etc. with Java annotations.</li>\n</ul>\n</li>\n<li>Declare this class in the <code>RulesDefinition</code>.</li>\n</ul>\n<h3>Implementation Details</h3>\n<h4>Using DoubleDispatchVisitorCheck</h4>\n<p><code>DoubleDispatchVisitorCheck</code> extends <code>DoubleDispatchVisitor</code> which provide a set of methods to visit specific tree nodes (these methods' names start with <code>visit</code>). To explore a part of the AST, override the required method(s). For example, if you want to explore <code>if</code> statement nodes, override the <code>DoubleDispatchVisitor#visitIfStatement</code> method that will be called each time an <code>IfStatementTree</code> node is encountered in the AST.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>When overriding a visit method, you must call the <code>super</code> method in order to allow the visitor to visit the rest of the tree.</p></div></div>\n<h4>Using SubscriptionVisitorCheck</h4>\n<p><code>SubscriptionVisitorCheck</code> extends <code>SubscriptionVisitor</code>. To explore a part of the AST, override <code>SubscribtionVisitor#nodesToVisit()</code> by returning the list of the <code>Tree#Kind</code> of node you want to visit. For example, if you want to explore <code>if</code> statement nodes the method will return a list containing the element <code>Tree#Kind#IF_STATEMENT</code>.</p>\n<h4>Create issues</h4>\n<p>Use these methods to log an issue:</p>\n<ul>\n<li><code>JavaScriptCheck#addIssue(tree, message)</code> creates and returns an instance of <code>PreciseIssue</code>. In the SonarQube UI this issue will highlight all code corresponding to the tree passed as the first parameter. To add cost (effort to fix) or secondary locations provide these values to your just-created instance of <code>PreciseIssue</code>.</li>\n<li><code>JavaScriptCheck#addIssue(issue)</code> creates and returns the instance of <code>Issue</code>. Use this method to create non-standard issues (e.g. for a file-level issue instantiate <code>FileIssue</code>).</li>\n</ul>\n<h4>Check context</h4>\n<p>Check context is provided by <code>DoubleDispatchVisitorCheck</code> or <code>SubscriptionVisitorCheck</code> by calling the <code>JavaScriptCheck#getContext</code> method. Check context provides you access to the root tree of the file, the file itself and the symbol model (information about variables).</p>\n<h4>Test rule</h4>\n<p>To test the rule you can use <code>JavaScriptCheckVerifier#verify()</code> or <code>JavaScriptCheckVerifier#issues()</code>. To be able to use these methods add a dependency to your project:</p>\n<pre><code>&#x3C;dependency>\n  &#x3C;groupId>org.sonarsource.javascript&#x3C;/groupId>\n  &#x3C;artifactId>javascript-checks-testkit&#x3C;/artifactId>\n  &#x3C;version>XXX&#x3C;/version>\n  &#x3C;scope>test&#x3C;/scope>\n&#x3C;/dependency>\n</code></pre>\n<h3>API Changes</h3>\n<h4>SonarJS 4.2.1</h4>\n<ul>\n<li><code>CustomJavaScriptRulesDefinition</code> is deprecated. Implement extension <code>RulesDefinition</code> and <code>CustomRuleRepository</code> instead.</li>\n</ul>\n<h4>SonarJS 4.0</h4>\n<ul>\n<li>Method <code>TreeVisitorContext#getFile()</code> is removed.</li>\n</ul>\n<h2>Related Pages</h2>\n<ul>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (LCOV format)</p>\n</li>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (ESLint)</p>\n</li>\n<li>\n<p><a href=\"https://github.com/SonarSource/eslint-plugin-sonarjs\">SonarJS Plugin for ESLint</a></p>\n</li>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/extend/adding-coding-rules/\">Adding Coding Rules</a></p>\n</li>\n</ul>","fields":{"slug":"/analysis/languages/javascript/"}}},{"node":{"html":"<!-- update_center:kotlin -->\n<h2>Language-Specific Properties</h2>\n<p>You can discover and update Kotlin-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in:  <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=kotlin\">Administration > General Settings > Kotlin</a></strong>.</p>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (AndroidLint and Detekt)</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (JaCoCo)</li>\n</ul>","fields":{"slug":"/analysis/languages/kotlin/"}}},{"node":{"html":"<p>SonarQube allows to analyze different languages depending on the Edition you are running.</p>\n<table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Community Edition</th>\n<th>Developer Edition</th>\n<th>Enterprise Edition and Data Center Edtion</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/abap/\">ABAP</a></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/apex/\">Apex</a></td>\n<td></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/csharp/\">C#</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/cfamily/\">C</a></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/cfamily/\">C++</a></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/cobol/\">COBOL</a></td>\n<td></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/css/\">CSS</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/flex/\">Flex</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/go/\">Go</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/java/\">Java</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/javascript/\">JavaScript</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/kotlin/\">Kotlin</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/cfamily/\">Objective-C</a></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/php/\">PHP</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/pli/\">PLI</a></td>\n<td></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/plsql/\">PLSQL</a></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/python/\">Python</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/rpg/\">RPG</a></td>\n<td></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/ruby/\">Ruby</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/scala/\">Scala</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/swift/\">Swift</a></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/typescript/\">TypeScript</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/tsql/\">TSQL</a></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/vbnet/\">VB.NET</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/vb6/\">VB6</a></td>\n<td></td>\n<td></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/html/\">HTML</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n<tr>\n<td><a href=\"/SonarQubeChineseDoc8.1/analysis/languages/xml/\">XML</a></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n<td><img src=\"/images/check.svg\"></td>\n</tr>\n</tbody>\n</table>\n<p>In this section you will find the documentation related to language analyzers made and supported by SonarSource.</p>","fields":{"slug":"/analysis/languages/overview/"}}},{"node":{"html":"<!-- update_center:php -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the PHP-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=php\">Administration > General Settings > PHP</a></strong></p>\n<h2>Analyze php.ini Files</h2>\n<p>The PHP analyzer can analyze <code>php.ini</code> files with some specific rules (if these rules are activated in your quality profile). <code>php.ini</code> files must be part of the project you are analyzing, meaning the <code>php.ini</code> files have to be inside the directories listed in <code>sonar.sources</code>.\nRules targeting <code>php.ini</code> files can be quickly identified through the <a href=\"https://rules.sonarsource.com/php/tag/php-ini\">\"php-ini\"</a> tag set on them.</p>\n<h2>Custom Rules</h2>\n<h3>Overview</h3>\n<p>The PHP analyzer parses the source code, creates an Abstract Syntax Tree (AST) and then walks through the entire tree. A coding rule is a visitor that is able to visit nodes from this AST.</p>\n<p>As soon as the coding rule visits a node, it can navigate its children and log issues if necessary.</p>\n<h3>Example Plugin</h3>\n<p>To get started a sample plugin can be found here: <a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/tree/master/php-custom-rules\">php-custom-rules</a>.</p>\n<h3>Writing a Plugin</h3>\n<p>Custom rules for PHP can be added by writing a SonarQube Plugin and using PHP analyzer APIs.\nHere are the step to follow:</p>\n<h4>Create SonarQube Plugin</h4>\n<ul>\n<li>create a standard SonarQube plugin project</li>\n<li>\n<p>attach this plugin to the SonarQube PHP analyzer through the <code>pom.xml</code>:</p>\n<ul>\n<li>add the dependency to the PHP analyzer.</li>\n<li>\n<p>add the following line in the sonar-packaging-maven-plugin configuration.</p>\n<pre><code>&#x3C;basePlugin>php&#x3C;/basePlugin>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>implement the following extension points:</p>\n<ul>\n<li><a href=\"http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/Plugin.html\">Plugin</a></li>\n<li><a href=\"http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/server/rule/RulesDefinition.html\">RulesDefinition</a> and <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/PHPCustomRuleRepository.java\">PHPCustomRuleRepository</a>, which can be implemented by a single class, to declare your custom rules</li>\n</ul>\n</li>\n<li>declare the RulesDefinition as an extension in the Plugin extension point.</li>\n</ul>\n<h4>Implement a Rule</h4>\n<ul>\n<li>\n<p>create a class that will hold the implementation of the rule, it should:</p>\n<ul>\n<li>extend <code>PHPVisitorCheck</code> or <code>PHPSubscriptionCheck</code></li>\n<li>define the rule name, key, tags, etc. with Java annotations.</li>\n</ul>\n</li>\n<li>declare this class in the <code>RulesDefinition</code>.</li>\n</ul>\n<h4>Implementation Details</h4>\n<p><strong>Using <code>PHPVisitorCheck</code></strong></p>\n<p>To explore a part of the AST, override a method from the PHPVisitorCheck. For example, if you want to explore \"if statement\" nodes, override <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/PHPVisitorCheck.java#L265\">PHPVisitorCheck#visitIfStatement</a> method that will be called each time an <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/IfStatementTree.java\">ifStatementTree</a> node is encountered in the AST.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node.</p></div></div>\n<p><strong>Using <code>PHPSubscriptionCheck</code></strong></p>\n<p>To explore a part of the AST, override <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/PHPSubscriptionCheck.java#L33\"><code>PHPSubscriptionCheck#nodesToVisit</code></a> by returning the list of the <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/Tree.java#L124\"><code>Tree#Kind</code></a> of node you want to visit. For example, if you want to explore \"if statement\" nodes the method will return a list containing the element <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/Tree.java#L761\"><code>Tree#Kind#IF_STATEMENT</code></a>.</p>\n<p><strong>Create Issues</strong></p>\n<p>From the check, issue can be created by calling <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/CheckContext.java#L90\"><code>CheckContext#newIssue</code></a> method.</p>\n<p><strong>Testing Checks</strong></p>\n<p>To test custom checks you can use method <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/tests/PHPCheckVerifier.java#L55\"><code>PHPCheckVerifier#verify</code></a>. You should end each line with an issue with a comment in the following form:</p>\n<pre><code>// Noncompliant {{Message}}\n</code></pre>\n<p>Comment syntax is described <a href=\"https://github.com/SonarSource/sonar-analyzer-commons/blob/master/test-commons/README.md\">here</a>.</p>\n<h2>Related Pages</h2>\n<ul>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a></p>\n</li>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/extend/adding-coding-rules/\">Adding Coding Rules</a></p>\n</li>\n</ul>","fields":{"slug":"/analysis/languages/php/"}}},{"node":{"html":"<!-- update_center:plsql -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the PL/SQL-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in:  <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=pl%2Fsql\">Administration > General Settings > PL/SQL</a></strong></p>\n<h2>Advanced parameters</h2>\n<h3>Default Schema</h3>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.plsql.defaultSchema</code></td>\n<td>When a schema object (table, view, index, synonym) is referenced in SQL code without a schema prefix, the analyzer will assume that it belongs to this schema.</td>\n</tr>\n</tbody>\n</table>\n<h3>Data Dictionary</h3>\n<p>Some rules raise issues only when a data dictionary is provided during analysis. To provide a data dictionary, you must define the following properties in the <code>sonar-project.properties</code> file or on the scanner command line using the  <code>-D</code> prefix:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sonar.plsql.jdbc.url</code></td>\n<td>URL of the JDBC connection. <strong>Required for data dictionary lookup</strong>. For example: <code>jdbc:oracle:thin:@my-oracle-server:1521/my-db</code></td>\n</tr>\n<tr>\n<td><code>sonar.plsql.jdbc.user</code></td>\n<td>JDBC user to authenticate the connection.</td>\n</tr>\n<tr>\n<td><code>sonar.plsql.jdbc.password</code></td>\n<td>JDBC password provided to authenticate the connection.</td>\n</tr>\n<tr>\n<td><code>sonar.plsql.jdbc.driver.path</code></td>\n<td>Path or URL of the Oracle jdbc driver jar.</td>\n</tr>\n<tr>\n<td><code>sonar.plsql.jdbc.driver.class</code></td>\n<td>Java class name of the Oracle Driver. For example: <code>oracle.jdbc.OracleDriver</code></td>\n</tr>\n</tbody>\n</table>\n<p>Providing this configuration allows SonarPLSQL to query data dictionary views such as <code>SYS.ALL_TAB_COLUMNS</code> in order to to better analyze your SQL.</p>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/extend/adding-coding-rules/\">Adding Coding Rules</a></li>\n</ul>","fields":{"slug":"/analysis/languages/plsql/"}}},{"node":{"html":"<!-- update_center:python -->\n<h2>Supported Versions</h2>\n<ul>\n<li>Python 3.X</li>\n<li>Python 2.X</li>\n</ul>\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the Python-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in:  <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=python\">Administration > General Settings > Python</a></strong>.</p>\n<h2>Pylint</h2>\n<p><a href=\"http://www.pylint.org/\">Pylint</a> is an external static source code analyzer, it can be used in conjunction with SonarPython.</p>\n<p>You can enable Pylint rules directly in your Python Quality Profile. Their rule keys start with \"<em>Pylint:</em>\".</p>\n<p>Once the rules are activated you should run Pylint and import its report:</p>\n<pre><code>pylint &#x3C;module_or_package> -r n --msg-template=\"{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}\" > &#x3C;report_file>\n</code></pre>\n<p>Then pass the generated report path to analysis via the <code>sonar.python.pylint.reportPath</code> property.</p>\n<h2>Custom Rules</h2>\n<h3>Overview</h3>\n<p>The Python analyzer parses the source code, creates an Abstract Syntax Tree (AST) and then walks through the entire tree. A coding rule is a visitor that is able to visit nodes from this AST.</p>\n<p>As soon as the coding rule visits a node, it can navigate its children and log issues if necessary.</p>\n<h3>Writing a Plugin</h3>\n<p>Custom rules for Python can be added by writing a SonarQube Plugin and using Python analyzer APIs.\nHere are the step to follow:</p>\n<h4>Create SonarQube Plugin</h4>\n<ul>\n<li>create a standard SonarQube plugin project</li>\n<li>\n<p>attach this plugin to the SonarQube Python analyzer through the <code>pom.xml</code>:</p>\n<ul>\n<li>add the dependency to the Python analyzer.</li>\n<li>\n<p>add the following line in the sonar-packaging-maven-plugin configuration.</p>\n<pre><code>&#x3C;requirePlugins>python:2.0-SNAPSHOT&#x3C;/requirePlugin>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>implement the following extension points:</p>\n<ul>\n<li><a href=\"http://javadocs.sonarsource.org/latest/apidocs/org/sonar/api/Plugin.html\">Plugin</a></li>\n<li><a href=\"http://javadocs.sonarsource.org/latest/apidocs/org/sonar/api/server/rule/RulesDefinition.html\">RulesDefinition</a> and <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/PythonCustomRuleRepository.java\">PythonCustomRuleRepository</a>, which can be implemented by a single class, to declare your custom rules</li>\n</ul>\n</li>\n<li>declare the RulesDefinition as an extension in the Plugin extension point.</li>\n</ul>\n<h4>Implement a Rule</h4>\n<ul>\n<li>\n<p>create a class that will hold the implementation of the rule, it should:</p>\n<ul>\n<li>extend <code>PythonCheckTree</code> or <code>PythonSubscriptionCheck</code></li>\n<li>define the rule name, key, tags, etc. with Java annotations.</li>\n</ul>\n</li>\n<li>declare this class in the <code>RulesDefinition</code>.</li>\n</ul>\n<h3>Example Plugin</h3>\n<p>To get started a sample plugin can be found here: <a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/tree/master/python-custom-rules\">python-custom-rules</a>.</p>\n<h4>Implementation Details</h4>\n<p><strong>Using <code>PythonCheckTree</code></strong></p>\n<p>To explore a part of the AST, override a method from the PythonCheckTree. For example, if you want to explore \"if statement\" nodes, override <a href=\"https://github.com/SonarSource/sonar-python/blob/39b6126e9fdef42b93004cf6cc5818e861051334/python-frontend/src/main/java/org/sonar/plugins/python/api/tree/BaseTreeVisitor.java#L56\">PythonCheckTree#visitIfStatement</a> method that will be called each time an <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/tree/IfStatement.java\">ifStatement</a> node is encountered in the AST.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node.</p></div></div>\n<p><strong>Using <code>PythonSubscriptionCheck</code></strong></p>\n<p>To explore a part of the AST, override <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/SubscriptionCheck.java#L26\"><code>PythonSubscriptionCheck#initialize</code></a> and call the <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/SubscriptionCheck.java\"><code>SubscriptionCheck.Context#registerSyntaxNodeConsumer</code></a> with the <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/tree/Tree.java#L42\"><code>Tree#Kind</code></a> of node you want to visit. For example, if you want to explore \"if statement\" you should register to the kind <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/tree/Tree.java#L97\"><code>Tree#Kind#IF_STATEMENT</code></a> and then provide a lambda that will consume a <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/SubscriptionContext.java#L27\"><code>SubscriptionContext</code></a> to act on such ndoes.</p>\n<p><strong>Create Issues</strong></p>\n<p>From the check, issue can be created by calling <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/SubscriptionContext.java#L30\"><code>SubscriptionContext#addIssue</code></a> method or  <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/PythonCheckTree.java#L36\"><code>PythonCheckTree#addIssue</code></a> method.</p>\n<p><strong>Testing Checks</strong></p>\n<p>To test custom checks you can use method <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-checks-testkit/src/main/java/org/sonar/python/checks/utils/PythonCheckVerifier.java\"><code>PythonCheckVerifier#verify</code></a>. Don't forget to add the testkit dependency to access this class from your project : </p>\n<pre><code>  &#x3C;dependency>\n      &#x3C;groupId>org.sonarsource.python&#x3C;/groupId>\n      &#x3C;artifactId>python-checks-testkit&#x3C;/artifactId>\n      &#x3C;version>${project.version}&#x3C;/version>\n      &#x3C;scope>test&#x3C;/scope>\n  &#x3C;/dependency>\n</code></pre>\n<p>You should end each line with an issue with a comment in the following form:</p>\n<pre><code># Noncompliant {{Message}}\n</code></pre>\n<p>Comment syntax is described <a href=\"https://github.com/SonarSource/sonar-analyzer-commons/blob/master/test-commons/README.md\">here</a>.</p>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (<a href=\"http://www.pylint.org/\">Pylint</a>, <a href=\"https://github.com/PyCQA/bandit/blob/master/README.rst\">Bandit</a>)</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (the <a href=\"http://nedbatchelder.com/code/coverage/\">Coverage Tool</a> provided by <a href=\"http://nedbatchelder.com/\">Ned Batchelder</a>, <a href=\"https://nose.readthedocs.org/en/latest/\">Nose</a>, <a href=\"https://docs.pytest.org/en/latest/\">pytest</a>)</li>\n</ul>","fields":{"slug":"/analysis/languages/python/"}}},{"node":{"html":"<p><em>PL/I is available as part of <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">Enterprise Edition</a> and <a href=\"https://redirect.sonarsource.com/editions/editions.html\">above</a>.</em></p>\n<!-- update_center:pli -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the PL/I-specific properties in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=pl%2Fi\">Administration > General Settings > PL/I</a></strong></p>\n<h2>Source Code Extraction</h2>\n<p>In order to analyze your source code with SonarQube you need to first extract it onto a filesystem. You can use your own tool or an open source tool; SonarSource does not provide any connectors or source code extraction tools.</p>\n<h2>Dealing with Includes</h2>\n<p>There are two possible ways to tell SonarQube where to retrieve the source code referenced by an %INCLUDE statement.</p>\n<p>The following syntaxes are supported:</p>\n<pre><code>%INCLUDE 'C:/temp/myLib.pli'\n%INCLUDE ddname(member);\n%INCLUDE member; /* With member not enclosed within single or double quotes, i.e. a SYSLIB member */\n</code></pre>\n<p>Example:</p>\n<p>If you want to interpret:</p>\n<pre><code>%INCLUDE O (XX02511) as %INCLUDE 'C:/temp/o/XX02511.99IPO';\n%INCLUDE lib1 as %INCLUDE 'C:/temp/syslib/lib1.pli';\n</code></pre>\n<p>the Ddnames are defined as:</p>\n<pre><code>sonar.pli.includeDdnames=O,SYSLIB\n\nsonar.pli.includeDdname.O.path=c:/temp/o\nsonar.pli.includeDdname.O.suffix=.99IPO\n\nsonar.pli.includeDdname.SYSLIB.path=c:/temp/syslib\nsonar.pli.includeDdname.SYSLIB.suffix=.pli\n</code></pre>\n<p>Note that the following constructs, involving at least two members, are currently not supported:</p>\n<pre><code>%INCLUDE member1, member2;\n%INCLUDE ddname1(member1), member2;\n%INCLUDE member1, ddname1(member2);\n%INCLUDE ddname1(member1), ddname2(member2);\n</code></pre>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/extend/adding-coding-rules/\">Adding Coding Rules</a></li>\n</ul>","fields":{"slug":"/analysis/languages/pli/"}}},{"node":{"html":"<!-- update_center:ruby -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the Ruby-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in:  <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=ruby\">Administration > General Settings > Ruby</a></strong></p>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (Rubocop)</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (SimpleCov)</li>\n</ul>","fields":{"slug":"/analysis/languages/ruby/"}}},{"node":{"html":"<p><em>RPG is available as part of <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">Enterprise Edition</a> and <a href=\"https://redirect.sonarsource.com/editions/editions.html\">above</a>.</em></p>\n<!-- update_center:rpg -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the RPG-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=rpg\">Administration > General Settings > RPG</a></strong></p>\n<h2>Source Code Extraction</h2>\n<p>In order to analyze your source code with SonarQube you need to first extract it onto a filesystem. You can use your own tool or an open source tool; SonarSource does not provide any connectors or source code extraction tools.</p>\n<h2>RPG Source Format</h2>\n<p>Depending on your extraction process, your RPG source files may include an extra margin on the left of the 80 columns used for code. This margin is in addition to the standard margin which takes up characters 1-5 in the 80-character source format. The extra margin is controlled through the <code>sonar.rpg.leftMarginWidth</code> property. By default, it is set to 12, which is the size of the margin in an IBM “source physical file”. If your RPG source files do not contain such a margin, you should set <code>sonar.rpg.leftMarginWidth</code> to <code>0</code>.</p>\n<p>You can find an <a href=\"https://raw.githubusercontent.com/SonarSource/sonar-scanning-examples/master/sonarqube-scanner/src/rpg/MYPROGRAM.rpg\">example file</a> illustrating a 12-character margin in our sample project.</p>\n<p>You should also make sure to set <code>sonar.sourceEncoding</code> to the appropriate encoding. Please check the <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">documentation of this property</a>.</p>\n<h2>Free-Form Support</h2>\n<p>Free-form is supported for C-specs and SQL statements. Free-form is not yet supported for H, F, D and P specs (which were <a href=\"http://www-01.ibm.com/support/knowledgecenter/ssw_ibm_i_72/rzasd/rpgrelv7r2.htm\">added in IBM i 7.2</a>).</p>\n<h2>Custom Rules for RPG</h2>\n<p>To get started you can <a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/tree/master/rpg-custom-rules\">browse</a> or <a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/archive/master.zip\">download</a> a simple plugin.</p>\n<h3>Pre-requisites</h3>\n<ul>\n<li>JDK 8</li>\n<li>SonarRPG 2.0+</li>\n</ul>\n<h3>Creating a Maven Project</h3>\n<p>You should first create a Maven project: re-using the <a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/blob/master/rpg-custom-rules/pom.xml\">pom.xml from the RPG example</a> is a good start.</p>\n<p>The following dependencies need to be defined in the pom.xml:</p>\n<ul>\n<li><code>sonar-plugin-api</code> to get access to SonarQube APIs</li>\n<li><code>sonar-rpg-plugin</code> to use the APIs of the RPG plugin</li>\n</ul>\n<h3>Writing a Custom Rule</h3>\n<p>Each rule needs to be defined in a class which:</p>\n<ul>\n<li>Implements <a href=\"http://javadocs.sonarsource.org/rpg/apidocs/2.3/index.html?com/sonarsource/rpg/api/checks/Check.html\"><code>com.sonarsource.rpg.api.checks.Check</code></a>. Instead of implementing this interface directly, the class can also extend <a href=\"http://javadocs.sonarsource.org/rpg/apidocs/2.3/index.html?com/sonarsource/rpg/api/checks/Check.html?com/sonarsource/rpg/api/checks/VisitorBasedCheck.html\"><code>VisitorBasedCheck</code></a> which makes it easier to target some specific parts of the analyzed source code.</li>\n<li>Has an <code>org.sonar.check.Rule</code> annotation to define the key of the rule.</li>\n</ul>\n<h4>Navigating the Syntax Tree</h4>\n<p>The analyzed source code is represented as a tree structure. The top-most tree is an instance of <a href=\"http://javadocs.sonarsource.org/rpg/apidocs/2.3/index.html?com/sonarsource/rpg/api/checks/Check.html?com/sonarsource/rpg/api/tree/ModuleTree.html\"><code>ModuleTree</code></a> which has references to other trees. Some of the trees represent a group of RPG calculations (for example, an <code>IF</code> group is represented as a tree which references the calculations which are executed when the condition is true), some others represent expressions such as <code>a + b</code>.</p>\n<p>The instance of <a href=\"http://javadocs.sonarsource.org/rpg/apidocs/2.3/index.html?com/sonarsource/rpg/api/checks/Check.html?com/sonarsource/rpg/api/checks/CheckContext.html\"><code>CheckContext</code></a> which is passed to the checks gives a reference to the <code>ModuleTree</code> of the analyzed source code. The whole tree structure can be navigated from that object.</p>\n<p>Most often, it's easier to extend <code>VisitorBasedCheck</code> and to override one or more methods which name starts with visit, e.g. <code>visitIfGroup</code>. That way, it's possible to define what should be executed when visiting some specific kinds of trees.</p>\n<h4>Creating Issues</h4>\n<p><a href=\"http://javadocs.sonarsource.org/rpg/apidocs/2.3/index.html?com/sonarsource/rpg/api/checks/Check.html?com/sonarsource/rpg/api/checks/CheckContext.html\"><code>CheckContext</code></a> provides methods to create issues either at file level or at line level.</p>\n<h4>Testing the Rule</h4>\n<p>It's possible to write unit tests for custom rules using <code>com.sonarsource.rpg.api.test.RpgCheckVerifier</code>. This utility class executes a custom rule against a given RPG test file. The RPG test file should contain comments denoting lines where issues should be expected:</p>\n<ul>\n<li>if the line ends with \"// Noncompliant\", <code>RpgCheckVerifier</code> expects an issue on that line.</li>\n<li>if the line ends with \"// Noncompliant {{my message}}\", <code>RpgCheckVerifier</code> expects an issue on that line and checks that the issue message is \"my message\".</li>\n</ul>\n<p>The example project contains an <a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/blob/master/rpg-custom-rules/src/test/java/com/sonarsource/rpg/example/checks/DataStructureNamingConventionCheckTest.java\">example test class</a> and the <a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/blob/master/rpg-custom-rules/src/test/resources/data-structure-name.rpg\">associated RPG file</a>.</p>\n<h3>Rules Definition</h3>\n<p>One class should extend <a href=\"http://javadocs.sonarsource.org/rpg/apidocs/2.3/index.html?com/sonarsource/rpg/api/checks/Check.html?com/sonarsource/rpg/api/CustomRulesDefinition.html\"><code>com.sonarsource.rpg.api.CustomRulesDefinition</code></a>: it should list the classes of the custom rules and use the SonarQube API to define the metadata of these rules: name, HTML description, default severity...</p>\n<h3>Plugin Class</h3>\n<p>The entry point of the custom plugin is a class which lists SonarQube extensions. This list should contain the class created at the previous step.</p>\n<h3>Packaging the Custom Plugin</h3>\n<p>To package your custom plugin, the pom.xml should use <code>org.sonarsource.sonar-packaging-maven-plugin</code>, as described in the <a href=\"/SonarQubeChineseDoc8.1/extend/developing-plugin/\">documentation explaining how to build a plugin</a>.</p>\n<p>In the configuration for <code>sonar-packaging-maven-plugin</code>, basePlugin should be set to \"rpg\".</p>\n<p>Building the Maven project will produce a JAR file which can be deployed to a SonarQube server.</p>","fields":{"slug":"/analysis/languages/rpg/"}}},{"node":{"html":"<!-- update_center:sonarscala -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the Scala-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in:  <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=scala\">Administration > General Settings > Scala</a></strong>.</p>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (Scalastyle or Scapegoat)</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (Scoverage)</li>\n</ul>","fields":{"slug":"/analysis/languages/scala/"}}},{"node":{"html":"<!-- update_center:swift -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the Swift-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in:  <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=swift\">Administration > General Settings > Swift</a></strong>.</p>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (Xcode A.K.A. ProfData)</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (SwiftLint)</li>\n</ul>","fields":{"slug":"/analysis/languages/swift/"}}},{"node":{"html":"<!-- update_center:tsql -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the T-SQL-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in:  <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=t-sql\">Administration > General Settings > T-SQL</a></strong>.</p>\n<h2>Important Note</h2>\n<p>With the default configuration, only files with the <code>.tsql</code> are analyzed as T-SQL, and files with the <code>.sql</code> file extension are analyzed as PL/SQL. This behavior is defined in <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=t-sql\">Administration > General Settings > T-SQL > File Suffixes</a></strong> and <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=pl%2Fsql\">Administration > General Settings > PL/SQL > File Suffixes</a></strong>. You can override these properties either at server level or at project level.</p>","fields":{"slug":"/analysis/languages/tsql/"}}},{"node":{"html":"<!-- update_center:vbnet -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the VB.NET-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in:  <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=vb.net\">Administration > General Settings > VB.NET</a></strong></p>\n<h3>Analyze Generated Code</h3>\n<p>To analyze tool-generated code (e.g. WCF code generated by <code>SvcUtil.exe</code>) for a specific VB.NET project, enable the \"Analyze generated code\" setting inside <strong>Project > Administration > General Settings > VB.NET</strong>. By default, tool-generated code files are skipped from analysis.</p>\n<h2>Known Limitations</h2>\n<p>Currently an error will be thrown when an issue is raised on a line of code containing the following pattern <code>\\s+error\\s*:</code> (i.e. one or more spaces, the string 'error', zero or more spaces and a ':' ) . This is a well known problem on the Microsoft side (see <a href=\"https://github.com/dotnet/roslyn/issues/5724/\">issue</a>). In order to work around this problem, our analyzer will skip issues reported on any line where the pattern is detected.</p>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (VSTest, NUnit, MSTest, xUnit)</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (Visual Studio Code Coverage, dotCover, OpenCover, NCover 3)</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-msbuild/\">SonarScanner for MSBuild</a></li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-azure-devops/\">SonarScanner for Azure DevOps</a></li>\n</ul>","fields":{"slug":"/analysis/languages/vbnet/"}}},{"node":{"html":"<!-- update_center:typescript -->\n<h2>Prerequisites</h2>\n<p>In order to analyze TypeScript code, you need to have Node.js >= 8 installed on the machine running the scan. Set property <code>sonar.typescript.node</code> to an absolute path to Node.js executable, if standard <code>node</code> is not available.</p>\n<p>Also make sure to have <a href=\"https://www.npmjs.com/package/typescript\">TypeScript</a> as a project dependency or dev dependency. If it's not the case, add it:</p>\n<pre><code>cd &#x3C;your-project-folder>\nnpm install -D typescript\n</code></pre>\n<p>If you can't have TypeScript as a project dependency you can set your <code>NODE_PATH</code> variable to point to your globally installed TypeScript (but this is generally discouraged by the Node.js documentation).</p>\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the TypeScript-specific properties in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=typescript\">Administration > General Settings > TypeScript</a></strong></p>\n<h2>Supported Frameworks and Versions</h2>\n<ul>\n<li>TypeScript >= 2.2</li>\n</ul>\n<h2>Rule Profiles</h2>\n<p>There are 2 built-in rule profiles for TypeScript: <code>Sonar way</code> (default) and <code>Sonar way Recommended</code>.</p>\n<ul>\n<li><code>Sonar way</code> profile is activated by default. It defines a trimmed list of high-value/low-noise rules useful in almost any TS development context.</li>\n<li><code>Sonar way Recommended</code> contains all rules from <code>Sonar way</code>, plus more rules that mandate high code readability and long-term project evolution.</li>\n</ul>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (LCOV format)</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (TSLint)</li>\n<li><a href=\"https://www.npmjs.com/package/tslint-sonarts\">SonarTS Plugin for TSLint</a></li>\n<li><a href=\"https://github.com/SonarSource/SonarTS-example/\">Sample TypeScript Project</a></li>\n</ul>","fields":{"slug":"/analysis/languages/typescript/"}}},{"node":{"html":"<p><em>VB6 analysis is available as part of the <a href=\"https://redirect.sonarsource.com/editions/enterprise.html\">Enterprise Edition</a> and <a href=\"https://redirect.sonarsource.com/editions/editions.html\">above</a>.</em></p>\n<!-- update_center:vb -->\n<h2>Language-Specific Properties</h2>\n<p>You can discover and update VB6-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=visual+basic\">Administration > General Settings > Visual Basic</a></strong>.</p>","fields":{"slug":"/analysis/languages/vb6/"}}},{"node":{"html":"<!-- update_center:xml -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the XML-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=xml\">Administration > General Settings > XML</a></strong></p>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/extend/adding-coding-rules/\">Adding Coding Rules</a></li>\n</ul>","fields":{"slug":"/analysis/languages/xml/"}}}]},"markdownRemark":{"html":"<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p><strong>Download SonarScanner for MSBuild 4.7.1.2311</strong> - Compatible with SonarQube 6.7+ (LTS)<br>\nBy <a href=\"https://www.sonarsource.com/\">SonarSource</a> – GNU LGPL 3 – <a href=\"https://github.com/SonarSource/sonar-scanner-msbuild/issues\">Issue Tracker</a> – <a href=\"https://github.com/SonarSource/sonar-scanner-msbuild\">Source</a></p><p><a href=\"https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/4.7.1.2311/sonar-scanner-msbuild-4.7.1.2311-net46.zip\">.NET Framework 4.6+</a> |\n<a href=\"https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/4.7.1.2311/sonar-scanner-msbuild-4.7.1.2311-netcoreapp2.0.zip\">.NET Core 2.0+</a> |\n<a href=\"https://www.nuget.org/packages/dotnet-sonarscanner\">.NET Core Global Tool</a></p></div></div>\n<p>The SonarScanner for MSBuild is the recommended way to launch an analysis for projects/solutions using MSBuild or dotnet command as a build tool. It is the result of a <a href=\"http://www.sonarqube.org/announcing-sonarqube-integration-with-msbuild-and-team-build/\">collaboration between SonarSource and Microsoft</a>. </p>\n<p>SonarScanner for MSBuild is distributed as a standalone command line executable, as a extension for <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-azure-devops/\">Azure DevOps Server</a>, and as a plugin for <a href=\"/SonarQubeChineseDoc8.1/analysis/scan/sonarscanner-for-jenkins/\">Jenkins</a>.</p>\n<p>It supports .Net Core multi-platform projects and it can be used on non-Windows platforms.</p>\n<h2>Prerequisites</h2>\n<ul>\n<li>At least the minimal version of Java supported by your SonarQube server</li>\n<li>\n<p>The SDK corresponding to your build system:</p>\n<ul>\n<li><a href=\"https://www.microsoft.com/fr-fr/download/details.aspx?id=53344\">.NET Framework v4.6+</a> - either <a href=\"https://go.microsoft.com/fwlink/?LinkId=615458\">Build Tools for Visual Studio 2015 Update 3</a> or the <a href=\"https://www.visualstudio.com/downloads/\">Build Tools for Visual Studio 2017</a></li>\n<li>.NET Core 2.0 - <a href=\"https://www.microsoft.com/net/learn/get-started/\">.NET Core SDK 2.0</a> (for .NET Core version of the scanner)</li>\n<li>.NET Core 2.1 - <a href=\"https://www.microsoft.com/net/learn/get-started/\">NET Core SDK 2.1.3</a> (for .NET Core version of the scanner or if you plan to use <a href=\"https://www.nuget.org/packages/dotnet-sonarscanner\">.NET Core Global Tool</a></li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<h3>SonarScanner for MSBuild for .NET Framework or .NET Core</h3>\n<ul>\n<li>\n<p>Expand the downloaded file into the directory of your choice. We'll refer to it as <code>$install_directory</code> in the next steps.</p>\n<ul>\n<li>On Windows, you might need to unblock the ZIP file first (Right click on file > Properties > Unblock).</li>\n<li>On Linux/OSX you may need to set execute permissions on the files in <code>$install_directory/sonar-scanner-(version)/bin</code>.</li>\n</ul>\n</li>\n<li>\n<p>Uncomment, and update the global settings to point to your SonarQube server by editing <code>$install_directory/SonarQube.Analysis.xml</code>. Values set in this file will be applied to all analyses of all projects unless overwritten locally.<br>\nConsider setting file system permissions to restrict access to this file.:</p>\n<pre><code>&#x3C;SonarQubeAnalysisProperties  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns=\"http://www.sonarsource.com/msbuild/integration/2015/1\">\n&#x3C;Property Name=\"sonar.host.url\">http://localhost:9000&#x3C;/Property>\n&#x3C;Property Name=\"sonar.login\">[my-user-token]&#x3C;/Property>\n&#x3C;/SonarQubeAnalysisProperties>\n</code></pre>\n</li>\n<li>\n<p>Add <code>$install_directory</code> to your PATH environment variable.</p>\n</li>\n</ul>\n<h3>Installation of the SonarScanner for MSBuild .NET Core Global Tool</h3>\n<pre><code>dotnet tool install --global dotnet-sonarscanner --version 4.7.1\n</code></pre>\n<p>The <em>--version</em> argument is optional. If it is omitted the latest version will be installed.</p>\n<h3>On Linux/OSX, if your SonarQube server is secured:</h3>\n<ol>\n<li>Copy the server's CA certs to <code>/usr/local/share/ca-certificates</code></li>\n<li>Run <code>sudo update-ca-certificates</code></li>\n</ol>\n<h2>Use</h2>\n<p>There are two versions of the SonarScanner for MSBuild.</p>\n<div class=\"custom-block alert alert-info\"><div class=\"custom-block-body\"><p>Since version 4.7.0 of the Scanner, you can invoke it using arguments with both dash (-) or forward-slash (/) separators.\nExample : SonarScanner.MSBuild.exe begin /k:\"project-key\" or SonarScanner.MSBuild.exe begin -k:\"project-key\" will work.</p></div></div>\n<p>The first version is based on the “classic” .NET Framework. To use it, execute the following commands from the root folder of your project:</p>\n<pre><code>SonarScanner.MSBuild.exe begin /k:\"project-key\" \nMSBuild.exe &#x3C;path to solution.sln> /t:Rebuild\nSonarScanner.MSBuild.exe end \n</code></pre>\n<p>Note: On Mac OS or Linux, you can also use <code>mono &#x3C;path to SonarScanner.MSBuild.exe></code>.</p>\n<p>The second version is based on .NET Core which has a very similar usage:</p>\n<pre><code>dotnet &#x3C;path to SonarScanner.MSBuild.dll> begin /k:\"project-key\" \ndotnet build &#x3C;path to solution.sln>\ndotnet &#x3C;path to SonarScanner.MSBuild.dll> end \n</code></pre>\n<p>The .NET Core version can also be used as a .NET Core Global Tool.\nAfter installing the Scanner as a global tool as described above it can be invoked as follows:</p>\n<pre><code>dotnet sonarscanner begin /k:\"project-key\" \ndotnet build &#x3C;path to solution.sln>\ndotnet sonarscanner end \n</code></pre>\n<p>Same as above, if you are targeting a SonarCloud project, will have to add both the organization and a login for authentication.</p>\n<p>Notes:</p>\n<ul>\n<li>The .NET Core version of the scanner does not support TFS XAML builds. Apart from that, the two versions of scanner have the same capabilities and command line arguments.</li>\n<li>Single .NET Core project files (csproj or vbproj) could be built and successfully analyzed only if a <code>&#x3C;ProjectGuid>unique guid&#x3C;/ProjectGuid></code> element is added in the csproj or vbproj XML. The <code>&#x3C;ProjectGuid></code> element is not required if you build a solution (sln) containing that project.</li>\n</ul>\n<h2>Analysis steps</h2>\n<h3>Begin</h3>\n<p>The begin step is executed when you add the <code>begin</code> command line argument. It hooks into the MSBuild pipeline, downloads SonarQube quality profiles and settings and prepares your project for the analysis.</p>\n<p>Command Line Parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>/k:&#x3C;project-key></code></td>\n<td>[required] Specifies the key of the analyzed project in SonarQube</td>\n</tr>\n<tr>\n<td><code>/n:&#x3C;project name></code></td>\n<td>[optional] Specifies the name of the analyzed project in SonarQube. Adding this argument will overwrite the project name in SonarQube if it already exists.</td>\n</tr>\n<tr>\n<td><code>/v:&#x3C;version></code></td>\n<td>[recommended] Specifies the version of your project.</td>\n</tr>\n<tr>\n<td><code>/d:sonar.login=&#x3C;username> or &#x3C;token></code></td>\n<td>[optional] Specifies the username or access token to authenticate with to SonarQube. If this argument is added to the begin step, it must also be added on the end step.</td>\n</tr>\n<tr>\n<td><code>/d:sonar.password=&#x3C;password></code></td>\n<td>[optional] Specifies the password for the SonarQube username in the <code>sonar.login</code> argument. This argument is not needed if you use authentication token. If this argument is added to the begin step, it must also be added on the end step.</td>\n</tr>\n<tr>\n<td><code>/d:sonar.verbose=true</code></td>\n<td>[optional] Sets the logging verbosity to detailed. Add this argument before sending logs for troubleshooting.</td>\n</tr>\n<tr>\n<td><code>/d:&#x3C;analysis-parameter>=&#x3C;value></code></td>\n<td>[optional] Specifies an additional SonarQube <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">analysis parameter</a>, you can add this argument multiple times.</td>\n</tr>\n</tbody>\n</table>\n<p>For detailed information about all available parameters, see <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">Analysis Parameters</a>.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>The \"begin\" step will modify your build like this:</p><ul>\n<li>the active <code>CodeAnalysisRuleSet</code> will be updated to match the SonarQube quality profile</li>\n<li><code>WarningsAsErrors</code> will be turned off</li>\n</ul><p>If your build process cannot tolerate these changes we recommend creating a second build job for SonarQube analysis.</p></div></div>\n<h3>Build</h3>\n<p>Between the <code>begin</code> and <code>end</code> steps, you need to build your project, execute tests and generate code coverage data. This part is specific to your needs and it is not detailed here.</p>\n<h3>End</h3>\n<p>The end step is executed when you add the \"end\" command line argument. It cleans the MSBuild hooks, collects the analysis data generated by the build, the test results, the code coverage and then uploads everything to SonarQube.</p>\n<p>There are only two additional arguments that are allowed for the end step:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>/d:sonar.login=&#x3C;username> or &#x3C;token></code></td>\n<td>[optional] This argument is required if it was added to the begin step.</td>\n</tr>\n<tr>\n<td><code>/d:sonar.password=&#x3C;password></code></td>\n<td>[optional] This argument is required if it was added to the begin step and you are not using an authentication token.</td>\n</tr>\n</tbody>\n</table>\n<h3>Known Limitations</h3>\n<ul>\n<li>MSBuild versions older than 14 are not supported.</li>\n<li>Web Application projects are supported. Legacy Web Site projects are not. </li>\n<li>Projects targeting multiple frameworks and using preprocessor directives could have slightly inaccurate metrics (lines of code, complexity, etc.) because the metrics are calculated only from the first of the built targets.</li>\n</ul>\n<h2>Excluding projects from analysis</h2>\n<p>Some project types, such as <a href=\"https://msdn.microsoft.com/en-us/library/hh549175.aspx\">Microsoft Fakes</a>, are automatically excluded from analysis. To manually exclude a different type of project from the analysis, place the following in its .xxproj file.</p>\n<pre><code>&#x3C;!-- in .csproj -->\n&#x3C;PropertyGroup>\n  &#x3C;!-- Exclude the project from analysis -->\n  &#x3C;SonarQubeExclude>true&#x3C;/SonarQubeExclude>\n&#x3C;/PropertyGroup>\n</code></pre>\n<h2>Advanced topics</h2>\n<p><strong>Analyzing MSBuild 12 projects with MSBuild 14</strong><br>\nThe Sonar Scanner for MSBuild requires your project to be built with MSBuild 14.0. We recommend installing Visual Studio 2015 update 3 or later on the analysis machine in order to benefit from the integration and features provided with the Visual Studio ecosystem (VSTest, MSTest unit tests, etc.).</p>\n<p>Projects targeting older versions of the .NET Framework can be built using MSBuild 14.0 by setting the \"TargetFrameworkVersion\" MSBuild property as documented by Microsoft:</p>\n<ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/bb398202.aspx\">How to: Target a Version of the .NET Framework</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/hh264221.aspx\">MSBuild Target Framework and Target Platform</a></li>\n</ul>\n<p>If you do not want to switch your production build to MSBuild 14.0, you can set up a separate build dedicated to the SonarQube analysis.</p>\n<p><strong>Detection of Test Projects</strong><br>\nSonarQube analyzes test projects differently from non-test projects, so it is important to correctly classify test projects.</p>\n<p>By default, the SonarQube Scanner for MSBuild will detect as test project:</p>\n<p>. MSTest unit test projects, thanks to the presence of a well-known project type GUID in .csproj file of such projects.</p>\n<ol>\n<li>\n<p>Projects with names ending in \"Test\" or \"Tests\". This behavior can be changed by providing the parameter <code>sonar.msbuild.testProjectPattern</code> to the begin step (regex follows .NET Regular Expression in a case-sensitive way with the default value <code>.*Tests?\\.(cs|vb)proj$</code>). This regex is applied against the fullname of the <code>.csproj</code> or <code>.vbproj</code> which is why it's recommended to keep at the end of your custom regex <code>\\.(cs|vb)proj$</code>.\nTo manually classify a project as a test project, mark it with <code>&#x3C;SonarQubeTestProject>true&#x3C;/SonarQubeTestProject></code>:</p>\n<pre><code>&#x3C;!-- in .csproj -->\n&#x3C;PropertyGroup>\n&#x3C;!-- Mark the project as being a test project -->\n&#x3C;SonarQubeTestProject>true&#x3C;/SonarQubeTestProject>\n&#x3C;/PropertyGroup>\n</code></pre>\n</li>\n</ol>\n<p><strong>Per-project analysis parameters</strong>\nSome analysis parameters can be set for a single MSBuild project by adding them to its .csproj file.</p>\n<pre><code>&#x3C;!-- in .csproj -->\n&#x3C;ItemGroup>\n  &#x3C;SonarQubeSetting Include=\"sonar.stylecop.projectFilePath\">\n    &#x3C;Value>$(MSBuildProjectFullPath)&#x3C;/Value>\n  &#x3C;/SonarQubeSetting>\n&#x3C;/ItemGroup>\n</code></pre>\n<p><strong>Concurrent Analyses on the Same Build Machine</strong><br>\nConcurrent analyses (i.e. parallel analysis of two solutions on the same build machine using a unique service account) are not supported by default by the Scanner for MSBuild. You can enable it as follows:</p>\n<ol>\n<li>Locate the folder containing the Scanner for MSBuild</li>\n<li>Go in the <code>Targets</code> folder and copy the folder <code>SonarQube.Integration.ImportBefore.targets</code></li>\n<li>\n<p>Paste it under your build tool global <code>ImportBefore</code> folder (if the folder doesn't exist, create it).</p>\n<ul>\n<li>\n<p>For MSBuild, the path is <code>&#x3C;MSBUILD_INSTALL_DIR>\\&#x3C;Version>\\Microsoft.Common.targets\\ImportBefore</code> where &#x3C;MSBUILD<em>INSTALL</em>DIR> is:\n*For v14, default path is: <code>C:\\Program Files (x86)\\MSBuild\\14.0\\Microsoft.Common.Targets\\ImportBefore</code></p>\n<ul>\n<li>For v15, default path is: <code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportBefore</code> (for VS Community Edition)</li>\n<li>For v16, default path is: <code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Microsoft.Common.targets</code> (for VS Community Edition)</li>\n</ul>\n</li>\n<li>For dotnet, the path is <code>&#x3C;DOTNET_SDK_INSTALL_DIR>\\15.0\\Microsoft.Common.targets\\ImportBefore</code> where <code>&#x3C;DOTNET_SDK_INSTALL_DIR></code> can be found using the <code>dotnet --info</code> and looking for the Base Path property.</li>\n</ul>\n</li>\n</ol>\n<p>The performance impact of this global installation for projects that aren't analyzed is negligible as this target is only a bootstrapper and will bail out nearly instantaneously when the <code>.sonarqube</code> folder is not found under the folder being built.</p>\n<p><strong>Using SonarScanner for MSBuild with a Proxy</strong><br>\nOn build machines that connect to the Internet through a proxy server you might experience difficulties connecting to SonarQube. To instruct the Java VM to use the system proxy settings, you need to set the following environment variable before running the SonarScanner for MSBuild:</p>\n<pre><code>SONAR_SCANNER_OPTS = \"-Djava.net.useSystemProxies=true\"\n</code></pre>\n<p>To instruct the Java VM to use specific proxy settings or when there is no system-wide configuration use the following value:</p>\n<pre><code>SONAR_SCANNER_OPTS = \"-Dhttp.proxyHost=yourProxyHost -Dhttp.proxyPort=yourProxyPort\"\n</code></pre>\n<p>Where <em>yourProxyHost</em> and <em>yourProxyPort</em> are the hostname and the port of your proxy server. There are additional proxy settings for https, authentication and exclusions that could be passed to the Java VM. For more information see the following article: <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html\">https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html</a></p>","headings":[{"depth":2,"value":"Prerequisites"},{"depth":2,"value":"Installation"},{"depth":3,"value":"SonarScanner for MSBuild for .NET Framework or .NET Core"},{"depth":3,"value":"Installation of the SonarScanner for MSBuild .NET Core Global Tool"},{"depth":3,"value":"On Linux/OSX, if your SonarQube server is secured:"},{"depth":2,"value":"Use"},{"depth":2,"value":"Analysis steps"},{"depth":3,"value":"Begin"},{"depth":3,"value":"Build"},{"depth":3,"value":"End"},{"depth":3,"value":"Known Limitations"},{"depth":2,"value":"Excluding projects from analysis"},{"depth":2,"value":"Advanced topics"}],"frontmatter":{"title":"SonarScanner for MSBuild"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/analysis/scan/sonarscanner-for-msbuild/"}}