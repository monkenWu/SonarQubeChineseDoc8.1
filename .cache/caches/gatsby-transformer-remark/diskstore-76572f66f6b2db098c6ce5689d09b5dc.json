{"expireTime":9007200870884087000,"key":"transformer-remark-markdown-html-71f9c4cd3712b52b8d29c5169a77fa6c-gatsby-remark-custom-blocks-/SonarQubeChineseDoc8.1","val":"<p>This page gives guidelines to I18n for:</p>\n<ul>\n<li>Plugin developers who would like to apply the i18n mechanism in their own plugins, so that these plugins can be available in several languages.</li>\n<li>People who would like to help the community by making the platform available in a new language.</li>\n</ul>\n<h2>Principles</h2>\n<p>Although the basics of the i18n mechanism are the same for every part of the ecosystem, the packaging differs depending on what you are developing:</p>\n<ul>\n<li>\n<p>Translations for SonarQube: making SonarQube available in a new language requires you to develop and publish a new Language Pack plugin. </p>\n<ul>\n<li>By default SonarQube embeds the English Pack.</li>\n<li>All other Language Pack plugins, like the French Pack plugin, are maintained by the community, and are available through Marketplace (category \"Localization\").</li>\n</ul>\n</li>\n<li>\n<p>Translations for the SonarQube Community Plugins: open-source plugins from the SonarQube Community must embed only the bundles for the default locale (en). Translations will be done in the Language Pack plugins.</p>\n</li>\n<li>\n<p>Translations for other Plugins: closed-source/commercial/independent plugins must embed the bundles for the default locale and the translations for every language they want to support.</p>\n</li>\n</ul>\n<h2>Translation Bundles</h2>\n<p>Localized messages are stored in properties files:</p>\n<ul>\n<li>\n<p>These are regular properties files with key/value pairs where you put most translations</p>\n</li>\n<li>\n<p>These files must be stored in the org.sonar.l10n package (usually in the <code>src/main/resources/org/sonar/l10n</code> directory)</p>\n</li>\n<li>\n<p>The names of these files must follow the convention <code>&#x3C;key of the plugin to translate>_&#x3C;language>.properties</code>, for example <code>widgetlabs_fr.properties</code> or <code>core_fr.properties</code> for the core bundle. See <code>sonar-packaging-maven-plugin</code> for details on plugin key derivation.</p>\n</li>\n<li>\n<p>Messages can accept arguments. Such entries would look like:</p>\n<ul>\n<li><code>myplugin.foo=This is a message with 2 params: the first \"{0}\" and the second \"{1}\".</code></li>\n</ul>\n</li>\n<li>\n<p>Messages can accept pluralization. Such entries would look like:</p>\n<ul>\n<li><code>myplugin.foo={x, number} {x, plural, one {thing} other {things}}</code></li>\n<li>We use it for example with a combination of 2 labels: <code>component_navigation.last_analysis_had_warnings=Last analysis had {warnings}</code> and <code>component_navigation.x_warnings={warningsCount, number} {warningsCount, plural, one {warning} other {warnings}}</code>. This renders <code>Last analysis had 1 warning</code> if <code>warningsCount</code> equals 1 and <code>Last analysis had 2 warnings</code> otherwise, in this case 2.</li>\n<li>Learn more about this syntax <a href=\"https://formatjs.io/guides/message-syntax/#plural-format\">here</a>.</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p><strong>UTF-8 encoding</strong><br>\nIn the Java API, properties files are supposed to be encoded in ISO-8859 charset. Without good tooling, it can be quite annoying to write translations for languages that do not fit in this charset.\nThis is why we decided to encode the properties files in UTF-8, and let Maven turn them into ASCII at build time thanks to native2ascii-maven-plugin (check the French plugin pom.xml). This makes the process of writing translations with a standard editor far easier.</p></div></div>\n<h3>How to read localized messages from a plugin extension?</h3>\n<p>The component <code>org.sonar.api.i18n.I18n</code> is available for web server extensions. Scanner extensions cannot load bundles.</p>\n<h2>Writing a Language Pack</h2>\n<p>A Language Pack defines bundles for SonarQube and/or plugins.</p>\n<h3>Creating a Language Pack</h3>\n<p>The easiest way to create a new pack is to copy the <a href=\"https://github.com/SonarQubeCommunity/sonar-l10n-zh\">Chinese Pack</a> and adapt it to your language.</p>\n<h3>Maintaining a Language Pack</h3>\n<p>In the pom file, set the versions of SonarQube and of the plugins you want to translate. When it's time to update your language pack for a new version of SonarQube or a plugin, the easiest way to see what keys are missing is to run:</p>\n<pre><code>mvn test\n</code></pre>\n<p>If the build fails, it means that some keys are missing. Go to <code>target/l10n</code> to check the reports for each bundle. Missing keys are listed under 'Missing translations are:'</p>\n<pre><code>Missing translations are:\ncode_viewer.no_info_displayed_due_to_security=Due to security settings, no information can be displayed.\ncomparison.version.latest=LATEST\n...\n</code></pre>\n<p>Each time you add a new bundle or update an existing one, please create a JIRA ticket on the corresponding L10n component in order to track changes.</p>\n<h2>Localizing a Plugin</h2>\n<p>This section applies if you are developing a closed-source plugin. If your plugin falls in this category, it must embed its own bundles. Bundle must be defined in <code>src/main/resources/org/sonar/l10n/&#x3C;plugin key>_&#x3C;language>.properties</code></p>\n<p>The default bundle is mandatory, and must be English. For example the plugin with key \"mysonarplugin\" must define the following files in order to enable the French translation:</p>\n<ul>\n<li><code>org/sonar/l10n/mysonarplugin.properties</code></li>\n<li><code>org/sonar/l10n/mysonarplugin_fr.properties</code></li>\n</ul>"}