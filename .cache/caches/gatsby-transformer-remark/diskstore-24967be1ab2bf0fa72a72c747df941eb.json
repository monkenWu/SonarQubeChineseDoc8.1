{"expireTime":9007200870884091000,"key":"transformer-remark-markdown-html-24c3fadbac00c63439c2df51ff7e161e-gatsby-remark-custom-blocks-/SonarQubeChineseDoc8.1","val":"<h2>複雜度(Complexity)</h2>\n<p><strong>複雜度</strong> (<code>complexity</code>)<br>\n它根據程式碼中路徑數量而計算出的循環複雜度。每當函數的控制流程分裂時，複雜度就會增加1。每個方法的最小複雜度為1。由於關鍵字和功能的不同，這種計算會因為不同的程式語言而略有不同。</p>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>特定語言的詳細訊息</h2><table>\n<thead>\n<tr>\n<th>語言</th>\n<th>筆錄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ABAP</td>\n<td>使用以下關鍵字將複雜度加1: <code>AND</code>, <code>CATCH</code>, <code>CONTINUE</code>, <code>DO</code>, <code>ELSEIF</code>, <code>IF</code>, <code>LOOP</code>, <code>LOOPAT</code>, <code>OR</code>, <code>PROVIDE</code>, <code>SELECT…ENDSELECT</code>, <code>TRY</code>, <code>WHEN</code>, <code>WHILE</code></td>\n</tr>\n<tr>\n<td>C/C++/Objective-C</td>\n<td>複雜度加1: function definitions, <code>while</code>, <code>do while</code>, <code>for</code>, <code>throw</code> statements, <code>switch</code>, <code>case</code>, <code>default</code>, <code>&#x26;&#x26;</code> operator, <code>||</code> operator, <code>?</code> ternary operator, <code>catch</code>, <code>break</code>, <code>continue</code>, <code>goto</code>.</td>\n</tr>\n<tr>\n<td>COBOL</td>\n<td>下列命令使複雜度增加一倍（在剪貼簿中使用時除外）: <code>ALSO</code>, <code>ALTER</code>, <code>AND</code>, <code>DEPENDING</code>, <code>END_OF_PAGE</code>, <code>ENTRY</code>, <code>EOP</code>, <code>EXCEPTION</code>, <code>EXIT</code>, <code>GOBACK</code>, <code>CONTINUE</code>, <code>IF</code>, <code>INVALID</code>, <code>OR</code>, <code>OVERFLOW</code>, <code>SIZE</code>, <code>STOP</code>, <code>TIMES</code>, <code>UNTIL</code>, <code>USE</code>, <code>VARYING</code>, <code>WHEN</code>, <code>EXEC CICS HANDLE</code>, <code>EXEC CICS LINK</code>, <code>EXEC CICS XCTL</code>, <code>EXEC CICS RETURN</code></td>\n</tr>\n<tr>\n<td>Java</td>\n<td>關鍵字增加複雜度: <code>if</code>, <code>for</code>, <code>while</code>, <code>case</code>, <code>catch</code>, <code>throw</code>, <code>&#x26;&#x26;</code>, <code>||</code>, <code>?</code></td>\n</tr>\n<tr>\n<td>JavaScript, PHP</td>\n<td>複雜度每增加一: function (即非抽象和非匿名的建構子、函數、過程或方法), <code>if</code>, short-circuit (AKA lazy) logical conjunction (<code>&#x26;&#x26;</code>), short-circuit (AKA lazy) logical disjunction (<code>||</code>), ternary conditional expressions, loop, <code>case</code> clause of a <code>switch</code> statement, <code>throw</code> and <code>catch</code> statement, <code>go to</code> statement (only for PHP)</td>\n</tr>\n<tr>\n<td>PL/I</td>\n<td>以下關鍵字將複雜度加一: <code>PROC</code>, <code>PROCEDURE</code>, <code>GOTO</code>, <code>GO TO</code>, <code>DO</code>, <code>IF</code>, <code>WHEN</code>, <code>|</code>, <code>!</code>, <code>|=</code>, <code>!=</code>, <code>&#x26;</code>, <code>&#x26;=</code></td>\n</tr>\n<tr>\n<td>PL/SQL</td>\n<td>複雜度加一: the main PL/SQL anonymous block (not inner ones), create procedure, create trigger, procedure<em>definition, basic loop statement, when</em>clause<em>statement (the “when” of simple</em>case<em>statement and searched</em>case<em>statement), continue</em>statement, cursor<em>for</em>loop<em>statement, continue</em>exit<em>when</em>clause (The “WHEN” part of the continue and exit statements), exception<em>handler (every individual “WHEN”), exit</em>statement, for<em>loop</em>statement, forall<em>statement, if</em>statement, elsif<em>clause, raise</em>statement, return<em>statement, while</em>loop<em>statement, and</em>expression (“and” reserved word used within PL/SQL expressions), or<em>expression (“or” reserved word used within PL/SQL expressions), when</em>clause<em>expression (the “when” of simple</em>case<em>expression and searched</em>case_expression)</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td>複雜度加一: 方法或建構子聲明(Sub, Function), <code>AndAlso</code>, <code>Case</code>, <code>Continue</code>, <code>End</code>, <code>Error</code>, <code>Exit</code>, <code>If</code>, <code>Loop</code>, <code>On Error</code>, <code>GoTo</code>, <code>OrElse</code>, <code>Resume</code>, <code>Stop</code>, <code>Throw</code>, <code>Try</code>.</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><strong>認知複雜度</strong> (<code>cognitive_complexity</code>)<br>\n了解程式碼的控制流程有多麼困難。有關用於計算此標準的數學模型的完整說明，請參見<a href=\"https://www.sonarsource.com/resources/white-papers/cognitive-complexity.html\">認知複雜性白皮書</a>。</p>\n<hr>\n<h2>重複性(Duplications)</h2>\n<p><strong>重複的區域</strong> (<code>duplicated_blocks</code>)<br>\n重複區域的行數。</p>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>特定語言的詳細訊息</h2><p>對於被視為重複區域的程式碼:</p><p>非Java專案:  </p><ul>\n<li>至少有100個連續且重複的token</li>\n<li>這些token至少應分散在:</li>\n<li>30行的COBOL程式碼內</li>\n<li>20行的ABAP程式碼內</li>\n<li>10行的其他語言程式碼內</li>\n</ul><p>Java專案:<br>\n無論token和行的數量如何，應至少有10個連續且重複的statement。在檢測重複性時，縮排和字串的差異可被忽略。</p></div></div>\n<p><strong>重複的文件</strong> (<code>duplicated_files</code>)<br>\n重複涉及到的文件數。</p>\n<p><strong>重複的行數</strong> (<code>duplicated_lines</code>)<br>\n重複涉及到的行數。</p>\n<p><strong>重複的行數 (%)</strong> (<code>duplicated_lines_density</code>)<br>\n= <code>duplicated_lines</code> / <code>lines</code> * 100</p>\n<hr>\n<h2>問題(Issues)</h2>\n<p><strong>新問題</strong> (<code>new_violations</code>)<br>\n新程式內首次提出的問題數量。</p>\n<p><strong>新的xxx問題</strong> (<code>new_xxx_violations</code>)<br>\n新程式內首次提出的xxx問題數量，其中xxx是以下項之一: <code>blocker</code>, <code>critical</code>, <code>major</code>, <code>minor</code>, <code>info</code>。</p>\n<p><strong>問題</strong> (<code>violations</code>)<br>\n所有問題的總數。</p>\n<p><strong>xxx的問題</strong> (<code>xxx_violations</code>)<br>\nxxx的問題總數，其中xxx是以下項之一: <code>blocker</code>, <code>critical</code>, <code>major</code>, <code>minor</code>, <code>info</code>。</p>\n<p><strong>誤報問題</strong> (<code>false_positive_issues</code>)<br>\n標記為誤報的問題總數。</p>\n<p><strong>開放式問題</strong> (<code>open_issues</code>)<br>\n處於「開放」狀態的問題總數。</p>\n<p><strong>已確認的問題</strong> (<code>confirmed_issues</code>)<br>\n處於「已確認」狀態的問題總數。</p>\n<p><strong>重新開放的問題</strong> (<code>reopened_issues</code>)<br>\n處於「重新開放」狀態的問題總數。</p>\n<hr>\n<h2>可維護性(Maintainability)</h2>\n<p><strong>程式碼異味</strong> (<code>code_smells</code>)<br>\n有程式碼異味問題總數。</p>\n<p><strong>新的程式碼異味</strong> (<code>new_code_smells</code>)<br>\n首次提出的程式碼異味問題總數。</p>\n<p><strong>可維護性等級</strong> (<code>sqale_rating</code>)<br>\n(前SQALE評級)\n給專案的評級與技術債務比率(Technical Debt Ratio)有關。默認的「可維護性等級」標準為:</p>\n<p>A=0-0.05, B=0.06-0.1, C=0.11-0.20, D=0.21-0.5, E=0.51-1</p>\n<p>可維護性等級量表可以通過以下方式替代性表示:</p>\n<ul>\n<li>若未解決的補救成本小於5％(包含)進入應用程式的時間則評為A級</li>\n<li>若未解決的補救成本介於6％到10％進入應用程式的時間則評為B級</li>\n<li>若未解決的補救成本介於11％到20％進入應用程式的時間則評為C級</li>\n<li>若未解決的補救成本介於21％到50％進入應用程式的時間則評為D級</li>\n<li>若未解決的補救成本超過50%以上(不含)進入應用程式的時間則評為E級</li>\n</ul>\n<p><strong>技術債務</strong> (<code>sqale_index</code>)<br>\n努力修復所有程式碼異味。該標準以分鐘為單位存儲在資料庫中。以天為單位顯示值時，假設一天為8小時。</p>\n<p><strong>新程式的技術債務</strong> (<code>new_technical_debt</code>)<br>\n努力修復在新程式內首次提出的所有程式怪味道。</p>\n<p><strong>技術債務比率</strong> (<code>sqale_debt_ratio</code>)<br>\n開發軟體的成本與修復軟體的成本之間的比率。此技術債務比率公式為:<br>\n<code>Remediation cost / Development cost</code><br>\n可以重述為:<br>\n<code>Remediation cost / (Cost to develop 1 line of code * Number of lines of code)</code><br>\n開發一行程式碼的成本值為0.06天。</p>\n<p><strong>新程式碼的技術債務比率</strong> (<code>new_sqale_debt_ratio</code>)<br>\n在新程式內更改程式碼的開發成本和與其相關的問題之成本間的比率。</p>\n<hr>\n<h2>質量門(Quality Gates)</h2>\n<p><strong>質量門狀態</strong> (<code>alert_status</code>)<br>\n與您的專案關聯的質量門狀態。可能的值為: <code>ERROR</code>, <code>OK</code>\n(自7.6起已刪除WARN值)</p>\n<p><strong>質量門詳細訊息</strong> (<code>quality_gate_details</code>)<br>\n對於質量門的所有條件，您都知道哪個條件失敗了，哪個不是。</p>\n<hr>\n<h2>可靠性(Reliability)</h2>\n<p><strong>Bugs</strong> (<code>bugs</code>)<br>\nBugs的問題數量。</p>\n<p><strong>新的漏洞</strong> (<code>new_bugs</code>)<br>\n新的漏洞的問題數量。</p>\n<p><strong>可靠性度等級</strong> (<code>reliability_rating</code>)<br>\nA = 0個Bugs<br>\nB = 至少1個次要的Bugs\nC = 至少1個主要的Bugs<br>\nD = 至少1個嚴重的Bugs<br>\nE = 至少1個阻止程式運行的Bugs</p>\n<p><strong>可靠性補救措施</strong> (<code>reliability_remediation_effort</code>)<br>\n努力解決所有Bug的問題。該標準以分鐘存儲在資料庫中。以天為單位顯示值時，假設一天為8小時。</p>\n<p><strong>新程式碼的可靠性補救工作</strong> (<code>new_reliability_remediation_effort</code>)<br>\n與可靠性補救措施相同，但在新程式內更改程式碼。</p>\n<hr>\n<h2>安全性(Security)</h2>\n<p><strong>漏洞</strong> (<code>vulnerabilities</code>)<br>\n有漏洞的問題之數量。</p>\n<p><strong>新漏洞</strong> (<code>new_vulnerabilities</code>)<br>\n新的有漏洞的問題之數量。</p>\n<p><strong>安全等級</strong> (<code>security_rating</code>)<br>\nA = 0個漏洞\nB = 至少1個次要的漏洞\nC = 至少1個重大的漏洞\nD = 至少1個嚴重的漏洞\nE = 至少1個阻止程式運行的漏洞</p>\n<p><strong>安全補救措施</strong> (<code>security_remediation_effort</code>)<br>\n努力解決所有有漏洞的問題。該項標準以分鐘存儲在資料庫中。以天為單位顯示值時，假設一天為8小時。</p>\n<p><strong>對新程式碼的安全補救措施</strong> (<code>new_security_remediation_effort</code>)<br>\n與安全補救措施相同，但在新程式內更改程式碼。</p>\n<p><strong>安全熱點</strong> (<code>security_hotspots</code>)\n安全熱點數量</p>\n<p><strong>新的安全熱點</strong> (<code>new_security_hotspots</code>)\n新的安全熱點數量</p>\n<p><strong>安全審查等級</strong> (<code>security_review_rating</code>)</p>\n<p>每1000行程式碼處於「正在審閱」狀態的安全熱點數的比率。</p>\n<p>A = 0–3 每1000行程式碼「審核」和「審核中」安全熱點\nB = >3–10\nC = >10–15\nD = >15–25\nE = >25  </p>\n<hr>\n<h2>大小(Size)</h2>\n<p><strong>類別</strong> (<code>classes</code>)<br>\n類別的數量 (包含隱藏類別、物件、列舉和註解)。</p>\n<p><strong>註解行數</strong> (<code>comment_lines</code>)<br>\n含註解或註解掉的程式碼的行數。</p>\n<p>不重要的註解行（空註解行，僅包含特殊字符的註解行等）不會增加註釋行數。</p>\n<p>以下程式碼包含9行註釋行：</p>\n<pre><code>/**                                    +0 => 空註解行\n *                                     +0 => 空註解行\n * This is my documentation            +1 => 重要註解行\n * although I don't                    +1 => 重要註解行\n * have much                           +1 => 重要註解行\n * to say                              +1 => 重要註解行\n *                                     +0 => 空註解行\n ***************************           +0 => 非重要註解行\n *                                     +0 => 空註解行\n * blabla...                           +1 => 重要註解行\n */                                    +0 => 空註解行\n  \n/**                                    +0 => 空註解行\n * public String foo() {               +1 => 註解掉的程式碼\n *   System.out.println(message);      +1 => 註解掉的程式碼\n *   return message;                   +1 => 註解掉的程式碼\n * }                                   +1 => 註解掉的程式碼\n */                                    +0 => 空註解行\n</code></pre>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>特定語言的詳細訊息</h2><table>\n<thead>\n<tr>\n<th>語言</th>\n<th>筆錄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>COBOL</td>\n<td>包含以下說明的行被視為註解和程式碼行： <code>AUTHOR</code>, <code>INSTALLATION</code>, <code>DATE-COMPILED</code>, <code>DATE-WRITTEN</code>, <code>SECURITY</code>.</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>文件標頭不算作註解行（因為它們通常定義許可證）。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><strong>註解 (%)</strong> (<code>comment_lines_density</code>)<br>\n註解行的密度 = 註解行數 / (程式碼的行數 + 註解行數) * 100</p>\n<p>使用以下的公式：</p>\n<ul>\n<li>50％表示程式碼行數等於註解行數</li>\n<li>100％表示文件僅包含註解</li>\n</ul>\n<p><strong>目錄</strong> (<code>directories</code>)<br>\n目錄數。</p>\n<p><strong>文件</strong> (<code>files</code>)<br>\n文件數。</p>\n<p><strong>行數</strong> (<code>lines</code>)<br>\n物理行數（enter鍵數量）。</p>\n<p><strong>程式碼行數</strong> (<code>ncloc</code>)<br>\n包含至少一個字元的物理行數，該字元既不是空格，也不是列表或註解的一部分。</p>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>特定語言的詳細訊息</h2><table>\n<thead>\n<tr>\n<th>語言</th>\n<th>筆錄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>COBOL</td>\n<td>生成的程式碼和預處理指令（SKIP1，SKIP2，SKIP3，COPY，EJECT，REPLACE）不計為程式碼行數。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><strong>每種語言的程式碼行數</strong> (<code>ncloc_language_distribution</code>)<br>\n按語言分佈的程式碼的非註解行數。</p>\n<p><strong>函式</strong> (<code>functions</code>)<br>\n函式的數量。根據語言的不同，函式可以是函數、方法或段落。</p>\n<div class=\"custom-block collapse\"><div class=\"custom-block-body\"><h2>特定語言的詳細訊息</h2><table>\n<thead>\n<tr>\n<th>語言</th>\n<th>筆錄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>COBOL</td>\n<td>為段落的數量。</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>anonymous classes中的方法將被忽略。</td>\n</tr>\n<tr>\n<td>VB.NET</td>\n<td>Accesors不被視為方法。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><strong>專案</strong> (<code>projects</code>)<br>\n一個作品集的專案數量。</p>\n<p><strong>Statements</strong> (<code>statements</code>)<br>\nstatement的數量。</p>\n<hr>\n<h2>測試(Tests)</h2>\n<p><strong>條件覆蓋率</strong> (<code>branch_coverage</code>)<br>\n在包含一些布林表達式的每一行程式碼中，條件覆蓋率僅回答以下問題：「每個布林表達式都被評估為true和false嗎？」。這是在單元測試執行期間遵循的流量控制結構中可能條件的密度。</p>\n<p><code>條件覆蓋率 = (CT + CF) / (2*B)</code>   </p>\n<ul>\n<li>CT = 至少被評估一次為「true」的條件</li>\n<li>CF = 至少被評估一次為「false」的條件</li>\n<li>B = 條件總數</li>\n</ul>\n<p><strong>新程式碼的條件覆蓋</strong> (<code>new_branch_coverage</code>)<br>\n條件覆蓋範圍相同，但僅限於新的/更新過的原始碼。</p>\n<p><strong>條件覆蓋命中率</strong> (<code>branch_coverage_hits_data</code>)<br>\n覆蓋條件清單。</p>\n<p><strong>條件行數</strong> (<code>conditions_by_line</code>)<br>\n條件的行數。</p>\n<p><strong>條件覆蓋行數</strong> (<code>covered_conditions_by_line</code>)<br>\n條件覆蓋的行數。</p>\n<p><strong>覆蓋範圍</strong> (<code>coverage</code>)<br>\n它是線路覆蓋和條件覆蓋的混合。它的目標是為以下問題提供更準確的答案：「單元測試已覆蓋了多少原始碼？」。</p>\n<p><code>覆蓋範圍 = (CT + CF + LC)/(2*B + EL)</code>  </p>\n<ul>\n<li>CT = 至少被評估一次為「true」的條件</li>\n<li>CF = 至少被評估一次為「false」的條件</li>\n<li>LC = 覆蓋行數 = lines<em>to</em>cover - uncovered_lines</li>\n<li>B = 條件總數</li>\n<li>EL = 可執行的行數(<code>lines_to_cover</code>)</li>\n</ul>\n<p><strong>新程式碼的覆蓋範圍</strong> (<code>new_coverage</code>)<br>\n與覆蓋範圍相同，但僅限於新的或更新過的原始碼。</p>\n<p><strong>Line coverage</strong> (<code>line_coverage</code>)<br>\n在給定的程式碼中，Line coverage僅回答以下問題：「在執行單元測試期間是否已執行了此程式碼行？」。它是單元測試中被覆蓋的行數之密度：</p>\n<p><code>Line coverage = LC / EL</code>  </p>\n<ul>\n<li>LC = 被覆蓋的行數(<code>lines_to_cover</code> - <code>uncovered_lines</code>)</li>\n<li>EL = 可執行的總行數(<code>lines_to_cover</code>)</li>\n</ul>\n<p><strong>新程式碼的Line coverage</strong> (<code>new_line_coverage</code>)<br>\n與Line coverage相同，但僅限於新的或更新過的原始碼。</p>\n<p><strong>Line coverage比率</strong> (<code>coverage_line_hits_data</code>)<br>\n被覆蓋的行數之列表。</p>\n<p><strong>Lines to cover</strong> (<code>lines_to_cover</code>)<br>\n單元測試中可以覆蓋的程式碼行數（空行或完整的註解行不能被視為Lines to cover）。</p>\n<p><strong>新程式碼的Lines to cover</strong> (<code>new_lines_to_cover</code>)<br>\n與Lines to cover相同，但僅限於新的或更新過的原始碼的行。</p>\n<p><strong>跳過的單元測試數</strong> (<code>skipped_tests</code>)<br>\n跳過的單元測試的數量。</p>\n<p><strong>未覆蓋條件數</strong> (<code>uncovered_conditions</code>)<br>\n單元測試中未覆蓋的條件數。</p>\n<p><strong>新程式碼未覆蓋條件數</strong> (<code>new_uncovered_conditions</code>)<br>\n與未覆蓋條件數相同，但僅限於新的或更新過的原始碼。</p>\n<p><strong>未覆蓋行數</strong> (<code>uncovered_lines</code>)<br>\n單元測試中未覆蓋的程式碼行數。</p>\n<p><strong>新程式碼未覆蓋行數</strong> (<code>new_uncovered_lines</code>)<br>\n與未覆蓋行數相同，但僅限於新的或更新過的原始碼。</p>\n<p><strong>單元測試</strong> (<code>tests</code>)<br>\n單元測試數。</p>\n<p><strong>單元測試時間</strong> (<code>test_execution_time</code>)<br>\n執行所有單元測試所需的時間。</p>\n<p><strong>單元測試錯誤</strong> (<code>test_errors</code>)<br>\n失敗的單元測試數。</p>\n<p><strong>單元測試失敗</strong> (<code>test_failures</code>)<br>\n因意外異常而失敗的單元測試數。</p>\n<p><strong>單元測試成功密度(%)</strong> (<code>test_success_density</code>)<br>\n<code>測試成功密度 = (單元測試 - (單元測試錯誤 + 單元測試失敗)) / 單元測試 * 100</code></p>"}