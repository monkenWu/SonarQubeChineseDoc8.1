{"expireTime":9007200870884089000,"key":"transformer-remark-markdown-html-1d4660b7caa8fe7ad59bf2a590ea9877-gatsby-remark-custom-blocks-/SonarQubeChineseDoc8.1","val":"<!-- update_center:php -->\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the PHP-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in: <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=php\">Administration > General Settings > PHP</a></strong></p>\n<h2>Analyze php.ini Files</h2>\n<p>The PHP analyzer can analyze <code>php.ini</code> files with some specific rules (if these rules are activated in your quality profile). <code>php.ini</code> files must be part of the project you are analyzing, meaning the <code>php.ini</code> files have to be inside the directories listed in <code>sonar.sources</code>.\nRules targeting <code>php.ini</code> files can be quickly identified through the <a href=\"https://rules.sonarsource.com/php/tag/php-ini\">\"php-ini\"</a> tag set on them.</p>\n<h2>Custom Rules</h2>\n<h3>Overview</h3>\n<p>The PHP analyzer parses the source code, creates an Abstract Syntax Tree (AST) and then walks through the entire tree. A coding rule is a visitor that is able to visit nodes from this AST.</p>\n<p>As soon as the coding rule visits a node, it can navigate its children and log issues if necessary.</p>\n<h3>Example Plugin</h3>\n<p>To get started a sample plugin can be found here: <a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/tree/master/php-custom-rules\">php-custom-rules</a>.</p>\n<h3>Writing a Plugin</h3>\n<p>Custom rules for PHP can be added by writing a SonarQube Plugin and using PHP analyzer APIs.\nHere are the step to follow:</p>\n<h4>Create SonarQube Plugin</h4>\n<ul>\n<li>create a standard SonarQube plugin project</li>\n<li>\n<p>attach this plugin to the SonarQube PHP analyzer through the <code>pom.xml</code>:</p>\n<ul>\n<li>add the dependency to the PHP analyzer.</li>\n<li>\n<p>add the following line in the sonar-packaging-maven-plugin configuration.</p>\n<pre><code>&#x3C;basePlugin>php&#x3C;/basePlugin>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>implement the following extension points:</p>\n<ul>\n<li><a href=\"http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/Plugin.html\">Plugin</a></li>\n<li><a href=\"http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/server/rule/RulesDefinition.html\">RulesDefinition</a> and <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/PHPCustomRuleRepository.java\">PHPCustomRuleRepository</a>, which can be implemented by a single class, to declare your custom rules</li>\n</ul>\n</li>\n<li>declare the RulesDefinition as an extension in the Plugin extension point.</li>\n</ul>\n<h4>Implement a Rule</h4>\n<ul>\n<li>\n<p>create a class that will hold the implementation of the rule, it should:</p>\n<ul>\n<li>extend <code>PHPVisitorCheck</code> or <code>PHPSubscriptionCheck</code></li>\n<li>define the rule name, key, tags, etc. with Java annotations.</li>\n</ul>\n</li>\n<li>declare this class in the <code>RulesDefinition</code>.</li>\n</ul>\n<h4>Implementation Details</h4>\n<p><strong>Using <code>PHPVisitorCheck</code></strong></p>\n<p>To explore a part of the AST, override a method from the PHPVisitorCheck. For example, if you want to explore \"if statement\" nodes, override <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/PHPVisitorCheck.java#L265\">PHPVisitorCheck#visitIfStatement</a> method that will be called each time an <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/IfStatementTree.java\">ifStatementTree</a> node is encountered in the AST.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node.</p></div></div>\n<p><strong>Using <code>PHPSubscriptionCheck</code></strong></p>\n<p>To explore a part of the AST, override <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/PHPSubscriptionCheck.java#L33\"><code>PHPSubscriptionCheck#nodesToVisit</code></a> by returning the list of the <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/Tree.java#L124\"><code>Tree#Kind</code></a> of node you want to visit. For example, if you want to explore \"if statement\" nodes the method will return a list containing the element <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/Tree.java#L761\"><code>Tree#Kind#IF_STATEMENT</code></a>.</p>\n<p><strong>Create Issues</strong></p>\n<p>From the check, issue can be created by calling <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/CheckContext.java#L90\"><code>CheckContext#newIssue</code></a> method.</p>\n<p><strong>Testing Checks</strong></p>\n<p>To test custom checks you can use method <a href=\"https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/tests/PHPCheckVerifier.java#L55\"><code>PHPCheckVerifier#verify</code></a>. You should end each line with an issue with a comment in the following form:</p>\n<pre><code>// Noncompliant {{Message}}\n</code></pre>\n<p>Comment syntax is described <a href=\"https://github.com/SonarSource/sonar-analyzer-commons/blob/master/test-commons/README.md\">here</a>.</p>\n<h2>Related Pages</h2>\n<ul>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a></p>\n</li>\n<li>\n<p><a href=\"/SonarQubeChineseDoc8.1/extend/adding-coding-rules/\">Adding Coding Rules</a></p>\n</li>\n</ul>"}