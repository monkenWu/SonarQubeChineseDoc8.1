{"expireTime":9007200870884089000,"key":"transformer-remark-markdown-html-4ecf7b0539bd2c17384a33bc2b793fa2-gatsby-remark-custom-blocks-/SonarQubeChineseDoc8.1","val":"<!-- update_center:python -->\n<h2>Supported Versions</h2>\n<ul>\n<li>Python 3.X</li>\n<li>Python 2.X</li>\n</ul>\n<h2>Language-Specific Properties</h2>\n<p>Discover and update the Python-specific <a href=\"/SonarQubeChineseDoc8.1/analysis/analysis-parameters/\">properties</a> in:  <strong><a href=\"/SonarQubeChineseDoc8.1/#sonarqube-admin#/admin/settings?category=python\">Administration > General Settings > Python</a></strong>.</p>\n<h2>Pylint</h2>\n<p><a href=\"http://www.pylint.org/\">Pylint</a> is an external static source code analyzer, it can be used in conjunction with SonarPython.</p>\n<p>You can enable Pylint rules directly in your Python Quality Profile. Their rule keys start with \"<em>Pylint:</em>\".</p>\n<p>Once the rules are activated you should run Pylint and import its report:</p>\n<pre><code>pylint &#x3C;module_or_package> -r n --msg-template=\"{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}\" > &#x3C;report_file>\n</code></pre>\n<p>Then pass the generated report path to analysis via the <code>sonar.python.pylint.reportPath</code> property.</p>\n<h2>Custom Rules</h2>\n<h3>Overview</h3>\n<p>The Python analyzer parses the source code, creates an Abstract Syntax Tree (AST) and then walks through the entire tree. A coding rule is a visitor that is able to visit nodes from this AST.</p>\n<p>As soon as the coding rule visits a node, it can navigate its children and log issues if necessary.</p>\n<h3>Writing a Plugin</h3>\n<p>Custom rules for Python can be added by writing a SonarQube Plugin and using Python analyzer APIs.\nHere are the step to follow:</p>\n<h4>Create SonarQube Plugin</h4>\n<ul>\n<li>create a standard SonarQube plugin project</li>\n<li>\n<p>attach this plugin to the SonarQube Python analyzer through the <code>pom.xml</code>:</p>\n<ul>\n<li>add the dependency to the Python analyzer.</li>\n<li>\n<p>add the following line in the sonar-packaging-maven-plugin configuration.</p>\n<pre><code>&#x3C;requirePlugins>python:2.0-SNAPSHOT&#x3C;/requirePlugin>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>implement the following extension points:</p>\n<ul>\n<li><a href=\"http://javadocs.sonarsource.org/latest/apidocs/org/sonar/api/Plugin.html\">Plugin</a></li>\n<li><a href=\"http://javadocs.sonarsource.org/latest/apidocs/org/sonar/api/server/rule/RulesDefinition.html\">RulesDefinition</a> and <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/PythonCustomRuleRepository.java\">PythonCustomRuleRepository</a>, which can be implemented by a single class, to declare your custom rules</li>\n</ul>\n</li>\n<li>declare the RulesDefinition as an extension in the Plugin extension point.</li>\n</ul>\n<h4>Implement a Rule</h4>\n<ul>\n<li>\n<p>create a class that will hold the implementation of the rule, it should:</p>\n<ul>\n<li>extend <code>PythonCheckTree</code> or <code>PythonSubscriptionCheck</code></li>\n<li>define the rule name, key, tags, etc. with Java annotations.</li>\n</ul>\n</li>\n<li>declare this class in the <code>RulesDefinition</code>.</li>\n</ul>\n<h3>Example Plugin</h3>\n<p>To get started a sample plugin can be found here: <a href=\"https://github.com/SonarSource/sonar-custom-rules-examples/tree/master/python-custom-rules\">python-custom-rules</a>.</p>\n<h4>Implementation Details</h4>\n<p><strong>Using <code>PythonCheckTree</code></strong></p>\n<p>To explore a part of the AST, override a method from the PythonCheckTree. For example, if you want to explore \"if statement\" nodes, override <a href=\"https://github.com/SonarSource/sonar-python/blob/39b6126e9fdef42b93004cf6cc5818e861051334/python-frontend/src/main/java/org/sonar/plugins/python/api/tree/BaseTreeVisitor.java#L56\">PythonCheckTree#visitIfStatement</a> method that will be called each time an <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/tree/IfStatement.java\">ifStatement</a> node is encountered in the AST.</p>\n<div class=\"custom-block alert alert-warning\"><div class=\"custom-block-body\"><p>When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node.</p></div></div>\n<p><strong>Using <code>PythonSubscriptionCheck</code></strong></p>\n<p>To explore a part of the AST, override <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/SubscriptionCheck.java#L26\"><code>PythonSubscriptionCheck#initialize</code></a> and call the <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/SubscriptionCheck.java\"><code>SubscriptionCheck.Context#registerSyntaxNodeConsumer</code></a> with the <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/tree/Tree.java#L42\"><code>Tree#Kind</code></a> of node you want to visit. For example, if you want to explore \"if statement\" you should register to the kind <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/tree/Tree.java#L97\"><code>Tree#Kind#IF_STATEMENT</code></a> and then provide a lambda that will consume a <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/SubscriptionContext.java#L27\"><code>SubscriptionContext</code></a> to act on such ndoes.</p>\n<p><strong>Create Issues</strong></p>\n<p>From the check, issue can be created by calling <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/SubscriptionContext.java#L30\"><code>SubscriptionContext#addIssue</code></a> method or  <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-frontend/src/main/java/org/sonar/plugins/python/api/PythonCheckTree.java#L36\"><code>PythonCheckTree#addIssue</code></a> method.</p>\n<p><strong>Testing Checks</strong></p>\n<p>To test custom checks you can use method <a href=\"https://github.com/SonarSource/sonar-python/blob/master/python-checks-testkit/src/main/java/org/sonar/python/checks/utils/PythonCheckVerifier.java\"><code>PythonCheckVerifier#verify</code></a>. Don't forget to add the testkit dependency to access this class from your project : </p>\n<pre><code>  &#x3C;dependency>\n      &#x3C;groupId>org.sonarsource.python&#x3C;/groupId>\n      &#x3C;artifactId>python-checks-testkit&#x3C;/artifactId>\n      &#x3C;version>${project.version}&#x3C;/version>\n      &#x3C;scope>test&#x3C;/scope>\n  &#x3C;/dependency>\n</code></pre>\n<p>You should end each line with an issue with a comment in the following form:</p>\n<pre><code># Noncompliant {{Message}}\n</code></pre>\n<p>Comment syntax is described <a href=\"https://github.com/SonarSource/sonar-analyzer-commons/blob/master/test-commons/README.md\">here</a>.</p>\n<h2>Related Pages</h2>\n<ul>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/external-issues/\">Importing External Issues</a> (<a href=\"http://www.pylint.org/\">Pylint</a>, <a href=\"https://github.com/PyCQA/bandit/blob/master/README.rst\">Bandit</a>)</li>\n<li><a href=\"/SonarQubeChineseDoc8.1/analysis/coverage/\">Test Coverage &#x26; Execution</a> (the <a href=\"http://nedbatchelder.com/code/coverage/\">Coverage Tool</a> provided by <a href=\"http://nedbatchelder.com/\">Ned Batchelder</a>, <a href=\"https://nose.readthedocs.org/en/latest/\">Nose</a>, <a href=\"https://docs.pytest.org/en/latest/\">pytest</a>)</li>\n</ul>"}