{"expireTime":9007200870884089000,"key":"transformer-remark-markdown-html-dcf1a4fbdfc0ace3af2820a25961fa97-gatsby-remark-custom-blocks-/SonarQubeChineseDoc8.1","val":"<p>Out of the box, SonarQube supports generic formats for test coverage and test execution import. If your coverage engines' native output formats aren't supported by your language plugins, simply covert them to these formats.</p>\n<h2>Generic Coverage</h2>\n<p>Report paths should be passed in a comma-delimited list to:</p>\n<ul>\n<li><code>sonar.coverageReportPaths</code></li>\n</ul>\n<p>The supported format is described by the <code>sonar-generic-coverage.xsd</code>:</p>\n<pre><code>&#x3C;xs:schema>\n  &#x3C;xs:element name=\"coverage\">\n    &#x3C;xs:complexType>\n      &#x3C;xs:sequence>\n        &#x3C;xs:element name=\"file\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n          &#x3C;xs:complexType>\n            &#x3C;xs:sequence>\n              &#x3C;xs:element name=\"lineToCover\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n                &#x3C;xs:complexType>\n                  &#x3C;xs:attribute name=\"lineNumber\" type=\"xs:positiveInteger\" use=\"required\"/>\n                  &#x3C;xs:attribute name=\"covered\" type=\"xs:boolean\" use=\"required\"/>\n                  &#x3C;xs:attribute name=\"branchesToCover\" type=\"xs:nonNegativeInteger\"/>\n                  &#x3C;xs:attribute name=\"coveredBranches\" type=\"xs:nonNegativeInteger\"/>\n                &#x3C;/xs:complexType>\n              &#x3C;/xs:element>\n            &#x3C;/xs:sequence>\n          &#x3C;xs:attribute name=\"path\" type=\"xs:string\" use=\"required\"/>\n          &#x3C;/xs:complexType>\n        &#x3C;/xs:element>\n      &#x3C;/xs:sequence>\n      &#x3C;xs:attribute name=\"version\" type=\"xs:positiveInteger\" use=\"required\"/>\n    &#x3C;/xs:complexType>\n  &#x3C;/xs:element>\n&#x3C;/xs:schema>\n</code></pre>\n<p>and looks like this:</p>\n<pre><code>&#x3C;coverage version=\"1\">\n  &#x3C;file path=\"xources/hello/NoConditions.xoo\">\n    &#x3C;lineToCover lineNumber=\"6\" covered=\"true\"/>\n    &#x3C;lineToCover lineNumber=\"7\" covered=\"false\"/>\n  &#x3C;/file>\n  &#x3C;file path=\"xources/hello/WithConditions.xoo\">\n    &#x3C;lineToCover lineNumber=\"3\" covered=\"true\" branchesToCover=\"2\" coveredBranches=\"1\"/>\n  &#x3C;/file>\n&#x3C;/coverage>\n</code></pre>\n<p>The root node should be named <code>coverage</code>. Its version attribute should be set to <code>1</code>.</p>\n<p>Insert a <code>file</code> element for each file which can be covered by tests. Its <code>path</code> attribute can be either absolute or relative to the root of the module.\nInside a <code>file</code> element, insert a <code>lineToCover</code> for each line which can be covered by unit tests. It can have the following attributes:</p>\n<ul>\n<li><code>lineNumber</code> (mandatory)</li>\n<li><code>covered</code> (mandatory): boolean value indicating whether tests actually hit that line</li>\n<li><code>branchesToCover</code> (optional): number of branches which can be covered</li>\n<li><code>coveredBranches</code> (optional): number of branches which are actually covered by tests</li>\n</ul>\n<h2>Generic Execution</h2>\n<p>Report paths should be passed in a comma-delimited list to:</p>\n<ul>\n<li><code>sonar.testExecutionReportPaths</code></li>\n</ul>\n<p>The supported format looks like this:</p>\n<pre><code>&#x3C;testExecutions version=\"1\">\n  &#x3C;file path=\"testx/ClassOneTest.xoo\">\n    &#x3C;testCase name=\"test1\" duration=\"5\"/>\n    &#x3C;testCase name=\"test2\" duration=\"500\">\n      &#x3C;skipped message=\"short message\">other&#x3C;/skipped>\n    &#x3C;/testCase>\n    &#x3C;testCase name=\"test3\" duration=\"100\">\n      &#x3C;failure message=\"short\">stacktrace&#x3C;/failure>\n    &#x3C;/testCase>\n    &#x3C;testCase name=\"test4\" duration=\"500\">\n      &#x3C;error message=\"short\">stacktrace&#x3C;/error>\n    &#x3C;/testCase>\n  &#x3C;/file>\n&#x3C;/testExecutions>\n</code></pre>\n<p>The root node should be named <code>testExecutions</code>. Its version attribute should be set to <code>1</code>.</p>\n<p>Insert a <code>file</code> element for each test file. Its <code>path</code> attribute can be either absolute or relative to the root of the module.</p>\n<p><strong>Note</strong> unlike for coverage reports, the files present in the report must be test file names, not source code files covered by tests.</p>\n<p>Inside a <code>file</code> element, insert a <code>testCase</code> for each test run by unit tests. It can have the following attributes/children:</p>\n<ul>\n<li>\n<p><code>testCase</code> (mandatory)</p>\n<ul>\n<li>\n<p><code>name</code> (mandatory): name of the test case</p>\n</li>\n<li>\n<p><code>duration</code> (mandatory): long value in milliseconds</p>\n</li>\n<li>\n<p><code>failure|error|skipped</code> (optional): if the test is not OK, report the cause with a message and a long description</p>\n</li>\n<li>\n<p><code>message</code> (mandatory): short message describing the cause</p>\n</li>\n<li>\n<p><code>stacktrace</code> (optional): long message containing details about <code>failure|error|skipped</code> status</p>\n</li>\n</ul>\n</li>\n</ul>"}